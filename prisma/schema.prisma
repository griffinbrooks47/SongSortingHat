
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/**
 * Artist
 */
model DBArtist {
  id        String @id @default(uuid())
  spotifyId String @unique
  last_updated DateTime @default(now())
  name          String
  external_urls Json?
  followers     Int
  albums DBAlbum[]
  tracks DBTrack[]
  genres DBGenre[]
  images DBArtistImg[]
  sortings DBSorting[]
}
/**
 * Album
 */
model DBAlbum {
  id        String @id @default(uuid())
  spotifyId String @unique
  last_updated DateTime @default(now())
  title         String
  total_tracks  Int
  release_date  String
  external_urls Json?
  artists DBArtist[]
  tracks DBTrack[]
  images DBAlbumImg[]
}
/**
 * Track
 */
model DBTrack {
  id        String @id @default(uuid())
  spotifyId String @unique
  title      String
  updatedAt  DateTime @updatedAt
  albumTitle String?
  artists DBArtist[]
  albumId String?
  album   DBAlbum? @relation(fields: [albumId], references: [id])
  images DBAlbumImg[]
  sortings DBSorting[]
  @@index([spotifyId])
  @@index([albumId])
}
/**
 * Genres
 */
model DBGenre {
  id String @id @default(uuid())
  name String @unique
  artists DBArtist[]
}
/**
 * Images
 */
model DBArtistImg {
  id     String @id @default(uuid())
  width  Int
  height Int
  url    String @unique
  artist   DBArtist @relation(fields: [artistId], references: [id])
  artistId String
  @@index([artistId])
}
model DBAlbumImg {
  id     String @id @default(uuid())
  width  Int
  height Int
  url    String @unique
  album   DBAlbum?  @relation(fields: [albumId], references: [id])
  albumId String?
  tracks  DBTrack[] // Implicit many-to-many relation
  @@index([albumId])
  @@index([url])
}




model DBUser {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String? // Null if using OAuth
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts    DBAccount[]
  sortings    DBSorting[]
  communities DBCommunityUser[]
}

model DBCommunityUser {
  userId      String
  communityId String
  role        DBRole   @default(USER)
  joinedAt    DateTime @default(now())

  user      DBUser      @relation(fields: [userId], references: [id])
  community DBCommunity @relation(fields: [communityId], references: [id])

  @@id([userId, communityId])
}

model DBCommunity {
  id          String            @id @default(uuid())
  name        String
  description String?
  members     DBCommunityUser[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model DBAccount {
  id                String   @id @default(uuid())
  userId            String
  provider          String // e.g., "google", "github", "email"
  providerAccountId String   @unique // Unique identifier from provider
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  createdAt         DateTime @default(now())

  user DBUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum DBRole {
  USER
  ADMIN
}

model DBSorting {
  id          String   @id @default(uuid())
  name        String
  description String?
  config      Json // Stores the sorting configuration
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(true)

  // User relationship
  userId String
  user   DBUser @relation(fields: [userId], references: [id])

  // Artist relationship
  artistId String
  artist   DBArtist @relation(fields: [artistId], references: [id])

  // Many-to-many with Songs
  tracks DBTrack[]

  @@index([userId])
  @@index([artistId])
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
