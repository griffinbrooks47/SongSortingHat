generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * Artist
 */
model DBArtist {
  id              String             @id @default(uuid())
  spotifyId       String             @unique
  last_updated    DateTime           @default(now())
  name            String
  external_urls   Json?
  followers       Int
  albums          DBAlbum[]
  tracks          DBTrack[]
  genres          DBGenre[]
  images          DBArtistImg[]
  favoriteArtists DBFavoriteArtist[]
  sortings        DBSorting[]
}

/**
 * Album
 */
model DBAlbum {
  id            String       @id @default(uuid())
  spotifyId     String       @unique
  last_updated  DateTime     @default(now())
  title         String
  total_tracks  Int
  release_date  String
  external_urls Json?
  artists       DBArtist[]
  tracks        DBTrack[]
  images        DBAlbumImg[]
}

/**
 * Track
 */
model DBTrack {
  id         String   @id @default(uuid())
  spotifyId  String   @unique
  title      String
  updatedAt  DateTime @updatedAt
  albumTitle String?

  artists DBArtist[]

  albumId String?
  album   DBAlbum? @relation(fields: [albumId], references: [id])

  images DBAlbumImg[]

  sortings       DBSorting[]
  sortingEntries DBSortingEntry[]

  @@index([spotifyId])
  @@index([albumId])
}

/**
 * Genres
 */
model DBGenre {
  id      String     @id @default(uuid())
  name    String     @unique
  artists DBArtist[]
}

/**
 * Images
 */
model DBArtistImg {
  id       String   @id @default(uuid())
  width    Int
  height   Int
  url      String   @unique
  artist   DBArtist @relation(fields: [artistId], references: [id])
  artistId String

  @@index([artistId])
}

model DBAlbumImg {
  id      String    @id @default(uuid())
  width   Int
  height  Int
  url     String    @unique
  album   DBAlbum?  @relation(fields: [albumId], references: [id])
  albumId String?
  tracks  DBTrack[] // Implicit many-to-many relation

  @@index([albumId])
  @@index([url])
}

enum DBRole {
  USER
  ADMIN
}

model DBSorting {
  id        String   @id @default(uuid())
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(true)

  /**
   * Artist
   */
  artist   DBArtist @relation(fields: [artistId], references: [id])
  artistId String

  /**
   * Ranking
   */
  entries DBSortingEntry[]

  /**
   * Tracks
   */
  tracks DBTrack[]

  /**
   * User
   */
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
  @@index([artistId])
}

model DBSortingEntry {
  id        String    @id @default(uuid())
  position  Int
  sortingId String
  sorting   DBSorting @relation(fields: [sortingId], references: [id])

  trackId String
  track   DBTrack @relation(fields: [trackId], references: [id])

  @@unique([sortingId, position]) // one position per list
  @@unique([sortingId, trackId]) // track can appear only once per list
  @@index([trackId])
}

model DBFavoriteArtist {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  artistId String
  artist   DBArtist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  position Int

  @@unique([userId, artistId])
  @@index([artistId])
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  /**
    * Username
   */
  username String? @unique
  /**
   * User Profile Picture
   */
  profilePicture DBProfilePicture?

  /**
   * User Followers and Following
   */
  following User[] @relation("UserFollows")
  followers User[] @relation("UserFollows")

  /**
   * User Favorite Artists
   */
  favoriteArtists DBFavoriteArtist[]

  /**
   * User Sortings
   */
  sortings DBSorting[]

  @@unique([email])
  @@map("user")
  @@index([username])
}

model DBProfilePicture {
  id       String   @id @default(uuid())
  url      String?
  backgroundColor String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @unique

  @@index([userId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
