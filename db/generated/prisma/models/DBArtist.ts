
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBArtist` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBArtist
 * *
 *  * Artist
 */
export type DBArtistModel = runtime.Types.Result.DefaultSelection<Prisma.$DBArtistPayload>

export type AggregateDBArtist = {
  _count: DBArtistCountAggregateOutputType | null
  _avg: DBArtistAvgAggregateOutputType | null
  _sum: DBArtistSumAggregateOutputType | null
  _min: DBArtistMinAggregateOutputType | null
  _max: DBArtistMaxAggregateOutputType | null
}

export type DBArtistAvgAggregateOutputType = {
  followers: number | null
}

export type DBArtistSumAggregateOutputType = {
  followers: number | null
}

export type DBArtistMinAggregateOutputType = {
  id: string | null
  spotifyId: string | null
  last_updated: Date | null
  name: string | null
  followers: number | null
}

export type DBArtistMaxAggregateOutputType = {
  id: string | null
  spotifyId: string | null
  last_updated: Date | null
  name: string | null
  followers: number | null
}

export type DBArtistCountAggregateOutputType = {
  id: number
  spotifyId: number
  last_updated: number
  name: number
  external_urls: number
  followers: number
  _all: number
}


export type DBArtistAvgAggregateInputType = {
  followers?: true
}

export type DBArtistSumAggregateInputType = {
  followers?: true
}

export type DBArtistMinAggregateInputType = {
  id?: true
  spotifyId?: true
  last_updated?: true
  name?: true
  followers?: true
}

export type DBArtistMaxAggregateInputType = {
  id?: true
  spotifyId?: true
  last_updated?: true
  name?: true
  followers?: true
}

export type DBArtistCountAggregateInputType = {
  id?: true
  spotifyId?: true
  last_updated?: true
  name?: true
  external_urls?: true
  followers?: true
  _all?: true
}

export type DBArtistAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBArtist to aggregate.
   */
  where?: Prisma.DBArtistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBArtists to fetch.
   */
  orderBy?: Prisma.DBArtistOrderByWithRelationInput | Prisma.DBArtistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBArtistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBArtists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBArtists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBArtists
  **/
  _count?: true | DBArtistCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DBArtistAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DBArtistSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBArtistMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBArtistMaxAggregateInputType
}

export type GetDBArtistAggregateType<T extends DBArtistAggregateArgs> = {
      [P in keyof T & keyof AggregateDBArtist]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBArtist[P]>
    : Prisma.GetScalarType<T[P], AggregateDBArtist[P]>
}




export type DBArtistGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBArtistWhereInput
  orderBy?: Prisma.DBArtistOrderByWithAggregationInput | Prisma.DBArtistOrderByWithAggregationInput[]
  by: Prisma.DBArtistScalarFieldEnum[] | Prisma.DBArtistScalarFieldEnum
  having?: Prisma.DBArtistScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBArtistCountAggregateInputType | true
  _avg?: DBArtistAvgAggregateInputType
  _sum?: DBArtistSumAggregateInputType
  _min?: DBArtistMinAggregateInputType
  _max?: DBArtistMaxAggregateInputType
}

export type DBArtistGroupByOutputType = {
  id: string
  spotifyId: string
  last_updated: Date
  name: string
  external_urls: runtime.JsonValue | null
  followers: number
  _count: DBArtistCountAggregateOutputType | null
  _avg: DBArtistAvgAggregateOutputType | null
  _sum: DBArtistSumAggregateOutputType | null
  _min: DBArtistMinAggregateOutputType | null
  _max: DBArtistMaxAggregateOutputType | null
}

type GetDBArtistGroupByPayload<T extends DBArtistGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBArtistGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBArtistGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBArtistGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBArtistGroupByOutputType[P]>
      }
    >
  >



export type DBArtistWhereInput = {
  AND?: Prisma.DBArtistWhereInput | Prisma.DBArtistWhereInput[]
  OR?: Prisma.DBArtistWhereInput[]
  NOT?: Prisma.DBArtistWhereInput | Prisma.DBArtistWhereInput[]
  id?: Prisma.StringFilter<"DBArtist"> | string
  spotifyId?: Prisma.StringFilter<"DBArtist"> | string
  last_updated?: Prisma.DateTimeFilter<"DBArtist"> | Date | string
  name?: Prisma.StringFilter<"DBArtist"> | string
  external_urls?: Prisma.JsonNullableFilter<"DBArtist">
  followers?: Prisma.IntFilter<"DBArtist"> | number
  albums?: Prisma.DBAlbumListRelationFilter
  tracks?: Prisma.DBTrackListRelationFilter
  genres?: Prisma.DBGenreListRelationFilter
  images?: Prisma.DBArtistImgListRelationFilter
  sortings?: Prisma.DBSortingListRelationFilter
}

export type DBArtistOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  last_updated?: Prisma.SortOrder
  name?: Prisma.SortOrder
  external_urls?: Prisma.SortOrderInput | Prisma.SortOrder
  followers?: Prisma.SortOrder
  albums?: Prisma.DBAlbumOrderByRelationAggregateInput
  tracks?: Prisma.DBTrackOrderByRelationAggregateInput
  genres?: Prisma.DBGenreOrderByRelationAggregateInput
  images?: Prisma.DBArtistImgOrderByRelationAggregateInput
  sortings?: Prisma.DBSortingOrderByRelationAggregateInput
}

export type DBArtistWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  spotifyId?: string
  AND?: Prisma.DBArtistWhereInput | Prisma.DBArtistWhereInput[]
  OR?: Prisma.DBArtistWhereInput[]
  NOT?: Prisma.DBArtistWhereInput | Prisma.DBArtistWhereInput[]
  last_updated?: Prisma.DateTimeFilter<"DBArtist"> | Date | string
  name?: Prisma.StringFilter<"DBArtist"> | string
  external_urls?: Prisma.JsonNullableFilter<"DBArtist">
  followers?: Prisma.IntFilter<"DBArtist"> | number
  albums?: Prisma.DBAlbumListRelationFilter
  tracks?: Prisma.DBTrackListRelationFilter
  genres?: Prisma.DBGenreListRelationFilter
  images?: Prisma.DBArtistImgListRelationFilter
  sortings?: Prisma.DBSortingListRelationFilter
}, "id" | "spotifyId">

export type DBArtistOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  last_updated?: Prisma.SortOrder
  name?: Prisma.SortOrder
  external_urls?: Prisma.SortOrderInput | Prisma.SortOrder
  followers?: Prisma.SortOrder
  _count?: Prisma.DBArtistCountOrderByAggregateInput
  _avg?: Prisma.DBArtistAvgOrderByAggregateInput
  _max?: Prisma.DBArtistMaxOrderByAggregateInput
  _min?: Prisma.DBArtistMinOrderByAggregateInput
  _sum?: Prisma.DBArtistSumOrderByAggregateInput
}

export type DBArtistScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBArtistScalarWhereWithAggregatesInput | Prisma.DBArtistScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBArtistScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBArtistScalarWhereWithAggregatesInput | Prisma.DBArtistScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DBArtist"> | string
  spotifyId?: Prisma.StringWithAggregatesFilter<"DBArtist"> | string
  last_updated?: Prisma.DateTimeWithAggregatesFilter<"DBArtist"> | Date | string
  name?: Prisma.StringWithAggregatesFilter<"DBArtist"> | string
  external_urls?: Prisma.JsonNullableWithAggregatesFilter<"DBArtist">
  followers?: Prisma.IntWithAggregatesFilter<"DBArtist"> | number
}

export type DBArtistCreateInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  albums?: Prisma.DBAlbumCreateNestedManyWithoutArtistsInput
  tracks?: Prisma.DBTrackCreateNestedManyWithoutArtistsInput
  genres?: Prisma.DBGenreCreateNestedManyWithoutArtistsInput
  images?: Prisma.DBArtistImgCreateNestedManyWithoutArtistInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutArtistInput
}

export type DBArtistUncheckedCreateInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  albums?: Prisma.DBAlbumUncheckedCreateNestedManyWithoutArtistsInput
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutArtistsInput
  genres?: Prisma.DBGenreUncheckedCreateNestedManyWithoutArtistsInput
  images?: Prisma.DBArtistImgUncheckedCreateNestedManyWithoutArtistInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutArtistInput
}

export type DBArtistUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  albums?: Prisma.DBAlbumUpdateManyWithoutArtistsNestedInput
  tracks?: Prisma.DBTrackUpdateManyWithoutArtistsNestedInput
  genres?: Prisma.DBGenreUpdateManyWithoutArtistsNestedInput
  images?: Prisma.DBArtistImgUpdateManyWithoutArtistNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutArtistNestedInput
}

export type DBArtistUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  albums?: Prisma.DBAlbumUncheckedUpdateManyWithoutArtistsNestedInput
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutArtistsNestedInput
  genres?: Prisma.DBGenreUncheckedUpdateManyWithoutArtistsNestedInput
  images?: Prisma.DBArtistImgUncheckedUpdateManyWithoutArtistNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutArtistNestedInput
}

export type DBArtistCreateManyInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
}

export type DBArtistUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
}

export type DBArtistUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
}

export type DBArtistListRelationFilter = {
  every?: Prisma.DBArtistWhereInput
  some?: Prisma.DBArtistWhereInput
  none?: Prisma.DBArtistWhereInput
}

export type DBArtistOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DBArtistCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  last_updated?: Prisma.SortOrder
  name?: Prisma.SortOrder
  external_urls?: Prisma.SortOrder
  followers?: Prisma.SortOrder
}

export type DBArtistAvgOrderByAggregateInput = {
  followers?: Prisma.SortOrder
}

export type DBArtistMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  last_updated?: Prisma.SortOrder
  name?: Prisma.SortOrder
  followers?: Prisma.SortOrder
}

export type DBArtistMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  last_updated?: Prisma.SortOrder
  name?: Prisma.SortOrder
  followers?: Prisma.SortOrder
}

export type DBArtistSumOrderByAggregateInput = {
  followers?: Prisma.SortOrder
}

export type DBArtistScalarRelationFilter = {
  is?: Prisma.DBArtistWhereInput
  isNot?: Prisma.DBArtistWhereInput
}

export type DBArtistCreateNestedManyWithoutAlbumsInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutAlbumsInput, Prisma.DBArtistUncheckedCreateWithoutAlbumsInput> | Prisma.DBArtistCreateWithoutAlbumsInput[] | Prisma.DBArtistUncheckedCreateWithoutAlbumsInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutAlbumsInput | Prisma.DBArtistCreateOrConnectWithoutAlbumsInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
}

export type DBArtistUncheckedCreateNestedManyWithoutAlbumsInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutAlbumsInput, Prisma.DBArtistUncheckedCreateWithoutAlbumsInput> | Prisma.DBArtistCreateWithoutAlbumsInput[] | Prisma.DBArtistUncheckedCreateWithoutAlbumsInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutAlbumsInput | Prisma.DBArtistCreateOrConnectWithoutAlbumsInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
}

export type DBArtistUpdateManyWithoutAlbumsNestedInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutAlbumsInput, Prisma.DBArtistUncheckedCreateWithoutAlbumsInput> | Prisma.DBArtistCreateWithoutAlbumsInput[] | Prisma.DBArtistUncheckedCreateWithoutAlbumsInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutAlbumsInput | Prisma.DBArtistCreateOrConnectWithoutAlbumsInput[]
  upsert?: Prisma.DBArtistUpsertWithWhereUniqueWithoutAlbumsInput | Prisma.DBArtistUpsertWithWhereUniqueWithoutAlbumsInput[]
  set?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  disconnect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  delete?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  update?: Prisma.DBArtistUpdateWithWhereUniqueWithoutAlbumsInput | Prisma.DBArtistUpdateWithWhereUniqueWithoutAlbumsInput[]
  updateMany?: Prisma.DBArtistUpdateManyWithWhereWithoutAlbumsInput | Prisma.DBArtistUpdateManyWithWhereWithoutAlbumsInput[]
  deleteMany?: Prisma.DBArtistScalarWhereInput | Prisma.DBArtistScalarWhereInput[]
}

export type DBArtistUncheckedUpdateManyWithoutAlbumsNestedInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutAlbumsInput, Prisma.DBArtistUncheckedCreateWithoutAlbumsInput> | Prisma.DBArtistCreateWithoutAlbumsInput[] | Prisma.DBArtistUncheckedCreateWithoutAlbumsInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutAlbumsInput | Prisma.DBArtistCreateOrConnectWithoutAlbumsInput[]
  upsert?: Prisma.DBArtistUpsertWithWhereUniqueWithoutAlbumsInput | Prisma.DBArtistUpsertWithWhereUniqueWithoutAlbumsInput[]
  set?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  disconnect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  delete?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  update?: Prisma.DBArtistUpdateWithWhereUniqueWithoutAlbumsInput | Prisma.DBArtistUpdateWithWhereUniqueWithoutAlbumsInput[]
  updateMany?: Prisma.DBArtistUpdateManyWithWhereWithoutAlbumsInput | Prisma.DBArtistUpdateManyWithWhereWithoutAlbumsInput[]
  deleteMany?: Prisma.DBArtistScalarWhereInput | Prisma.DBArtistScalarWhereInput[]
}

export type DBArtistCreateNestedManyWithoutGenresInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutGenresInput, Prisma.DBArtistUncheckedCreateWithoutGenresInput> | Prisma.DBArtistCreateWithoutGenresInput[] | Prisma.DBArtistUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutGenresInput | Prisma.DBArtistCreateOrConnectWithoutGenresInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
}

export type DBArtistUncheckedCreateNestedManyWithoutGenresInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutGenresInput, Prisma.DBArtistUncheckedCreateWithoutGenresInput> | Prisma.DBArtistCreateWithoutGenresInput[] | Prisma.DBArtistUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutGenresInput | Prisma.DBArtistCreateOrConnectWithoutGenresInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
}

export type DBArtistUpdateManyWithoutGenresNestedInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutGenresInput, Prisma.DBArtistUncheckedCreateWithoutGenresInput> | Prisma.DBArtistCreateWithoutGenresInput[] | Prisma.DBArtistUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutGenresInput | Prisma.DBArtistCreateOrConnectWithoutGenresInput[]
  upsert?: Prisma.DBArtistUpsertWithWhereUniqueWithoutGenresInput | Prisma.DBArtistUpsertWithWhereUniqueWithoutGenresInput[]
  set?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  disconnect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  delete?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  update?: Prisma.DBArtistUpdateWithWhereUniqueWithoutGenresInput | Prisma.DBArtistUpdateWithWhereUniqueWithoutGenresInput[]
  updateMany?: Prisma.DBArtistUpdateManyWithWhereWithoutGenresInput | Prisma.DBArtistUpdateManyWithWhereWithoutGenresInput[]
  deleteMany?: Prisma.DBArtistScalarWhereInput | Prisma.DBArtistScalarWhereInput[]
}

export type DBArtistUncheckedUpdateManyWithoutGenresNestedInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutGenresInput, Prisma.DBArtistUncheckedCreateWithoutGenresInput> | Prisma.DBArtistCreateWithoutGenresInput[] | Prisma.DBArtistUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutGenresInput | Prisma.DBArtistCreateOrConnectWithoutGenresInput[]
  upsert?: Prisma.DBArtistUpsertWithWhereUniqueWithoutGenresInput | Prisma.DBArtistUpsertWithWhereUniqueWithoutGenresInput[]
  set?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  disconnect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  delete?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  update?: Prisma.DBArtistUpdateWithWhereUniqueWithoutGenresInput | Prisma.DBArtistUpdateWithWhereUniqueWithoutGenresInput[]
  updateMany?: Prisma.DBArtistUpdateManyWithWhereWithoutGenresInput | Prisma.DBArtistUpdateManyWithWhereWithoutGenresInput[]
  deleteMany?: Prisma.DBArtistScalarWhereInput | Prisma.DBArtistScalarWhereInput[]
}

export type DBArtistCreateNestedOneWithoutImagesInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutImagesInput, Prisma.DBArtistUncheckedCreateWithoutImagesInput>
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutImagesInput
  connect?: Prisma.DBArtistWhereUniqueInput
}

export type DBArtistUpdateOneRequiredWithoutImagesNestedInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutImagesInput, Prisma.DBArtistUncheckedCreateWithoutImagesInput>
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutImagesInput
  upsert?: Prisma.DBArtistUpsertWithoutImagesInput
  connect?: Prisma.DBArtistWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DBArtistUpdateToOneWithWhereWithoutImagesInput, Prisma.DBArtistUpdateWithoutImagesInput>, Prisma.DBArtistUncheckedUpdateWithoutImagesInput>
}

export type DBArtistCreateNestedManyWithoutTracksInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutTracksInput, Prisma.DBArtistUncheckedCreateWithoutTracksInput> | Prisma.DBArtistCreateWithoutTracksInput[] | Prisma.DBArtistUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutTracksInput | Prisma.DBArtistCreateOrConnectWithoutTracksInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
}

export type DBArtistUncheckedCreateNestedManyWithoutTracksInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutTracksInput, Prisma.DBArtistUncheckedCreateWithoutTracksInput> | Prisma.DBArtistCreateWithoutTracksInput[] | Prisma.DBArtistUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutTracksInput | Prisma.DBArtistCreateOrConnectWithoutTracksInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
}

export type DBArtistUpdateManyWithoutTracksNestedInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutTracksInput, Prisma.DBArtistUncheckedCreateWithoutTracksInput> | Prisma.DBArtistCreateWithoutTracksInput[] | Prisma.DBArtistUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutTracksInput | Prisma.DBArtistCreateOrConnectWithoutTracksInput[]
  upsert?: Prisma.DBArtistUpsertWithWhereUniqueWithoutTracksInput | Prisma.DBArtistUpsertWithWhereUniqueWithoutTracksInput[]
  set?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  disconnect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  delete?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  update?: Prisma.DBArtistUpdateWithWhereUniqueWithoutTracksInput | Prisma.DBArtistUpdateWithWhereUniqueWithoutTracksInput[]
  updateMany?: Prisma.DBArtistUpdateManyWithWhereWithoutTracksInput | Prisma.DBArtistUpdateManyWithWhereWithoutTracksInput[]
  deleteMany?: Prisma.DBArtistScalarWhereInput | Prisma.DBArtistScalarWhereInput[]
}

export type DBArtistUncheckedUpdateManyWithoutTracksNestedInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutTracksInput, Prisma.DBArtistUncheckedCreateWithoutTracksInput> | Prisma.DBArtistCreateWithoutTracksInput[] | Prisma.DBArtistUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutTracksInput | Prisma.DBArtistCreateOrConnectWithoutTracksInput[]
  upsert?: Prisma.DBArtistUpsertWithWhereUniqueWithoutTracksInput | Prisma.DBArtistUpsertWithWhereUniqueWithoutTracksInput[]
  set?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  disconnect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  delete?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  connect?: Prisma.DBArtistWhereUniqueInput | Prisma.DBArtistWhereUniqueInput[]
  update?: Prisma.DBArtistUpdateWithWhereUniqueWithoutTracksInput | Prisma.DBArtistUpdateWithWhereUniqueWithoutTracksInput[]
  updateMany?: Prisma.DBArtistUpdateManyWithWhereWithoutTracksInput | Prisma.DBArtistUpdateManyWithWhereWithoutTracksInput[]
  deleteMany?: Prisma.DBArtistScalarWhereInput | Prisma.DBArtistScalarWhereInput[]
}

export type DBArtistCreateNestedOneWithoutSortingsInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutSortingsInput, Prisma.DBArtistUncheckedCreateWithoutSortingsInput>
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutSortingsInput
  connect?: Prisma.DBArtistWhereUniqueInput
}

export type DBArtistUpdateOneRequiredWithoutSortingsNestedInput = {
  create?: Prisma.XOR<Prisma.DBArtistCreateWithoutSortingsInput, Prisma.DBArtistUncheckedCreateWithoutSortingsInput>
  connectOrCreate?: Prisma.DBArtistCreateOrConnectWithoutSortingsInput
  upsert?: Prisma.DBArtistUpsertWithoutSortingsInput
  connect?: Prisma.DBArtistWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DBArtistUpdateToOneWithWhereWithoutSortingsInput, Prisma.DBArtistUpdateWithoutSortingsInput>, Prisma.DBArtistUncheckedUpdateWithoutSortingsInput>
}

export type DBArtistCreateWithoutAlbumsInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  tracks?: Prisma.DBTrackCreateNestedManyWithoutArtistsInput
  genres?: Prisma.DBGenreCreateNestedManyWithoutArtistsInput
  images?: Prisma.DBArtistImgCreateNestedManyWithoutArtistInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutArtistInput
}

export type DBArtistUncheckedCreateWithoutAlbumsInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutArtistsInput
  genres?: Prisma.DBGenreUncheckedCreateNestedManyWithoutArtistsInput
  images?: Prisma.DBArtistImgUncheckedCreateNestedManyWithoutArtistInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutArtistInput
}

export type DBArtistCreateOrConnectWithoutAlbumsInput = {
  where: Prisma.DBArtistWhereUniqueInput
  create: Prisma.XOR<Prisma.DBArtistCreateWithoutAlbumsInput, Prisma.DBArtistUncheckedCreateWithoutAlbumsInput>
}

export type DBArtistUpsertWithWhereUniqueWithoutAlbumsInput = {
  where: Prisma.DBArtistWhereUniqueInput
  update: Prisma.XOR<Prisma.DBArtistUpdateWithoutAlbumsInput, Prisma.DBArtistUncheckedUpdateWithoutAlbumsInput>
  create: Prisma.XOR<Prisma.DBArtistCreateWithoutAlbumsInput, Prisma.DBArtistUncheckedCreateWithoutAlbumsInput>
}

export type DBArtistUpdateWithWhereUniqueWithoutAlbumsInput = {
  where: Prisma.DBArtistWhereUniqueInput
  data: Prisma.XOR<Prisma.DBArtistUpdateWithoutAlbumsInput, Prisma.DBArtistUncheckedUpdateWithoutAlbumsInput>
}

export type DBArtistUpdateManyWithWhereWithoutAlbumsInput = {
  where: Prisma.DBArtistScalarWhereInput
  data: Prisma.XOR<Prisma.DBArtistUpdateManyMutationInput, Prisma.DBArtistUncheckedUpdateManyWithoutAlbumsInput>
}

export type DBArtistScalarWhereInput = {
  AND?: Prisma.DBArtistScalarWhereInput | Prisma.DBArtistScalarWhereInput[]
  OR?: Prisma.DBArtistScalarWhereInput[]
  NOT?: Prisma.DBArtistScalarWhereInput | Prisma.DBArtistScalarWhereInput[]
  id?: Prisma.StringFilter<"DBArtist"> | string
  spotifyId?: Prisma.StringFilter<"DBArtist"> | string
  last_updated?: Prisma.DateTimeFilter<"DBArtist"> | Date | string
  name?: Prisma.StringFilter<"DBArtist"> | string
  external_urls?: Prisma.JsonNullableFilter<"DBArtist">
  followers?: Prisma.IntFilter<"DBArtist"> | number
}

export type DBArtistCreateWithoutGenresInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  albums?: Prisma.DBAlbumCreateNestedManyWithoutArtistsInput
  tracks?: Prisma.DBTrackCreateNestedManyWithoutArtistsInput
  images?: Prisma.DBArtistImgCreateNestedManyWithoutArtistInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutArtistInput
}

export type DBArtistUncheckedCreateWithoutGenresInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  albums?: Prisma.DBAlbumUncheckedCreateNestedManyWithoutArtistsInput
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutArtistsInput
  images?: Prisma.DBArtistImgUncheckedCreateNestedManyWithoutArtistInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutArtistInput
}

export type DBArtistCreateOrConnectWithoutGenresInput = {
  where: Prisma.DBArtistWhereUniqueInput
  create: Prisma.XOR<Prisma.DBArtistCreateWithoutGenresInput, Prisma.DBArtistUncheckedCreateWithoutGenresInput>
}

export type DBArtistUpsertWithWhereUniqueWithoutGenresInput = {
  where: Prisma.DBArtistWhereUniqueInput
  update: Prisma.XOR<Prisma.DBArtistUpdateWithoutGenresInput, Prisma.DBArtistUncheckedUpdateWithoutGenresInput>
  create: Prisma.XOR<Prisma.DBArtistCreateWithoutGenresInput, Prisma.DBArtistUncheckedCreateWithoutGenresInput>
}

export type DBArtistUpdateWithWhereUniqueWithoutGenresInput = {
  where: Prisma.DBArtistWhereUniqueInput
  data: Prisma.XOR<Prisma.DBArtistUpdateWithoutGenresInput, Prisma.DBArtistUncheckedUpdateWithoutGenresInput>
}

export type DBArtistUpdateManyWithWhereWithoutGenresInput = {
  where: Prisma.DBArtistScalarWhereInput
  data: Prisma.XOR<Prisma.DBArtistUpdateManyMutationInput, Prisma.DBArtistUncheckedUpdateManyWithoutGenresInput>
}

export type DBArtistCreateWithoutImagesInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  albums?: Prisma.DBAlbumCreateNestedManyWithoutArtistsInput
  tracks?: Prisma.DBTrackCreateNestedManyWithoutArtistsInput
  genres?: Prisma.DBGenreCreateNestedManyWithoutArtistsInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutArtistInput
}

export type DBArtistUncheckedCreateWithoutImagesInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  albums?: Prisma.DBAlbumUncheckedCreateNestedManyWithoutArtistsInput
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutArtistsInput
  genres?: Prisma.DBGenreUncheckedCreateNestedManyWithoutArtistsInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutArtistInput
}

export type DBArtistCreateOrConnectWithoutImagesInput = {
  where: Prisma.DBArtistWhereUniqueInput
  create: Prisma.XOR<Prisma.DBArtistCreateWithoutImagesInput, Prisma.DBArtistUncheckedCreateWithoutImagesInput>
}

export type DBArtistUpsertWithoutImagesInput = {
  update: Prisma.XOR<Prisma.DBArtistUpdateWithoutImagesInput, Prisma.DBArtistUncheckedUpdateWithoutImagesInput>
  create: Prisma.XOR<Prisma.DBArtistCreateWithoutImagesInput, Prisma.DBArtistUncheckedCreateWithoutImagesInput>
  where?: Prisma.DBArtistWhereInput
}

export type DBArtistUpdateToOneWithWhereWithoutImagesInput = {
  where?: Prisma.DBArtistWhereInput
  data: Prisma.XOR<Prisma.DBArtistUpdateWithoutImagesInput, Prisma.DBArtistUncheckedUpdateWithoutImagesInput>
}

export type DBArtistUpdateWithoutImagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  albums?: Prisma.DBAlbumUpdateManyWithoutArtistsNestedInput
  tracks?: Prisma.DBTrackUpdateManyWithoutArtistsNestedInput
  genres?: Prisma.DBGenreUpdateManyWithoutArtistsNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutArtistNestedInput
}

export type DBArtistUncheckedUpdateWithoutImagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  albums?: Prisma.DBAlbumUncheckedUpdateManyWithoutArtistsNestedInput
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutArtistsNestedInput
  genres?: Prisma.DBGenreUncheckedUpdateManyWithoutArtistsNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutArtistNestedInput
}

export type DBArtistCreateWithoutTracksInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  albums?: Prisma.DBAlbumCreateNestedManyWithoutArtistsInput
  genres?: Prisma.DBGenreCreateNestedManyWithoutArtistsInput
  images?: Prisma.DBArtistImgCreateNestedManyWithoutArtistInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutArtistInput
}

export type DBArtistUncheckedCreateWithoutTracksInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  albums?: Prisma.DBAlbumUncheckedCreateNestedManyWithoutArtistsInput
  genres?: Prisma.DBGenreUncheckedCreateNestedManyWithoutArtistsInput
  images?: Prisma.DBArtistImgUncheckedCreateNestedManyWithoutArtistInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutArtistInput
}

export type DBArtistCreateOrConnectWithoutTracksInput = {
  where: Prisma.DBArtistWhereUniqueInput
  create: Prisma.XOR<Prisma.DBArtistCreateWithoutTracksInput, Prisma.DBArtistUncheckedCreateWithoutTracksInput>
}

export type DBArtistUpsertWithWhereUniqueWithoutTracksInput = {
  where: Prisma.DBArtistWhereUniqueInput
  update: Prisma.XOR<Prisma.DBArtistUpdateWithoutTracksInput, Prisma.DBArtistUncheckedUpdateWithoutTracksInput>
  create: Prisma.XOR<Prisma.DBArtistCreateWithoutTracksInput, Prisma.DBArtistUncheckedCreateWithoutTracksInput>
}

export type DBArtistUpdateWithWhereUniqueWithoutTracksInput = {
  where: Prisma.DBArtistWhereUniqueInput
  data: Prisma.XOR<Prisma.DBArtistUpdateWithoutTracksInput, Prisma.DBArtistUncheckedUpdateWithoutTracksInput>
}

export type DBArtistUpdateManyWithWhereWithoutTracksInput = {
  where: Prisma.DBArtistScalarWhereInput
  data: Prisma.XOR<Prisma.DBArtistUpdateManyMutationInput, Prisma.DBArtistUncheckedUpdateManyWithoutTracksInput>
}

export type DBArtistCreateWithoutSortingsInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  albums?: Prisma.DBAlbumCreateNestedManyWithoutArtistsInput
  tracks?: Prisma.DBTrackCreateNestedManyWithoutArtistsInput
  genres?: Prisma.DBGenreCreateNestedManyWithoutArtistsInput
  images?: Prisma.DBArtistImgCreateNestedManyWithoutArtistInput
}

export type DBArtistUncheckedCreateWithoutSortingsInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  name: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers: number
  albums?: Prisma.DBAlbumUncheckedCreateNestedManyWithoutArtistsInput
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutArtistsInput
  genres?: Prisma.DBGenreUncheckedCreateNestedManyWithoutArtistsInput
  images?: Prisma.DBArtistImgUncheckedCreateNestedManyWithoutArtistInput
}

export type DBArtistCreateOrConnectWithoutSortingsInput = {
  where: Prisma.DBArtistWhereUniqueInput
  create: Prisma.XOR<Prisma.DBArtistCreateWithoutSortingsInput, Prisma.DBArtistUncheckedCreateWithoutSortingsInput>
}

export type DBArtistUpsertWithoutSortingsInput = {
  update: Prisma.XOR<Prisma.DBArtistUpdateWithoutSortingsInput, Prisma.DBArtistUncheckedUpdateWithoutSortingsInput>
  create: Prisma.XOR<Prisma.DBArtistCreateWithoutSortingsInput, Prisma.DBArtistUncheckedCreateWithoutSortingsInput>
  where?: Prisma.DBArtistWhereInput
}

export type DBArtistUpdateToOneWithWhereWithoutSortingsInput = {
  where?: Prisma.DBArtistWhereInput
  data: Prisma.XOR<Prisma.DBArtistUpdateWithoutSortingsInput, Prisma.DBArtistUncheckedUpdateWithoutSortingsInput>
}

export type DBArtistUpdateWithoutSortingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  albums?: Prisma.DBAlbumUpdateManyWithoutArtistsNestedInput
  tracks?: Prisma.DBTrackUpdateManyWithoutArtistsNestedInput
  genres?: Prisma.DBGenreUpdateManyWithoutArtistsNestedInput
  images?: Prisma.DBArtistImgUpdateManyWithoutArtistNestedInput
}

export type DBArtistUncheckedUpdateWithoutSortingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  albums?: Prisma.DBAlbumUncheckedUpdateManyWithoutArtistsNestedInput
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutArtistsNestedInput
  genres?: Prisma.DBGenreUncheckedUpdateManyWithoutArtistsNestedInput
  images?: Prisma.DBArtistImgUncheckedUpdateManyWithoutArtistNestedInput
}

export type DBArtistUpdateWithoutAlbumsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  tracks?: Prisma.DBTrackUpdateManyWithoutArtistsNestedInput
  genres?: Prisma.DBGenreUpdateManyWithoutArtistsNestedInput
  images?: Prisma.DBArtistImgUpdateManyWithoutArtistNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutArtistNestedInput
}

export type DBArtistUncheckedUpdateWithoutAlbumsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutArtistsNestedInput
  genres?: Prisma.DBGenreUncheckedUpdateManyWithoutArtistsNestedInput
  images?: Prisma.DBArtistImgUncheckedUpdateManyWithoutArtistNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutArtistNestedInput
}

export type DBArtistUncheckedUpdateManyWithoutAlbumsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
}

export type DBArtistUpdateWithoutGenresInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  albums?: Prisma.DBAlbumUpdateManyWithoutArtistsNestedInput
  tracks?: Prisma.DBTrackUpdateManyWithoutArtistsNestedInput
  images?: Prisma.DBArtistImgUpdateManyWithoutArtistNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutArtistNestedInput
}

export type DBArtistUncheckedUpdateWithoutGenresInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  albums?: Prisma.DBAlbumUncheckedUpdateManyWithoutArtistsNestedInput
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutArtistsNestedInput
  images?: Prisma.DBArtistImgUncheckedUpdateManyWithoutArtistNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutArtistNestedInput
}

export type DBArtistUncheckedUpdateManyWithoutGenresInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
}

export type DBArtistUpdateWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  albums?: Prisma.DBAlbumUpdateManyWithoutArtistsNestedInput
  genres?: Prisma.DBGenreUpdateManyWithoutArtistsNestedInput
  images?: Prisma.DBArtistImgUpdateManyWithoutArtistNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutArtistNestedInput
}

export type DBArtistUncheckedUpdateWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
  albums?: Prisma.DBAlbumUncheckedUpdateManyWithoutArtistsNestedInput
  genres?: Prisma.DBGenreUncheckedUpdateManyWithoutArtistsNestedInput
  images?: Prisma.DBArtistImgUncheckedUpdateManyWithoutArtistNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutArtistNestedInput
}

export type DBArtistUncheckedUpdateManyWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  followers?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type DBArtistCountOutputType
 */

export type DBArtistCountOutputType = {
  albums: number
  tracks: number
  genres: number
  images: number
  sortings: number
}

export type DBArtistCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  albums?: boolean | DBArtistCountOutputTypeCountAlbumsArgs
  tracks?: boolean | DBArtistCountOutputTypeCountTracksArgs
  genres?: boolean | DBArtistCountOutputTypeCountGenresArgs
  images?: boolean | DBArtistCountOutputTypeCountImagesArgs
  sortings?: boolean | DBArtistCountOutputTypeCountSortingsArgs
}

/**
 * DBArtistCountOutputType without action
 */
export type DBArtistCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistCountOutputType
   */
  select?: Prisma.DBArtistCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DBArtistCountOutputType without action
 */
export type DBArtistCountOutputTypeCountAlbumsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBAlbumWhereInput
}

/**
 * DBArtistCountOutputType without action
 */
export type DBArtistCountOutputTypeCountTracksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBTrackWhereInput
}

/**
 * DBArtistCountOutputType without action
 */
export type DBArtistCountOutputTypeCountGenresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBGenreWhereInput
}

/**
 * DBArtistCountOutputType without action
 */
export type DBArtistCountOutputTypeCountImagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBArtistImgWhereInput
}

/**
 * DBArtistCountOutputType without action
 */
export type DBArtistCountOutputTypeCountSortingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBSortingWhereInput
}


export type DBArtistSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spotifyId?: boolean
  last_updated?: boolean
  name?: boolean
  external_urls?: boolean
  followers?: boolean
  albums?: boolean | Prisma.DBArtist$albumsArgs<ExtArgs>
  tracks?: boolean | Prisma.DBArtist$tracksArgs<ExtArgs>
  genres?: boolean | Prisma.DBArtist$genresArgs<ExtArgs>
  images?: boolean | Prisma.DBArtist$imagesArgs<ExtArgs>
  sortings?: boolean | Prisma.DBArtist$sortingsArgs<ExtArgs>
  _count?: boolean | Prisma.DBArtistCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBArtist"]>

export type DBArtistSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spotifyId?: boolean
  last_updated?: boolean
  name?: boolean
  external_urls?: boolean
  followers?: boolean
}, ExtArgs["result"]["dBArtist"]>

export type DBArtistSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spotifyId?: boolean
  last_updated?: boolean
  name?: boolean
  external_urls?: boolean
  followers?: boolean
}, ExtArgs["result"]["dBArtist"]>

export type DBArtistSelectScalar = {
  id?: boolean
  spotifyId?: boolean
  last_updated?: boolean
  name?: boolean
  external_urls?: boolean
  followers?: boolean
}

export type DBArtistOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "spotifyId" | "last_updated" | "name" | "external_urls" | "followers", ExtArgs["result"]["dBArtist"]>
export type DBArtistInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  albums?: boolean | Prisma.DBArtist$albumsArgs<ExtArgs>
  tracks?: boolean | Prisma.DBArtist$tracksArgs<ExtArgs>
  genres?: boolean | Prisma.DBArtist$genresArgs<ExtArgs>
  images?: boolean | Prisma.DBArtist$imagesArgs<ExtArgs>
  sortings?: boolean | Prisma.DBArtist$sortingsArgs<ExtArgs>
  _count?: boolean | Prisma.DBArtistCountOutputTypeDefaultArgs<ExtArgs>
}
export type DBArtistIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DBArtistIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DBArtistPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBArtist"
  objects: {
    /**
     * *
     *    * Albums associated with this artist
     */
    albums: Prisma.$DBAlbumPayload<ExtArgs>[]
    /**
     * *
     *    * Tracks associated with this artist
     */
    tracks: Prisma.$DBTrackPayload<ExtArgs>[]
    /**
     * *
     *    * Genres associated with this artist.
     */
    genres: Prisma.$DBGenrePayload<ExtArgs>[]
    /**
     * *
     *    * Images
     */
    images: Prisma.$DBArtistImgPayload<ExtArgs>[]
    /**
     * *
     *    * Sortings of this artist.
     */
    sortings: Prisma.$DBSortingPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * *
     *    * Identifiers
     */
    id: string
    spotifyId: string
    /**
     * *
     *    * Database records
     */
    last_updated: Date
    /**
     * *
     *    * Metadata
     */
    name: string
    external_urls: runtime.JsonValue | null
    followers: number
  }, ExtArgs["result"]["dBArtist"]>
  composites: {}
}

export type DBArtistGetPayload<S extends boolean | null | undefined | DBArtistDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBArtistPayload, S>

export type DBArtistCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBArtistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBArtistCountAggregateInputType | true
  }

export interface DBArtistDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBArtist'], meta: { name: 'DBArtist' } }
  /**
   * Find zero or one DBArtist that matches the filter.
   * @param {DBArtistFindUniqueArgs} args - Arguments to find a DBArtist
   * @example
   * // Get one DBArtist
   * const dBArtist = await prisma.dBArtist.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBArtistFindUniqueArgs>(args: Prisma.SelectSubset<T, DBArtistFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBArtistClient<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBArtist that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBArtistFindUniqueOrThrowArgs} args - Arguments to find a DBArtist
   * @example
   * // Get one DBArtist
   * const dBArtist = await prisma.dBArtist.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBArtistFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBArtistFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBArtistClient<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBArtist that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistFindFirstArgs} args - Arguments to find a DBArtist
   * @example
   * // Get one DBArtist
   * const dBArtist = await prisma.dBArtist.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBArtistFindFirstArgs>(args?: Prisma.SelectSubset<T, DBArtistFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBArtistClient<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBArtist that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistFindFirstOrThrowArgs} args - Arguments to find a DBArtist
   * @example
   * // Get one DBArtist
   * const dBArtist = await prisma.dBArtist.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBArtistFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBArtistFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBArtistClient<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBArtists that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBArtists
   * const dBArtists = await prisma.dBArtist.findMany()
   * 
   * // Get first 10 DBArtists
   * const dBArtists = await prisma.dBArtist.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dBArtistWithIdOnly = await prisma.dBArtist.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DBArtistFindManyArgs>(args?: Prisma.SelectSubset<T, DBArtistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBArtist.
   * @param {DBArtistCreateArgs} args - Arguments to create a DBArtist.
   * @example
   * // Create one DBArtist
   * const DBArtist = await prisma.dBArtist.create({
   *   data: {
   *     // ... data to create a DBArtist
   *   }
   * })
   * 
   */
  create<T extends DBArtistCreateArgs>(args: Prisma.SelectSubset<T, DBArtistCreateArgs<ExtArgs>>): Prisma.Prisma__DBArtistClient<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBArtists.
   * @param {DBArtistCreateManyArgs} args - Arguments to create many DBArtists.
   * @example
   * // Create many DBArtists
   * const dBArtist = await prisma.dBArtist.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBArtistCreateManyArgs>(args?: Prisma.SelectSubset<T, DBArtistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBArtists and returns the data saved in the database.
   * @param {DBArtistCreateManyAndReturnArgs} args - Arguments to create many DBArtists.
   * @example
   * // Create many DBArtists
   * const dBArtist = await prisma.dBArtist.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBArtists and only return the `id`
   * const dBArtistWithIdOnly = await prisma.dBArtist.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBArtistCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBArtistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBArtist.
   * @param {DBArtistDeleteArgs} args - Arguments to delete one DBArtist.
   * @example
   * // Delete one DBArtist
   * const DBArtist = await prisma.dBArtist.delete({
   *   where: {
   *     // ... filter to delete one DBArtist
   *   }
   * })
   * 
   */
  delete<T extends DBArtistDeleteArgs>(args: Prisma.SelectSubset<T, DBArtistDeleteArgs<ExtArgs>>): Prisma.Prisma__DBArtistClient<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBArtist.
   * @param {DBArtistUpdateArgs} args - Arguments to update one DBArtist.
   * @example
   * // Update one DBArtist
   * const dBArtist = await prisma.dBArtist.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBArtistUpdateArgs>(args: Prisma.SelectSubset<T, DBArtistUpdateArgs<ExtArgs>>): Prisma.Prisma__DBArtistClient<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBArtists.
   * @param {DBArtistDeleteManyArgs} args - Arguments to filter DBArtists to delete.
   * @example
   * // Delete a few DBArtists
   * const { count } = await prisma.dBArtist.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBArtistDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBArtistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBArtists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBArtists
   * const dBArtist = await prisma.dBArtist.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBArtistUpdateManyArgs>(args: Prisma.SelectSubset<T, DBArtistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBArtists and returns the data updated in the database.
   * @param {DBArtistUpdateManyAndReturnArgs} args - Arguments to update many DBArtists.
   * @example
   * // Update many DBArtists
   * const dBArtist = await prisma.dBArtist.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBArtists and only return the `id`
   * const dBArtistWithIdOnly = await prisma.dBArtist.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBArtistUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBArtistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBArtist.
   * @param {DBArtistUpsertArgs} args - Arguments to update or create a DBArtist.
   * @example
   * // Update or create a DBArtist
   * const dBArtist = await prisma.dBArtist.upsert({
   *   create: {
   *     // ... data to create a DBArtist
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBArtist we want to update
   *   }
   * })
   */
  upsert<T extends DBArtistUpsertArgs>(args: Prisma.SelectSubset<T, DBArtistUpsertArgs<ExtArgs>>): Prisma.Prisma__DBArtistClient<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBArtists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistCountArgs} args - Arguments to filter DBArtists to count.
   * @example
   * // Count the number of DBArtists
   * const count = await prisma.dBArtist.count({
   *   where: {
   *     // ... the filter for the DBArtists we want to count
   *   }
   * })
  **/
  count<T extends DBArtistCountArgs>(
    args?: Prisma.Subset<T, DBArtistCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBArtistCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBArtist.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBArtistAggregateArgs>(args: Prisma.Subset<T, DBArtistAggregateArgs>): Prisma.PrismaPromise<GetDBArtistAggregateType<T>>

  /**
   * Group by DBArtist.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBArtistGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBArtistGroupByArgs['orderBy'] }
      : { orderBy?: DBArtistGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBArtistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBArtistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBArtist model
 */
readonly fields: DBArtistFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBArtist.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBArtistClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  albums<T extends Prisma.DBArtist$albumsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBArtist$albumsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  tracks<T extends Prisma.DBArtist$tracksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBArtist$tracksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  genres<T extends Prisma.DBArtist$genresArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBArtist$genresArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  images<T extends Prisma.DBArtist$imagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBArtist$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  sortings<T extends Prisma.DBArtist$sortingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBArtist$sortingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBArtist model
 */
export interface DBArtistFieldRefs {
  readonly id: Prisma.FieldRef<"DBArtist", 'String'>
  readonly spotifyId: Prisma.FieldRef<"DBArtist", 'String'>
  readonly last_updated: Prisma.FieldRef<"DBArtist", 'DateTime'>
  readonly name: Prisma.FieldRef<"DBArtist", 'String'>
  readonly external_urls: Prisma.FieldRef<"DBArtist", 'Json'>
  readonly followers: Prisma.FieldRef<"DBArtist", 'Int'>
}
    

// Custom InputTypes
/**
 * DBArtist findUnique
 */
export type DBArtistFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  /**
   * Filter, which DBArtist to fetch.
   */
  where: Prisma.DBArtistWhereUniqueInput
}

/**
 * DBArtist findUniqueOrThrow
 */
export type DBArtistFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  /**
   * Filter, which DBArtist to fetch.
   */
  where: Prisma.DBArtistWhereUniqueInput
}

/**
 * DBArtist findFirst
 */
export type DBArtistFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  /**
   * Filter, which DBArtist to fetch.
   */
  where?: Prisma.DBArtistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBArtists to fetch.
   */
  orderBy?: Prisma.DBArtistOrderByWithRelationInput | Prisma.DBArtistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBArtists.
   */
  cursor?: Prisma.DBArtistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBArtists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBArtists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBArtists.
   */
  distinct?: Prisma.DBArtistScalarFieldEnum | Prisma.DBArtistScalarFieldEnum[]
}

/**
 * DBArtist findFirstOrThrow
 */
export type DBArtistFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  /**
   * Filter, which DBArtist to fetch.
   */
  where?: Prisma.DBArtistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBArtists to fetch.
   */
  orderBy?: Prisma.DBArtistOrderByWithRelationInput | Prisma.DBArtistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBArtists.
   */
  cursor?: Prisma.DBArtistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBArtists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBArtists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBArtists.
   */
  distinct?: Prisma.DBArtistScalarFieldEnum | Prisma.DBArtistScalarFieldEnum[]
}

/**
 * DBArtist findMany
 */
export type DBArtistFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  /**
   * Filter, which DBArtists to fetch.
   */
  where?: Prisma.DBArtistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBArtists to fetch.
   */
  orderBy?: Prisma.DBArtistOrderByWithRelationInput | Prisma.DBArtistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBArtists.
   */
  cursor?: Prisma.DBArtistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBArtists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBArtists.
   */
  skip?: number
  distinct?: Prisma.DBArtistScalarFieldEnum | Prisma.DBArtistScalarFieldEnum[]
}

/**
 * DBArtist create
 */
export type DBArtistCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  /**
   * The data needed to create a DBArtist.
   */
  data: Prisma.XOR<Prisma.DBArtistCreateInput, Prisma.DBArtistUncheckedCreateInput>
}

/**
 * DBArtist createMany
 */
export type DBArtistCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBArtists.
   */
  data: Prisma.DBArtistCreateManyInput | Prisma.DBArtistCreateManyInput[]
}

/**
 * DBArtist createManyAndReturn
 */
export type DBArtistCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * The data used to create many DBArtists.
   */
  data: Prisma.DBArtistCreateManyInput | Prisma.DBArtistCreateManyInput[]
}

/**
 * DBArtist update
 */
export type DBArtistUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  /**
   * The data needed to update a DBArtist.
   */
  data: Prisma.XOR<Prisma.DBArtistUpdateInput, Prisma.DBArtistUncheckedUpdateInput>
  /**
   * Choose, which DBArtist to update.
   */
  where: Prisma.DBArtistWhereUniqueInput
}

/**
 * DBArtist updateMany
 */
export type DBArtistUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBArtists.
   */
  data: Prisma.XOR<Prisma.DBArtistUpdateManyMutationInput, Prisma.DBArtistUncheckedUpdateManyInput>
  /**
   * Filter which DBArtists to update
   */
  where?: Prisma.DBArtistWhereInput
  /**
   * Limit how many DBArtists to update.
   */
  limit?: number
}

/**
 * DBArtist updateManyAndReturn
 */
export type DBArtistUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * The data used to update DBArtists.
   */
  data: Prisma.XOR<Prisma.DBArtistUpdateManyMutationInput, Prisma.DBArtistUncheckedUpdateManyInput>
  /**
   * Filter which DBArtists to update
   */
  where?: Prisma.DBArtistWhereInput
  /**
   * Limit how many DBArtists to update.
   */
  limit?: number
}

/**
 * DBArtist upsert
 */
export type DBArtistUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  /**
   * The filter to search for the DBArtist to update in case it exists.
   */
  where: Prisma.DBArtistWhereUniqueInput
  /**
   * In case the DBArtist found by the `where` argument doesn't exist, create a new DBArtist with this data.
   */
  create: Prisma.XOR<Prisma.DBArtistCreateInput, Prisma.DBArtistUncheckedCreateInput>
  /**
   * In case the DBArtist was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBArtistUpdateInput, Prisma.DBArtistUncheckedUpdateInput>
}

/**
 * DBArtist delete
 */
export type DBArtistDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  /**
   * Filter which DBArtist to delete.
   */
  where: Prisma.DBArtistWhereUniqueInput
}

/**
 * DBArtist deleteMany
 */
export type DBArtistDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBArtists to delete
   */
  where?: Prisma.DBArtistWhereInput
  /**
   * Limit how many DBArtists to delete.
   */
  limit?: number
}

/**
 * DBArtist.albums
 */
export type DBArtist$albumsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  where?: Prisma.DBAlbumWhereInput
  orderBy?: Prisma.DBAlbumOrderByWithRelationInput | Prisma.DBAlbumOrderByWithRelationInput[]
  cursor?: Prisma.DBAlbumWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBAlbumScalarFieldEnum | Prisma.DBAlbumScalarFieldEnum[]
}

/**
 * DBArtist.tracks
 */
export type DBArtist$tracksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  where?: Prisma.DBTrackWhereInput
  orderBy?: Prisma.DBTrackOrderByWithRelationInput | Prisma.DBTrackOrderByWithRelationInput[]
  cursor?: Prisma.DBTrackWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBTrackScalarFieldEnum | Prisma.DBTrackScalarFieldEnum[]
}

/**
 * DBArtist.genres
 */
export type DBArtist$genresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
  where?: Prisma.DBGenreWhereInput
  orderBy?: Prisma.DBGenreOrderByWithRelationInput | Prisma.DBGenreOrderByWithRelationInput[]
  cursor?: Prisma.DBGenreWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBGenreScalarFieldEnum | Prisma.DBGenreScalarFieldEnum[]
}

/**
 * DBArtist.images
 */
export type DBArtist$imagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
  where?: Prisma.DBArtistImgWhereInput
  orderBy?: Prisma.DBArtistImgOrderByWithRelationInput | Prisma.DBArtistImgOrderByWithRelationInput[]
  cursor?: Prisma.DBArtistImgWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBArtistImgScalarFieldEnum | Prisma.DBArtistImgScalarFieldEnum[]
}

/**
 * DBArtist.sortings
 */
export type DBArtist$sortingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  where?: Prisma.DBSortingWhereInput
  orderBy?: Prisma.DBSortingOrderByWithRelationInput | Prisma.DBSortingOrderByWithRelationInput[]
  cursor?: Prisma.DBSortingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBSortingScalarFieldEnum | Prisma.DBSortingScalarFieldEnum[]
}

/**
 * DBArtist without action
 */
export type DBArtistDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
}
