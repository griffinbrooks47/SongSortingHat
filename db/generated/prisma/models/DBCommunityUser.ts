
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBCommunityUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBCommunityUser
 * 
 */
export type DBCommunityUserModel = runtime.Types.Result.DefaultSelection<Prisma.$DBCommunityUserPayload>

export type AggregateDBCommunityUser = {
  _count: DBCommunityUserCountAggregateOutputType | null
  _min: DBCommunityUserMinAggregateOutputType | null
  _max: DBCommunityUserMaxAggregateOutputType | null
}

export type DBCommunityUserMinAggregateOutputType = {
  userId: string | null
  communityId: string | null
  role: $Enums.DBRole | null
  joinedAt: Date | null
}

export type DBCommunityUserMaxAggregateOutputType = {
  userId: string | null
  communityId: string | null
  role: $Enums.DBRole | null
  joinedAt: Date | null
}

export type DBCommunityUserCountAggregateOutputType = {
  userId: number
  communityId: number
  role: number
  joinedAt: number
  _all: number
}


export type DBCommunityUserMinAggregateInputType = {
  userId?: true
  communityId?: true
  role?: true
  joinedAt?: true
}

export type DBCommunityUserMaxAggregateInputType = {
  userId?: true
  communityId?: true
  role?: true
  joinedAt?: true
}

export type DBCommunityUserCountAggregateInputType = {
  userId?: true
  communityId?: true
  role?: true
  joinedAt?: true
  _all?: true
}

export type DBCommunityUserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBCommunityUser to aggregate.
   */
  where?: Prisma.DBCommunityUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBCommunityUsers to fetch.
   */
  orderBy?: Prisma.DBCommunityUserOrderByWithRelationInput | Prisma.DBCommunityUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBCommunityUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBCommunityUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBCommunityUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBCommunityUsers
  **/
  _count?: true | DBCommunityUserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBCommunityUserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBCommunityUserMaxAggregateInputType
}

export type GetDBCommunityUserAggregateType<T extends DBCommunityUserAggregateArgs> = {
      [P in keyof T & keyof AggregateDBCommunityUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBCommunityUser[P]>
    : Prisma.GetScalarType<T[P], AggregateDBCommunityUser[P]>
}




export type DBCommunityUserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBCommunityUserWhereInput
  orderBy?: Prisma.DBCommunityUserOrderByWithAggregationInput | Prisma.DBCommunityUserOrderByWithAggregationInput[]
  by: Prisma.DBCommunityUserScalarFieldEnum[] | Prisma.DBCommunityUserScalarFieldEnum
  having?: Prisma.DBCommunityUserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBCommunityUserCountAggregateInputType | true
  _min?: DBCommunityUserMinAggregateInputType
  _max?: DBCommunityUserMaxAggregateInputType
}

export type DBCommunityUserGroupByOutputType = {
  userId: string
  communityId: string
  role: $Enums.DBRole
  joinedAt: Date
  _count: DBCommunityUserCountAggregateOutputType | null
  _min: DBCommunityUserMinAggregateOutputType | null
  _max: DBCommunityUserMaxAggregateOutputType | null
}

type GetDBCommunityUserGroupByPayload<T extends DBCommunityUserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBCommunityUserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBCommunityUserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBCommunityUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBCommunityUserGroupByOutputType[P]>
      }
    >
  >



export type DBCommunityUserWhereInput = {
  AND?: Prisma.DBCommunityUserWhereInput | Prisma.DBCommunityUserWhereInput[]
  OR?: Prisma.DBCommunityUserWhereInput[]
  NOT?: Prisma.DBCommunityUserWhereInput | Prisma.DBCommunityUserWhereInput[]
  userId?: Prisma.StringFilter<"DBCommunityUser"> | string
  communityId?: Prisma.StringFilter<"DBCommunityUser"> | string
  role?: Prisma.EnumDBRoleFilter<"DBCommunityUser"> | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFilter<"DBCommunityUser"> | Date | string
  user?: Prisma.XOR<Prisma.DBUserScalarRelationFilter, Prisma.DBUserWhereInput>
  community?: Prisma.XOR<Prisma.DBCommunityScalarRelationFilter, Prisma.DBCommunityWhereInput>
}

export type DBCommunityUserOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  communityId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  user?: Prisma.DBUserOrderByWithRelationInput
  community?: Prisma.DBCommunityOrderByWithRelationInput
}

export type DBCommunityUserWhereUniqueInput = Prisma.AtLeast<{
  userId_communityId?: Prisma.DBCommunityUserUserIdCommunityIdCompoundUniqueInput
  AND?: Prisma.DBCommunityUserWhereInput | Prisma.DBCommunityUserWhereInput[]
  OR?: Prisma.DBCommunityUserWhereInput[]
  NOT?: Prisma.DBCommunityUserWhereInput | Prisma.DBCommunityUserWhereInput[]
  userId?: Prisma.StringFilter<"DBCommunityUser"> | string
  communityId?: Prisma.StringFilter<"DBCommunityUser"> | string
  role?: Prisma.EnumDBRoleFilter<"DBCommunityUser"> | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFilter<"DBCommunityUser"> | Date | string
  user?: Prisma.XOR<Prisma.DBUserScalarRelationFilter, Prisma.DBUserWhereInput>
  community?: Prisma.XOR<Prisma.DBCommunityScalarRelationFilter, Prisma.DBCommunityWhereInput>
}, "userId_communityId">

export type DBCommunityUserOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  communityId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  _count?: Prisma.DBCommunityUserCountOrderByAggregateInput
  _max?: Prisma.DBCommunityUserMaxOrderByAggregateInput
  _min?: Prisma.DBCommunityUserMinOrderByAggregateInput
}

export type DBCommunityUserScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBCommunityUserScalarWhereWithAggregatesInput | Prisma.DBCommunityUserScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBCommunityUserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBCommunityUserScalarWhereWithAggregatesInput | Prisma.DBCommunityUserScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"DBCommunityUser"> | string
  communityId?: Prisma.StringWithAggregatesFilter<"DBCommunityUser"> | string
  role?: Prisma.EnumDBRoleWithAggregatesFilter<"DBCommunityUser"> | $Enums.DBRole
  joinedAt?: Prisma.DateTimeWithAggregatesFilter<"DBCommunityUser"> | Date | string
}

export type DBCommunityUserCreateInput = {
  role?: $Enums.DBRole
  joinedAt?: Date | string
  user: Prisma.DBUserCreateNestedOneWithoutCommunitiesInput
  community: Prisma.DBCommunityCreateNestedOneWithoutMembersInput
}

export type DBCommunityUserUncheckedCreateInput = {
  userId: string
  communityId: string
  role?: $Enums.DBRole
  joinedAt?: Date | string
}

export type DBCommunityUserUpdateInput = {
  role?: Prisma.EnumDBRoleFieldUpdateOperationsInput | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.DBUserUpdateOneRequiredWithoutCommunitiesNestedInput
  community?: Prisma.DBCommunityUpdateOneRequiredWithoutMembersNestedInput
}

export type DBCommunityUserUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  communityId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumDBRoleFieldUpdateOperationsInput | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBCommunityUserCreateManyInput = {
  userId: string
  communityId: string
  role?: $Enums.DBRole
  joinedAt?: Date | string
}

export type DBCommunityUserUpdateManyMutationInput = {
  role?: Prisma.EnumDBRoleFieldUpdateOperationsInput | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBCommunityUserUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  communityId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumDBRoleFieldUpdateOperationsInput | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBCommunityUserListRelationFilter = {
  every?: Prisma.DBCommunityUserWhereInput
  some?: Prisma.DBCommunityUserWhereInput
  none?: Prisma.DBCommunityUserWhereInput
}

export type DBCommunityUserOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DBCommunityUserUserIdCommunityIdCompoundUniqueInput = {
  userId: string
  communityId: string
}

export type DBCommunityUserCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  communityId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type DBCommunityUserMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  communityId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type DBCommunityUserMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  communityId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type DBCommunityUserCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutUserInput, Prisma.DBCommunityUserUncheckedCreateWithoutUserInput> | Prisma.DBCommunityUserCreateWithoutUserInput[] | Prisma.DBCommunityUserUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBCommunityUserCreateOrConnectWithoutUserInput | Prisma.DBCommunityUserCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DBCommunityUserCreateManyUserInputEnvelope
  connect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
}

export type DBCommunityUserUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutUserInput, Prisma.DBCommunityUserUncheckedCreateWithoutUserInput> | Prisma.DBCommunityUserCreateWithoutUserInput[] | Prisma.DBCommunityUserUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBCommunityUserCreateOrConnectWithoutUserInput | Prisma.DBCommunityUserCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DBCommunityUserCreateManyUserInputEnvelope
  connect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
}

export type DBCommunityUserUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutUserInput, Prisma.DBCommunityUserUncheckedCreateWithoutUserInput> | Prisma.DBCommunityUserCreateWithoutUserInput[] | Prisma.DBCommunityUserUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBCommunityUserCreateOrConnectWithoutUserInput | Prisma.DBCommunityUserCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DBCommunityUserUpsertWithWhereUniqueWithoutUserInput | Prisma.DBCommunityUserUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DBCommunityUserCreateManyUserInputEnvelope
  set?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  disconnect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  delete?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  connect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  update?: Prisma.DBCommunityUserUpdateWithWhereUniqueWithoutUserInput | Prisma.DBCommunityUserUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DBCommunityUserUpdateManyWithWhereWithoutUserInput | Prisma.DBCommunityUserUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DBCommunityUserScalarWhereInput | Prisma.DBCommunityUserScalarWhereInput[]
}

export type DBCommunityUserUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutUserInput, Prisma.DBCommunityUserUncheckedCreateWithoutUserInput> | Prisma.DBCommunityUserCreateWithoutUserInput[] | Prisma.DBCommunityUserUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBCommunityUserCreateOrConnectWithoutUserInput | Prisma.DBCommunityUserCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DBCommunityUserUpsertWithWhereUniqueWithoutUserInput | Prisma.DBCommunityUserUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DBCommunityUserCreateManyUserInputEnvelope
  set?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  disconnect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  delete?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  connect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  update?: Prisma.DBCommunityUserUpdateWithWhereUniqueWithoutUserInput | Prisma.DBCommunityUserUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DBCommunityUserUpdateManyWithWhereWithoutUserInput | Prisma.DBCommunityUserUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DBCommunityUserScalarWhereInput | Prisma.DBCommunityUserScalarWhereInput[]
}

export type EnumDBRoleFieldUpdateOperationsInput = {
  set?: $Enums.DBRole
}

export type DBCommunityUserCreateNestedManyWithoutCommunityInput = {
  create?: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutCommunityInput, Prisma.DBCommunityUserUncheckedCreateWithoutCommunityInput> | Prisma.DBCommunityUserCreateWithoutCommunityInput[] | Prisma.DBCommunityUserUncheckedCreateWithoutCommunityInput[]
  connectOrCreate?: Prisma.DBCommunityUserCreateOrConnectWithoutCommunityInput | Prisma.DBCommunityUserCreateOrConnectWithoutCommunityInput[]
  createMany?: Prisma.DBCommunityUserCreateManyCommunityInputEnvelope
  connect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
}

export type DBCommunityUserUncheckedCreateNestedManyWithoutCommunityInput = {
  create?: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutCommunityInput, Prisma.DBCommunityUserUncheckedCreateWithoutCommunityInput> | Prisma.DBCommunityUserCreateWithoutCommunityInput[] | Prisma.DBCommunityUserUncheckedCreateWithoutCommunityInput[]
  connectOrCreate?: Prisma.DBCommunityUserCreateOrConnectWithoutCommunityInput | Prisma.DBCommunityUserCreateOrConnectWithoutCommunityInput[]
  createMany?: Prisma.DBCommunityUserCreateManyCommunityInputEnvelope
  connect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
}

export type DBCommunityUserUpdateManyWithoutCommunityNestedInput = {
  create?: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutCommunityInput, Prisma.DBCommunityUserUncheckedCreateWithoutCommunityInput> | Prisma.DBCommunityUserCreateWithoutCommunityInput[] | Prisma.DBCommunityUserUncheckedCreateWithoutCommunityInput[]
  connectOrCreate?: Prisma.DBCommunityUserCreateOrConnectWithoutCommunityInput | Prisma.DBCommunityUserCreateOrConnectWithoutCommunityInput[]
  upsert?: Prisma.DBCommunityUserUpsertWithWhereUniqueWithoutCommunityInput | Prisma.DBCommunityUserUpsertWithWhereUniqueWithoutCommunityInput[]
  createMany?: Prisma.DBCommunityUserCreateManyCommunityInputEnvelope
  set?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  disconnect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  delete?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  connect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  update?: Prisma.DBCommunityUserUpdateWithWhereUniqueWithoutCommunityInput | Prisma.DBCommunityUserUpdateWithWhereUniqueWithoutCommunityInput[]
  updateMany?: Prisma.DBCommunityUserUpdateManyWithWhereWithoutCommunityInput | Prisma.DBCommunityUserUpdateManyWithWhereWithoutCommunityInput[]
  deleteMany?: Prisma.DBCommunityUserScalarWhereInput | Prisma.DBCommunityUserScalarWhereInput[]
}

export type DBCommunityUserUncheckedUpdateManyWithoutCommunityNestedInput = {
  create?: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutCommunityInput, Prisma.DBCommunityUserUncheckedCreateWithoutCommunityInput> | Prisma.DBCommunityUserCreateWithoutCommunityInput[] | Prisma.DBCommunityUserUncheckedCreateWithoutCommunityInput[]
  connectOrCreate?: Prisma.DBCommunityUserCreateOrConnectWithoutCommunityInput | Prisma.DBCommunityUserCreateOrConnectWithoutCommunityInput[]
  upsert?: Prisma.DBCommunityUserUpsertWithWhereUniqueWithoutCommunityInput | Prisma.DBCommunityUserUpsertWithWhereUniqueWithoutCommunityInput[]
  createMany?: Prisma.DBCommunityUserCreateManyCommunityInputEnvelope
  set?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  disconnect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  delete?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  connect?: Prisma.DBCommunityUserWhereUniqueInput | Prisma.DBCommunityUserWhereUniqueInput[]
  update?: Prisma.DBCommunityUserUpdateWithWhereUniqueWithoutCommunityInput | Prisma.DBCommunityUserUpdateWithWhereUniqueWithoutCommunityInput[]
  updateMany?: Prisma.DBCommunityUserUpdateManyWithWhereWithoutCommunityInput | Prisma.DBCommunityUserUpdateManyWithWhereWithoutCommunityInput[]
  deleteMany?: Prisma.DBCommunityUserScalarWhereInput | Prisma.DBCommunityUserScalarWhereInput[]
}

export type DBCommunityUserCreateWithoutUserInput = {
  role?: $Enums.DBRole
  joinedAt?: Date | string
  community: Prisma.DBCommunityCreateNestedOneWithoutMembersInput
}

export type DBCommunityUserUncheckedCreateWithoutUserInput = {
  communityId: string
  role?: $Enums.DBRole
  joinedAt?: Date | string
}

export type DBCommunityUserCreateOrConnectWithoutUserInput = {
  where: Prisma.DBCommunityUserWhereUniqueInput
  create: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutUserInput, Prisma.DBCommunityUserUncheckedCreateWithoutUserInput>
}

export type DBCommunityUserCreateManyUserInputEnvelope = {
  data: Prisma.DBCommunityUserCreateManyUserInput | Prisma.DBCommunityUserCreateManyUserInput[]
}

export type DBCommunityUserUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.DBCommunityUserWhereUniqueInput
  update: Prisma.XOR<Prisma.DBCommunityUserUpdateWithoutUserInput, Prisma.DBCommunityUserUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutUserInput, Prisma.DBCommunityUserUncheckedCreateWithoutUserInput>
}

export type DBCommunityUserUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.DBCommunityUserWhereUniqueInput
  data: Prisma.XOR<Prisma.DBCommunityUserUpdateWithoutUserInput, Prisma.DBCommunityUserUncheckedUpdateWithoutUserInput>
}

export type DBCommunityUserUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.DBCommunityUserScalarWhereInput
  data: Prisma.XOR<Prisma.DBCommunityUserUpdateManyMutationInput, Prisma.DBCommunityUserUncheckedUpdateManyWithoutUserInput>
}

export type DBCommunityUserScalarWhereInput = {
  AND?: Prisma.DBCommunityUserScalarWhereInput | Prisma.DBCommunityUserScalarWhereInput[]
  OR?: Prisma.DBCommunityUserScalarWhereInput[]
  NOT?: Prisma.DBCommunityUserScalarWhereInput | Prisma.DBCommunityUserScalarWhereInput[]
  userId?: Prisma.StringFilter<"DBCommunityUser"> | string
  communityId?: Prisma.StringFilter<"DBCommunityUser"> | string
  role?: Prisma.EnumDBRoleFilter<"DBCommunityUser"> | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFilter<"DBCommunityUser"> | Date | string
}

export type DBCommunityUserCreateWithoutCommunityInput = {
  role?: $Enums.DBRole
  joinedAt?: Date | string
  user: Prisma.DBUserCreateNestedOneWithoutCommunitiesInput
}

export type DBCommunityUserUncheckedCreateWithoutCommunityInput = {
  userId: string
  role?: $Enums.DBRole
  joinedAt?: Date | string
}

export type DBCommunityUserCreateOrConnectWithoutCommunityInput = {
  where: Prisma.DBCommunityUserWhereUniqueInput
  create: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutCommunityInput, Prisma.DBCommunityUserUncheckedCreateWithoutCommunityInput>
}

export type DBCommunityUserCreateManyCommunityInputEnvelope = {
  data: Prisma.DBCommunityUserCreateManyCommunityInput | Prisma.DBCommunityUserCreateManyCommunityInput[]
}

export type DBCommunityUserUpsertWithWhereUniqueWithoutCommunityInput = {
  where: Prisma.DBCommunityUserWhereUniqueInput
  update: Prisma.XOR<Prisma.DBCommunityUserUpdateWithoutCommunityInput, Prisma.DBCommunityUserUncheckedUpdateWithoutCommunityInput>
  create: Prisma.XOR<Prisma.DBCommunityUserCreateWithoutCommunityInput, Prisma.DBCommunityUserUncheckedCreateWithoutCommunityInput>
}

export type DBCommunityUserUpdateWithWhereUniqueWithoutCommunityInput = {
  where: Prisma.DBCommunityUserWhereUniqueInput
  data: Prisma.XOR<Prisma.DBCommunityUserUpdateWithoutCommunityInput, Prisma.DBCommunityUserUncheckedUpdateWithoutCommunityInput>
}

export type DBCommunityUserUpdateManyWithWhereWithoutCommunityInput = {
  where: Prisma.DBCommunityUserScalarWhereInput
  data: Prisma.XOR<Prisma.DBCommunityUserUpdateManyMutationInput, Prisma.DBCommunityUserUncheckedUpdateManyWithoutCommunityInput>
}

export type DBCommunityUserCreateManyUserInput = {
  communityId: string
  role?: $Enums.DBRole
  joinedAt?: Date | string
}

export type DBCommunityUserUpdateWithoutUserInput = {
  role?: Prisma.EnumDBRoleFieldUpdateOperationsInput | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  community?: Prisma.DBCommunityUpdateOneRequiredWithoutMembersNestedInput
}

export type DBCommunityUserUncheckedUpdateWithoutUserInput = {
  communityId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumDBRoleFieldUpdateOperationsInput | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBCommunityUserUncheckedUpdateManyWithoutUserInput = {
  communityId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumDBRoleFieldUpdateOperationsInput | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBCommunityUserCreateManyCommunityInput = {
  userId: string
  role?: $Enums.DBRole
  joinedAt?: Date | string
}

export type DBCommunityUserUpdateWithoutCommunityInput = {
  role?: Prisma.EnumDBRoleFieldUpdateOperationsInput | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.DBUserUpdateOneRequiredWithoutCommunitiesNestedInput
}

export type DBCommunityUserUncheckedUpdateWithoutCommunityInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumDBRoleFieldUpdateOperationsInput | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBCommunityUserUncheckedUpdateManyWithoutCommunityInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumDBRoleFieldUpdateOperationsInput | $Enums.DBRole
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DBCommunityUserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  communityId?: boolean
  role?: boolean
  joinedAt?: boolean
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  community?: boolean | Prisma.DBCommunityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBCommunityUser"]>

export type DBCommunityUserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  communityId?: boolean
  role?: boolean
  joinedAt?: boolean
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  community?: boolean | Prisma.DBCommunityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBCommunityUser"]>

export type DBCommunityUserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  communityId?: boolean
  role?: boolean
  joinedAt?: boolean
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  community?: boolean | Prisma.DBCommunityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBCommunityUser"]>

export type DBCommunityUserSelectScalar = {
  userId?: boolean
  communityId?: boolean
  role?: boolean
  joinedAt?: boolean
}

export type DBCommunityUserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "communityId" | "role" | "joinedAt", ExtArgs["result"]["dBCommunityUser"]>
export type DBCommunityUserInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  community?: boolean | Prisma.DBCommunityDefaultArgs<ExtArgs>
}
export type DBCommunityUserIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  community?: boolean | Prisma.DBCommunityDefaultArgs<ExtArgs>
}
export type DBCommunityUserIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  community?: boolean | Prisma.DBCommunityDefaultArgs<ExtArgs>
}

export type $DBCommunityUserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBCommunityUser"
  objects: {
    user: Prisma.$DBUserPayload<ExtArgs>
    community: Prisma.$DBCommunityPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    communityId: string
    role: $Enums.DBRole
    joinedAt: Date
  }, ExtArgs["result"]["dBCommunityUser"]>
  composites: {}
}

export type DBCommunityUserGetPayload<S extends boolean | null | undefined | DBCommunityUserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload, S>

export type DBCommunityUserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBCommunityUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBCommunityUserCountAggregateInputType | true
  }

export interface DBCommunityUserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBCommunityUser'], meta: { name: 'DBCommunityUser' } }
  /**
   * Find zero or one DBCommunityUser that matches the filter.
   * @param {DBCommunityUserFindUniqueArgs} args - Arguments to find a DBCommunityUser
   * @example
   * // Get one DBCommunityUser
   * const dBCommunityUser = await prisma.dBCommunityUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBCommunityUserFindUniqueArgs>(args: Prisma.SelectSubset<T, DBCommunityUserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBCommunityUserClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBCommunityUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBCommunityUserFindUniqueOrThrowArgs} args - Arguments to find a DBCommunityUser
   * @example
   * // Get one DBCommunityUser
   * const dBCommunityUser = await prisma.dBCommunityUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBCommunityUserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBCommunityUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBCommunityUserClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBCommunityUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityUserFindFirstArgs} args - Arguments to find a DBCommunityUser
   * @example
   * // Get one DBCommunityUser
   * const dBCommunityUser = await prisma.dBCommunityUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBCommunityUserFindFirstArgs>(args?: Prisma.SelectSubset<T, DBCommunityUserFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBCommunityUserClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBCommunityUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityUserFindFirstOrThrowArgs} args - Arguments to find a DBCommunityUser
   * @example
   * // Get one DBCommunityUser
   * const dBCommunityUser = await prisma.dBCommunityUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBCommunityUserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBCommunityUserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBCommunityUserClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBCommunityUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBCommunityUsers
   * const dBCommunityUsers = await prisma.dBCommunityUser.findMany()
   * 
   * // Get first 10 DBCommunityUsers
   * const dBCommunityUsers = await prisma.dBCommunityUser.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const dBCommunityUserWithUserIdOnly = await prisma.dBCommunityUser.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends DBCommunityUserFindManyArgs>(args?: Prisma.SelectSubset<T, DBCommunityUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBCommunityUser.
   * @param {DBCommunityUserCreateArgs} args - Arguments to create a DBCommunityUser.
   * @example
   * // Create one DBCommunityUser
   * const DBCommunityUser = await prisma.dBCommunityUser.create({
   *   data: {
   *     // ... data to create a DBCommunityUser
   *   }
   * })
   * 
   */
  create<T extends DBCommunityUserCreateArgs>(args: Prisma.SelectSubset<T, DBCommunityUserCreateArgs<ExtArgs>>): Prisma.Prisma__DBCommunityUserClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBCommunityUsers.
   * @param {DBCommunityUserCreateManyArgs} args - Arguments to create many DBCommunityUsers.
   * @example
   * // Create many DBCommunityUsers
   * const dBCommunityUser = await prisma.dBCommunityUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBCommunityUserCreateManyArgs>(args?: Prisma.SelectSubset<T, DBCommunityUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBCommunityUsers and returns the data saved in the database.
   * @param {DBCommunityUserCreateManyAndReturnArgs} args - Arguments to create many DBCommunityUsers.
   * @example
   * // Create many DBCommunityUsers
   * const dBCommunityUser = await prisma.dBCommunityUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBCommunityUsers and only return the `userId`
   * const dBCommunityUserWithUserIdOnly = await prisma.dBCommunityUser.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBCommunityUserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBCommunityUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBCommunityUser.
   * @param {DBCommunityUserDeleteArgs} args - Arguments to delete one DBCommunityUser.
   * @example
   * // Delete one DBCommunityUser
   * const DBCommunityUser = await prisma.dBCommunityUser.delete({
   *   where: {
   *     // ... filter to delete one DBCommunityUser
   *   }
   * })
   * 
   */
  delete<T extends DBCommunityUserDeleteArgs>(args: Prisma.SelectSubset<T, DBCommunityUserDeleteArgs<ExtArgs>>): Prisma.Prisma__DBCommunityUserClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBCommunityUser.
   * @param {DBCommunityUserUpdateArgs} args - Arguments to update one DBCommunityUser.
   * @example
   * // Update one DBCommunityUser
   * const dBCommunityUser = await prisma.dBCommunityUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBCommunityUserUpdateArgs>(args: Prisma.SelectSubset<T, DBCommunityUserUpdateArgs<ExtArgs>>): Prisma.Prisma__DBCommunityUserClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBCommunityUsers.
   * @param {DBCommunityUserDeleteManyArgs} args - Arguments to filter DBCommunityUsers to delete.
   * @example
   * // Delete a few DBCommunityUsers
   * const { count } = await prisma.dBCommunityUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBCommunityUserDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBCommunityUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBCommunityUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBCommunityUsers
   * const dBCommunityUser = await prisma.dBCommunityUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBCommunityUserUpdateManyArgs>(args: Prisma.SelectSubset<T, DBCommunityUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBCommunityUsers and returns the data updated in the database.
   * @param {DBCommunityUserUpdateManyAndReturnArgs} args - Arguments to update many DBCommunityUsers.
   * @example
   * // Update many DBCommunityUsers
   * const dBCommunityUser = await prisma.dBCommunityUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBCommunityUsers and only return the `userId`
   * const dBCommunityUserWithUserIdOnly = await prisma.dBCommunityUser.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBCommunityUserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBCommunityUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBCommunityUser.
   * @param {DBCommunityUserUpsertArgs} args - Arguments to update or create a DBCommunityUser.
   * @example
   * // Update or create a DBCommunityUser
   * const dBCommunityUser = await prisma.dBCommunityUser.upsert({
   *   create: {
   *     // ... data to create a DBCommunityUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBCommunityUser we want to update
   *   }
   * })
   */
  upsert<T extends DBCommunityUserUpsertArgs>(args: Prisma.SelectSubset<T, DBCommunityUserUpsertArgs<ExtArgs>>): Prisma.Prisma__DBCommunityUserClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBCommunityUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityUserCountArgs} args - Arguments to filter DBCommunityUsers to count.
   * @example
   * // Count the number of DBCommunityUsers
   * const count = await prisma.dBCommunityUser.count({
   *   where: {
   *     // ... the filter for the DBCommunityUsers we want to count
   *   }
   * })
  **/
  count<T extends DBCommunityUserCountArgs>(
    args?: Prisma.Subset<T, DBCommunityUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBCommunityUserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBCommunityUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBCommunityUserAggregateArgs>(args: Prisma.Subset<T, DBCommunityUserAggregateArgs>): Prisma.PrismaPromise<GetDBCommunityUserAggregateType<T>>

  /**
   * Group by DBCommunityUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBCommunityUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBCommunityUserGroupByArgs['orderBy'] }
      : { orderBy?: DBCommunityUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBCommunityUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBCommunityUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBCommunityUser model
 */
readonly fields: DBCommunityUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBCommunityUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBCommunityUserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.DBUserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBUserDefaultArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  community<T extends Prisma.DBCommunityDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBCommunityDefaultArgs<ExtArgs>>): Prisma.Prisma__DBCommunityClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBCommunityUser model
 */
export interface DBCommunityUserFieldRefs {
  readonly userId: Prisma.FieldRef<"DBCommunityUser", 'String'>
  readonly communityId: Prisma.FieldRef<"DBCommunityUser", 'String'>
  readonly role: Prisma.FieldRef<"DBCommunityUser", 'DBRole'>
  readonly joinedAt: Prisma.FieldRef<"DBCommunityUser", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DBCommunityUser findUnique
 */
export type DBCommunityUserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  /**
   * Filter, which DBCommunityUser to fetch.
   */
  where: Prisma.DBCommunityUserWhereUniqueInput
}

/**
 * DBCommunityUser findUniqueOrThrow
 */
export type DBCommunityUserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  /**
   * Filter, which DBCommunityUser to fetch.
   */
  where: Prisma.DBCommunityUserWhereUniqueInput
}

/**
 * DBCommunityUser findFirst
 */
export type DBCommunityUserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  /**
   * Filter, which DBCommunityUser to fetch.
   */
  where?: Prisma.DBCommunityUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBCommunityUsers to fetch.
   */
  orderBy?: Prisma.DBCommunityUserOrderByWithRelationInput | Prisma.DBCommunityUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBCommunityUsers.
   */
  cursor?: Prisma.DBCommunityUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBCommunityUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBCommunityUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBCommunityUsers.
   */
  distinct?: Prisma.DBCommunityUserScalarFieldEnum | Prisma.DBCommunityUserScalarFieldEnum[]
}

/**
 * DBCommunityUser findFirstOrThrow
 */
export type DBCommunityUserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  /**
   * Filter, which DBCommunityUser to fetch.
   */
  where?: Prisma.DBCommunityUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBCommunityUsers to fetch.
   */
  orderBy?: Prisma.DBCommunityUserOrderByWithRelationInput | Prisma.DBCommunityUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBCommunityUsers.
   */
  cursor?: Prisma.DBCommunityUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBCommunityUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBCommunityUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBCommunityUsers.
   */
  distinct?: Prisma.DBCommunityUserScalarFieldEnum | Prisma.DBCommunityUserScalarFieldEnum[]
}

/**
 * DBCommunityUser findMany
 */
export type DBCommunityUserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  /**
   * Filter, which DBCommunityUsers to fetch.
   */
  where?: Prisma.DBCommunityUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBCommunityUsers to fetch.
   */
  orderBy?: Prisma.DBCommunityUserOrderByWithRelationInput | Prisma.DBCommunityUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBCommunityUsers.
   */
  cursor?: Prisma.DBCommunityUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBCommunityUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBCommunityUsers.
   */
  skip?: number
  distinct?: Prisma.DBCommunityUserScalarFieldEnum | Prisma.DBCommunityUserScalarFieldEnum[]
}

/**
 * DBCommunityUser create
 */
export type DBCommunityUserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  /**
   * The data needed to create a DBCommunityUser.
   */
  data: Prisma.XOR<Prisma.DBCommunityUserCreateInput, Prisma.DBCommunityUserUncheckedCreateInput>
}

/**
 * DBCommunityUser createMany
 */
export type DBCommunityUserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBCommunityUsers.
   */
  data: Prisma.DBCommunityUserCreateManyInput | Prisma.DBCommunityUserCreateManyInput[]
}

/**
 * DBCommunityUser createManyAndReturn
 */
export type DBCommunityUserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * The data used to create many DBCommunityUsers.
   */
  data: Prisma.DBCommunityUserCreateManyInput | Prisma.DBCommunityUserCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DBCommunityUser update
 */
export type DBCommunityUserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  /**
   * The data needed to update a DBCommunityUser.
   */
  data: Prisma.XOR<Prisma.DBCommunityUserUpdateInput, Prisma.DBCommunityUserUncheckedUpdateInput>
  /**
   * Choose, which DBCommunityUser to update.
   */
  where: Prisma.DBCommunityUserWhereUniqueInput
}

/**
 * DBCommunityUser updateMany
 */
export type DBCommunityUserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBCommunityUsers.
   */
  data: Prisma.XOR<Prisma.DBCommunityUserUpdateManyMutationInput, Prisma.DBCommunityUserUncheckedUpdateManyInput>
  /**
   * Filter which DBCommunityUsers to update
   */
  where?: Prisma.DBCommunityUserWhereInput
  /**
   * Limit how many DBCommunityUsers to update.
   */
  limit?: number
}

/**
 * DBCommunityUser updateManyAndReturn
 */
export type DBCommunityUserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * The data used to update DBCommunityUsers.
   */
  data: Prisma.XOR<Prisma.DBCommunityUserUpdateManyMutationInput, Prisma.DBCommunityUserUncheckedUpdateManyInput>
  /**
   * Filter which DBCommunityUsers to update
   */
  where?: Prisma.DBCommunityUserWhereInput
  /**
   * Limit how many DBCommunityUsers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DBCommunityUser upsert
 */
export type DBCommunityUserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  /**
   * The filter to search for the DBCommunityUser to update in case it exists.
   */
  where: Prisma.DBCommunityUserWhereUniqueInput
  /**
   * In case the DBCommunityUser found by the `where` argument doesn't exist, create a new DBCommunityUser with this data.
   */
  create: Prisma.XOR<Prisma.DBCommunityUserCreateInput, Prisma.DBCommunityUserUncheckedCreateInput>
  /**
   * In case the DBCommunityUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBCommunityUserUpdateInput, Prisma.DBCommunityUserUncheckedUpdateInput>
}

/**
 * DBCommunityUser delete
 */
export type DBCommunityUserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  /**
   * Filter which DBCommunityUser to delete.
   */
  where: Prisma.DBCommunityUserWhereUniqueInput
}

/**
 * DBCommunityUser deleteMany
 */
export type DBCommunityUserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBCommunityUsers to delete
   */
  where?: Prisma.DBCommunityUserWhereInput
  /**
   * Limit how many DBCommunityUsers to delete.
   */
  limit?: number
}

/**
 * DBCommunityUser without action
 */
export type DBCommunityUserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
}
