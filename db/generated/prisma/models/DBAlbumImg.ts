
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBAlbumImg` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBAlbumImg
 * 
 */
export type DBAlbumImgModel = runtime.Types.Result.DefaultSelection<Prisma.$DBAlbumImgPayload>

export type AggregateDBAlbumImg = {
  _count: DBAlbumImgCountAggregateOutputType | null
  _avg: DBAlbumImgAvgAggregateOutputType | null
  _sum: DBAlbumImgSumAggregateOutputType | null
  _min: DBAlbumImgMinAggregateOutputType | null
  _max: DBAlbumImgMaxAggregateOutputType | null
}

export type DBAlbumImgAvgAggregateOutputType = {
  width: number | null
  height: number | null
}

export type DBAlbumImgSumAggregateOutputType = {
  width: number | null
  height: number | null
}

export type DBAlbumImgMinAggregateOutputType = {
  id: string | null
  width: number | null
  height: number | null
  url: string | null
  albumId: string | null
}

export type DBAlbumImgMaxAggregateOutputType = {
  id: string | null
  width: number | null
  height: number | null
  url: string | null
  albumId: string | null
}

export type DBAlbumImgCountAggregateOutputType = {
  id: number
  width: number
  height: number
  url: number
  albumId: number
  _all: number
}


export type DBAlbumImgAvgAggregateInputType = {
  width?: true
  height?: true
}

export type DBAlbumImgSumAggregateInputType = {
  width?: true
  height?: true
}

export type DBAlbumImgMinAggregateInputType = {
  id?: true
  width?: true
  height?: true
  url?: true
  albumId?: true
}

export type DBAlbumImgMaxAggregateInputType = {
  id?: true
  width?: true
  height?: true
  url?: true
  albumId?: true
}

export type DBAlbumImgCountAggregateInputType = {
  id?: true
  width?: true
  height?: true
  url?: true
  albumId?: true
  _all?: true
}

export type DBAlbumImgAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBAlbumImg to aggregate.
   */
  where?: Prisma.DBAlbumImgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAlbumImgs to fetch.
   */
  orderBy?: Prisma.DBAlbumImgOrderByWithRelationInput | Prisma.DBAlbumImgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBAlbumImgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAlbumImgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAlbumImgs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBAlbumImgs
  **/
  _count?: true | DBAlbumImgCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DBAlbumImgAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DBAlbumImgSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBAlbumImgMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBAlbumImgMaxAggregateInputType
}

export type GetDBAlbumImgAggregateType<T extends DBAlbumImgAggregateArgs> = {
      [P in keyof T & keyof AggregateDBAlbumImg]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBAlbumImg[P]>
    : Prisma.GetScalarType<T[P], AggregateDBAlbumImg[P]>
}




export type DBAlbumImgGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBAlbumImgWhereInput
  orderBy?: Prisma.DBAlbumImgOrderByWithAggregationInput | Prisma.DBAlbumImgOrderByWithAggregationInput[]
  by: Prisma.DBAlbumImgScalarFieldEnum[] | Prisma.DBAlbumImgScalarFieldEnum
  having?: Prisma.DBAlbumImgScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBAlbumImgCountAggregateInputType | true
  _avg?: DBAlbumImgAvgAggregateInputType
  _sum?: DBAlbumImgSumAggregateInputType
  _min?: DBAlbumImgMinAggregateInputType
  _max?: DBAlbumImgMaxAggregateInputType
}

export type DBAlbumImgGroupByOutputType = {
  id: string
  width: number
  height: number
  url: string
  albumId: string | null
  _count: DBAlbumImgCountAggregateOutputType | null
  _avg: DBAlbumImgAvgAggregateOutputType | null
  _sum: DBAlbumImgSumAggregateOutputType | null
  _min: DBAlbumImgMinAggregateOutputType | null
  _max: DBAlbumImgMaxAggregateOutputType | null
}

type GetDBAlbumImgGroupByPayload<T extends DBAlbumImgGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBAlbumImgGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBAlbumImgGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBAlbumImgGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBAlbumImgGroupByOutputType[P]>
      }
    >
  >



export type DBAlbumImgWhereInput = {
  AND?: Prisma.DBAlbumImgWhereInput | Prisma.DBAlbumImgWhereInput[]
  OR?: Prisma.DBAlbumImgWhereInput[]
  NOT?: Prisma.DBAlbumImgWhereInput | Prisma.DBAlbumImgWhereInput[]
  id?: Prisma.StringFilter<"DBAlbumImg"> | string
  width?: Prisma.IntFilter<"DBAlbumImg"> | number
  height?: Prisma.IntFilter<"DBAlbumImg"> | number
  url?: Prisma.StringFilter<"DBAlbumImg"> | string
  albumId?: Prisma.StringNullableFilter<"DBAlbumImg"> | string | null
  album?: Prisma.XOR<Prisma.DBAlbumNullableScalarRelationFilter, Prisma.DBAlbumWhereInput> | null
  tracks?: Prisma.DBTrackListRelationFilter
}

export type DBAlbumImgOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  url?: Prisma.SortOrder
  albumId?: Prisma.SortOrderInput | Prisma.SortOrder
  album?: Prisma.DBAlbumOrderByWithRelationInput
  tracks?: Prisma.DBTrackOrderByRelationAggregateInput
}

export type DBAlbumImgWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  url?: string
  AND?: Prisma.DBAlbumImgWhereInput | Prisma.DBAlbumImgWhereInput[]
  OR?: Prisma.DBAlbumImgWhereInput[]
  NOT?: Prisma.DBAlbumImgWhereInput | Prisma.DBAlbumImgWhereInput[]
  width?: Prisma.IntFilter<"DBAlbumImg"> | number
  height?: Prisma.IntFilter<"DBAlbumImg"> | number
  albumId?: Prisma.StringNullableFilter<"DBAlbumImg"> | string | null
  album?: Prisma.XOR<Prisma.DBAlbumNullableScalarRelationFilter, Prisma.DBAlbumWhereInput> | null
  tracks?: Prisma.DBTrackListRelationFilter
}, "id" | "url">

export type DBAlbumImgOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  url?: Prisma.SortOrder
  albumId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.DBAlbumImgCountOrderByAggregateInput
  _avg?: Prisma.DBAlbumImgAvgOrderByAggregateInput
  _max?: Prisma.DBAlbumImgMaxOrderByAggregateInput
  _min?: Prisma.DBAlbumImgMinOrderByAggregateInput
  _sum?: Prisma.DBAlbumImgSumOrderByAggregateInput
}

export type DBAlbumImgScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBAlbumImgScalarWhereWithAggregatesInput | Prisma.DBAlbumImgScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBAlbumImgScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBAlbumImgScalarWhereWithAggregatesInput | Prisma.DBAlbumImgScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DBAlbumImg"> | string
  width?: Prisma.IntWithAggregatesFilter<"DBAlbumImg"> | number
  height?: Prisma.IntWithAggregatesFilter<"DBAlbumImg"> | number
  url?: Prisma.StringWithAggregatesFilter<"DBAlbumImg"> | string
  albumId?: Prisma.StringNullableWithAggregatesFilter<"DBAlbumImg"> | string | null
}

export type DBAlbumImgCreateInput = {
  id?: string
  width: number
  height: number
  url: string
  album?: Prisma.DBAlbumCreateNestedOneWithoutImagesInput
  tracks?: Prisma.DBTrackCreateNestedManyWithoutImagesInput
}

export type DBAlbumImgUncheckedCreateInput = {
  id?: string
  width: number
  height: number
  url: string
  albumId?: string | null
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutImagesInput
}

export type DBAlbumImgUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  album?: Prisma.DBAlbumUpdateOneWithoutImagesNestedInput
  tracks?: Prisma.DBTrackUpdateManyWithoutImagesNestedInput
}

export type DBAlbumImgUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutImagesNestedInput
}

export type DBAlbumImgCreateManyInput = {
  id?: string
  width: number
  height: number
  url: string
  albumId?: string | null
}

export type DBAlbumImgUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBAlbumImgUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type DBAlbumImgListRelationFilter = {
  every?: Prisma.DBAlbumImgWhereInput
  some?: Prisma.DBAlbumImgWhereInput
  none?: Prisma.DBAlbumImgWhereInput
}

export type DBAlbumImgOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DBAlbumImgCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  url?: Prisma.SortOrder
  albumId?: Prisma.SortOrder
}

export type DBAlbumImgAvgOrderByAggregateInput = {
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
}

export type DBAlbumImgMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  url?: Prisma.SortOrder
  albumId?: Prisma.SortOrder
}

export type DBAlbumImgMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  url?: Prisma.SortOrder
  albumId?: Prisma.SortOrder
}

export type DBAlbumImgSumOrderByAggregateInput = {
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
}

export type DBAlbumImgCreateNestedManyWithoutAlbumInput = {
  create?: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutAlbumInput, Prisma.DBAlbumImgUncheckedCreateWithoutAlbumInput> | Prisma.DBAlbumImgCreateWithoutAlbumInput[] | Prisma.DBAlbumImgUncheckedCreateWithoutAlbumInput[]
  connectOrCreate?: Prisma.DBAlbumImgCreateOrConnectWithoutAlbumInput | Prisma.DBAlbumImgCreateOrConnectWithoutAlbumInput[]
  createMany?: Prisma.DBAlbumImgCreateManyAlbumInputEnvelope
  connect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
}

export type DBAlbumImgUncheckedCreateNestedManyWithoutAlbumInput = {
  create?: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutAlbumInput, Prisma.DBAlbumImgUncheckedCreateWithoutAlbumInput> | Prisma.DBAlbumImgCreateWithoutAlbumInput[] | Prisma.DBAlbumImgUncheckedCreateWithoutAlbumInput[]
  connectOrCreate?: Prisma.DBAlbumImgCreateOrConnectWithoutAlbumInput | Prisma.DBAlbumImgCreateOrConnectWithoutAlbumInput[]
  createMany?: Prisma.DBAlbumImgCreateManyAlbumInputEnvelope
  connect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
}

export type DBAlbumImgUpdateManyWithoutAlbumNestedInput = {
  create?: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutAlbumInput, Prisma.DBAlbumImgUncheckedCreateWithoutAlbumInput> | Prisma.DBAlbumImgCreateWithoutAlbumInput[] | Prisma.DBAlbumImgUncheckedCreateWithoutAlbumInput[]
  connectOrCreate?: Prisma.DBAlbumImgCreateOrConnectWithoutAlbumInput | Prisma.DBAlbumImgCreateOrConnectWithoutAlbumInput[]
  upsert?: Prisma.DBAlbumImgUpsertWithWhereUniqueWithoutAlbumInput | Prisma.DBAlbumImgUpsertWithWhereUniqueWithoutAlbumInput[]
  createMany?: Prisma.DBAlbumImgCreateManyAlbumInputEnvelope
  set?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  disconnect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  delete?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  connect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  update?: Prisma.DBAlbumImgUpdateWithWhereUniqueWithoutAlbumInput | Prisma.DBAlbumImgUpdateWithWhereUniqueWithoutAlbumInput[]
  updateMany?: Prisma.DBAlbumImgUpdateManyWithWhereWithoutAlbumInput | Prisma.DBAlbumImgUpdateManyWithWhereWithoutAlbumInput[]
  deleteMany?: Prisma.DBAlbumImgScalarWhereInput | Prisma.DBAlbumImgScalarWhereInput[]
}

export type DBAlbumImgUncheckedUpdateManyWithoutAlbumNestedInput = {
  create?: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutAlbumInput, Prisma.DBAlbumImgUncheckedCreateWithoutAlbumInput> | Prisma.DBAlbumImgCreateWithoutAlbumInput[] | Prisma.DBAlbumImgUncheckedCreateWithoutAlbumInput[]
  connectOrCreate?: Prisma.DBAlbumImgCreateOrConnectWithoutAlbumInput | Prisma.DBAlbumImgCreateOrConnectWithoutAlbumInput[]
  upsert?: Prisma.DBAlbumImgUpsertWithWhereUniqueWithoutAlbumInput | Prisma.DBAlbumImgUpsertWithWhereUniqueWithoutAlbumInput[]
  createMany?: Prisma.DBAlbumImgCreateManyAlbumInputEnvelope
  set?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  disconnect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  delete?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  connect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  update?: Prisma.DBAlbumImgUpdateWithWhereUniqueWithoutAlbumInput | Prisma.DBAlbumImgUpdateWithWhereUniqueWithoutAlbumInput[]
  updateMany?: Prisma.DBAlbumImgUpdateManyWithWhereWithoutAlbumInput | Prisma.DBAlbumImgUpdateManyWithWhereWithoutAlbumInput[]
  deleteMany?: Prisma.DBAlbumImgScalarWhereInput | Prisma.DBAlbumImgScalarWhereInput[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DBAlbumImgCreateNestedManyWithoutTracksInput = {
  create?: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutTracksInput, Prisma.DBAlbumImgUncheckedCreateWithoutTracksInput> | Prisma.DBAlbumImgCreateWithoutTracksInput[] | Prisma.DBAlbumImgUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBAlbumImgCreateOrConnectWithoutTracksInput | Prisma.DBAlbumImgCreateOrConnectWithoutTracksInput[]
  connect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
}

export type DBAlbumImgUncheckedCreateNestedManyWithoutTracksInput = {
  create?: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutTracksInput, Prisma.DBAlbumImgUncheckedCreateWithoutTracksInput> | Prisma.DBAlbumImgCreateWithoutTracksInput[] | Prisma.DBAlbumImgUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBAlbumImgCreateOrConnectWithoutTracksInput | Prisma.DBAlbumImgCreateOrConnectWithoutTracksInput[]
  connect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
}

export type DBAlbumImgUpdateManyWithoutTracksNestedInput = {
  create?: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutTracksInput, Prisma.DBAlbumImgUncheckedCreateWithoutTracksInput> | Prisma.DBAlbumImgCreateWithoutTracksInput[] | Prisma.DBAlbumImgUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBAlbumImgCreateOrConnectWithoutTracksInput | Prisma.DBAlbumImgCreateOrConnectWithoutTracksInput[]
  upsert?: Prisma.DBAlbumImgUpsertWithWhereUniqueWithoutTracksInput | Prisma.DBAlbumImgUpsertWithWhereUniqueWithoutTracksInput[]
  set?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  disconnect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  delete?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  connect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  update?: Prisma.DBAlbumImgUpdateWithWhereUniqueWithoutTracksInput | Prisma.DBAlbumImgUpdateWithWhereUniqueWithoutTracksInput[]
  updateMany?: Prisma.DBAlbumImgUpdateManyWithWhereWithoutTracksInput | Prisma.DBAlbumImgUpdateManyWithWhereWithoutTracksInput[]
  deleteMany?: Prisma.DBAlbumImgScalarWhereInput | Prisma.DBAlbumImgScalarWhereInput[]
}

export type DBAlbumImgUncheckedUpdateManyWithoutTracksNestedInput = {
  create?: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutTracksInput, Prisma.DBAlbumImgUncheckedCreateWithoutTracksInput> | Prisma.DBAlbumImgCreateWithoutTracksInput[] | Prisma.DBAlbumImgUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBAlbumImgCreateOrConnectWithoutTracksInput | Prisma.DBAlbumImgCreateOrConnectWithoutTracksInput[]
  upsert?: Prisma.DBAlbumImgUpsertWithWhereUniqueWithoutTracksInput | Prisma.DBAlbumImgUpsertWithWhereUniqueWithoutTracksInput[]
  set?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  disconnect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  delete?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  connect?: Prisma.DBAlbumImgWhereUniqueInput | Prisma.DBAlbumImgWhereUniqueInput[]
  update?: Prisma.DBAlbumImgUpdateWithWhereUniqueWithoutTracksInput | Prisma.DBAlbumImgUpdateWithWhereUniqueWithoutTracksInput[]
  updateMany?: Prisma.DBAlbumImgUpdateManyWithWhereWithoutTracksInput | Prisma.DBAlbumImgUpdateManyWithWhereWithoutTracksInput[]
  deleteMany?: Prisma.DBAlbumImgScalarWhereInput | Prisma.DBAlbumImgScalarWhereInput[]
}

export type DBAlbumImgCreateWithoutAlbumInput = {
  id?: string
  width: number
  height: number
  url: string
  tracks?: Prisma.DBTrackCreateNestedManyWithoutImagesInput
}

export type DBAlbumImgUncheckedCreateWithoutAlbumInput = {
  id?: string
  width: number
  height: number
  url: string
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutImagesInput
}

export type DBAlbumImgCreateOrConnectWithoutAlbumInput = {
  where: Prisma.DBAlbumImgWhereUniqueInput
  create: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutAlbumInput, Prisma.DBAlbumImgUncheckedCreateWithoutAlbumInput>
}

export type DBAlbumImgCreateManyAlbumInputEnvelope = {
  data: Prisma.DBAlbumImgCreateManyAlbumInput | Prisma.DBAlbumImgCreateManyAlbumInput[]
}

export type DBAlbumImgUpsertWithWhereUniqueWithoutAlbumInput = {
  where: Prisma.DBAlbumImgWhereUniqueInput
  update: Prisma.XOR<Prisma.DBAlbumImgUpdateWithoutAlbumInput, Prisma.DBAlbumImgUncheckedUpdateWithoutAlbumInput>
  create: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutAlbumInput, Prisma.DBAlbumImgUncheckedCreateWithoutAlbumInput>
}

export type DBAlbumImgUpdateWithWhereUniqueWithoutAlbumInput = {
  where: Prisma.DBAlbumImgWhereUniqueInput
  data: Prisma.XOR<Prisma.DBAlbumImgUpdateWithoutAlbumInput, Prisma.DBAlbumImgUncheckedUpdateWithoutAlbumInput>
}

export type DBAlbumImgUpdateManyWithWhereWithoutAlbumInput = {
  where: Prisma.DBAlbumImgScalarWhereInput
  data: Prisma.XOR<Prisma.DBAlbumImgUpdateManyMutationInput, Prisma.DBAlbumImgUncheckedUpdateManyWithoutAlbumInput>
}

export type DBAlbumImgScalarWhereInput = {
  AND?: Prisma.DBAlbumImgScalarWhereInput | Prisma.DBAlbumImgScalarWhereInput[]
  OR?: Prisma.DBAlbumImgScalarWhereInput[]
  NOT?: Prisma.DBAlbumImgScalarWhereInput | Prisma.DBAlbumImgScalarWhereInput[]
  id?: Prisma.StringFilter<"DBAlbumImg"> | string
  width?: Prisma.IntFilter<"DBAlbumImg"> | number
  height?: Prisma.IntFilter<"DBAlbumImg"> | number
  url?: Prisma.StringFilter<"DBAlbumImg"> | string
  albumId?: Prisma.StringNullableFilter<"DBAlbumImg"> | string | null
}

export type DBAlbumImgCreateWithoutTracksInput = {
  id?: string
  width: number
  height: number
  url: string
  album?: Prisma.DBAlbumCreateNestedOneWithoutImagesInput
}

export type DBAlbumImgUncheckedCreateWithoutTracksInput = {
  id?: string
  width: number
  height: number
  url: string
  albumId?: string | null
}

export type DBAlbumImgCreateOrConnectWithoutTracksInput = {
  where: Prisma.DBAlbumImgWhereUniqueInput
  create: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutTracksInput, Prisma.DBAlbumImgUncheckedCreateWithoutTracksInput>
}

export type DBAlbumImgUpsertWithWhereUniqueWithoutTracksInput = {
  where: Prisma.DBAlbumImgWhereUniqueInput
  update: Prisma.XOR<Prisma.DBAlbumImgUpdateWithoutTracksInput, Prisma.DBAlbumImgUncheckedUpdateWithoutTracksInput>
  create: Prisma.XOR<Prisma.DBAlbumImgCreateWithoutTracksInput, Prisma.DBAlbumImgUncheckedCreateWithoutTracksInput>
}

export type DBAlbumImgUpdateWithWhereUniqueWithoutTracksInput = {
  where: Prisma.DBAlbumImgWhereUniqueInput
  data: Prisma.XOR<Prisma.DBAlbumImgUpdateWithoutTracksInput, Prisma.DBAlbumImgUncheckedUpdateWithoutTracksInput>
}

export type DBAlbumImgUpdateManyWithWhereWithoutTracksInput = {
  where: Prisma.DBAlbumImgScalarWhereInput
  data: Prisma.XOR<Prisma.DBAlbumImgUpdateManyMutationInput, Prisma.DBAlbumImgUncheckedUpdateManyWithoutTracksInput>
}

export type DBAlbumImgCreateManyAlbumInput = {
  id?: string
  width: number
  height: number
  url: string
}

export type DBAlbumImgUpdateWithoutAlbumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  tracks?: Prisma.DBTrackUpdateManyWithoutImagesNestedInput
}

export type DBAlbumImgUncheckedUpdateWithoutAlbumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutImagesNestedInput
}

export type DBAlbumImgUncheckedUpdateManyWithoutAlbumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBAlbumImgUpdateWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  album?: Prisma.DBAlbumUpdateOneWithoutImagesNestedInput
}

export type DBAlbumImgUncheckedUpdateWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type DBAlbumImgUncheckedUpdateManyWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type DBAlbumImgCountOutputType
 */

export type DBAlbumImgCountOutputType = {
  tracks: number
}

export type DBAlbumImgCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tracks?: boolean | DBAlbumImgCountOutputTypeCountTracksArgs
}

/**
 * DBAlbumImgCountOutputType without action
 */
export type DBAlbumImgCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImgCountOutputType
   */
  select?: Prisma.DBAlbumImgCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DBAlbumImgCountOutputType without action
 */
export type DBAlbumImgCountOutputTypeCountTracksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBTrackWhereInput
}


export type DBAlbumImgSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  width?: boolean
  height?: boolean
  url?: boolean
  albumId?: boolean
  album?: boolean | Prisma.DBAlbumImg$albumArgs<ExtArgs>
  tracks?: boolean | Prisma.DBAlbumImg$tracksArgs<ExtArgs>
  _count?: boolean | Prisma.DBAlbumImgCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBAlbumImg"]>

export type DBAlbumImgSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  width?: boolean
  height?: boolean
  url?: boolean
  albumId?: boolean
  album?: boolean | Prisma.DBAlbumImg$albumArgs<ExtArgs>
}, ExtArgs["result"]["dBAlbumImg"]>

export type DBAlbumImgSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  width?: boolean
  height?: boolean
  url?: boolean
  albumId?: boolean
  album?: boolean | Prisma.DBAlbumImg$albumArgs<ExtArgs>
}, ExtArgs["result"]["dBAlbumImg"]>

export type DBAlbumImgSelectScalar = {
  id?: boolean
  width?: boolean
  height?: boolean
  url?: boolean
  albumId?: boolean
}

export type DBAlbumImgOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "width" | "height" | "url" | "albumId", ExtArgs["result"]["dBAlbumImg"]>
export type DBAlbumImgInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  album?: boolean | Prisma.DBAlbumImg$albumArgs<ExtArgs>
  tracks?: boolean | Prisma.DBAlbumImg$tracksArgs<ExtArgs>
  _count?: boolean | Prisma.DBAlbumImgCountOutputTypeDefaultArgs<ExtArgs>
}
export type DBAlbumImgIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  album?: boolean | Prisma.DBAlbumImg$albumArgs<ExtArgs>
}
export type DBAlbumImgIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  album?: boolean | Prisma.DBAlbumImg$albumArgs<ExtArgs>
}

export type $DBAlbumImgPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBAlbumImg"
  objects: {
    album: Prisma.$DBAlbumPayload<ExtArgs> | null
    tracks: Prisma.$DBTrackPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    width: number
    height: number
    url: string
    albumId: string | null
  }, ExtArgs["result"]["dBAlbumImg"]>
  composites: {}
}

export type DBAlbumImgGetPayload<S extends boolean | null | undefined | DBAlbumImgDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload, S>

export type DBAlbumImgCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBAlbumImgFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBAlbumImgCountAggregateInputType | true
  }

export interface DBAlbumImgDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBAlbumImg'], meta: { name: 'DBAlbumImg' } }
  /**
   * Find zero or one DBAlbumImg that matches the filter.
   * @param {DBAlbumImgFindUniqueArgs} args - Arguments to find a DBAlbumImg
   * @example
   * // Get one DBAlbumImg
   * const dBAlbumImg = await prisma.dBAlbumImg.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBAlbumImgFindUniqueArgs>(args: Prisma.SelectSubset<T, DBAlbumImgFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBAlbumImgClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBAlbumImg that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBAlbumImgFindUniqueOrThrowArgs} args - Arguments to find a DBAlbumImg
   * @example
   * // Get one DBAlbumImg
   * const dBAlbumImg = await prisma.dBAlbumImg.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBAlbumImgFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBAlbumImgFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBAlbumImgClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBAlbumImg that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumImgFindFirstArgs} args - Arguments to find a DBAlbumImg
   * @example
   * // Get one DBAlbumImg
   * const dBAlbumImg = await prisma.dBAlbumImg.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBAlbumImgFindFirstArgs>(args?: Prisma.SelectSubset<T, DBAlbumImgFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBAlbumImgClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBAlbumImg that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumImgFindFirstOrThrowArgs} args - Arguments to find a DBAlbumImg
   * @example
   * // Get one DBAlbumImg
   * const dBAlbumImg = await prisma.dBAlbumImg.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBAlbumImgFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBAlbumImgFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBAlbumImgClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBAlbumImgs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumImgFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBAlbumImgs
   * const dBAlbumImgs = await prisma.dBAlbumImg.findMany()
   * 
   * // Get first 10 DBAlbumImgs
   * const dBAlbumImgs = await prisma.dBAlbumImg.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dBAlbumImgWithIdOnly = await prisma.dBAlbumImg.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DBAlbumImgFindManyArgs>(args?: Prisma.SelectSubset<T, DBAlbumImgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBAlbumImg.
   * @param {DBAlbumImgCreateArgs} args - Arguments to create a DBAlbumImg.
   * @example
   * // Create one DBAlbumImg
   * const DBAlbumImg = await prisma.dBAlbumImg.create({
   *   data: {
   *     // ... data to create a DBAlbumImg
   *   }
   * })
   * 
   */
  create<T extends DBAlbumImgCreateArgs>(args: Prisma.SelectSubset<T, DBAlbumImgCreateArgs<ExtArgs>>): Prisma.Prisma__DBAlbumImgClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBAlbumImgs.
   * @param {DBAlbumImgCreateManyArgs} args - Arguments to create many DBAlbumImgs.
   * @example
   * // Create many DBAlbumImgs
   * const dBAlbumImg = await prisma.dBAlbumImg.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBAlbumImgCreateManyArgs>(args?: Prisma.SelectSubset<T, DBAlbumImgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBAlbumImgs and returns the data saved in the database.
   * @param {DBAlbumImgCreateManyAndReturnArgs} args - Arguments to create many DBAlbumImgs.
   * @example
   * // Create many DBAlbumImgs
   * const dBAlbumImg = await prisma.dBAlbumImg.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBAlbumImgs and only return the `id`
   * const dBAlbumImgWithIdOnly = await prisma.dBAlbumImg.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBAlbumImgCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBAlbumImgCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBAlbumImg.
   * @param {DBAlbumImgDeleteArgs} args - Arguments to delete one DBAlbumImg.
   * @example
   * // Delete one DBAlbumImg
   * const DBAlbumImg = await prisma.dBAlbumImg.delete({
   *   where: {
   *     // ... filter to delete one DBAlbumImg
   *   }
   * })
   * 
   */
  delete<T extends DBAlbumImgDeleteArgs>(args: Prisma.SelectSubset<T, DBAlbumImgDeleteArgs<ExtArgs>>): Prisma.Prisma__DBAlbumImgClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBAlbumImg.
   * @param {DBAlbumImgUpdateArgs} args - Arguments to update one DBAlbumImg.
   * @example
   * // Update one DBAlbumImg
   * const dBAlbumImg = await prisma.dBAlbumImg.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBAlbumImgUpdateArgs>(args: Prisma.SelectSubset<T, DBAlbumImgUpdateArgs<ExtArgs>>): Prisma.Prisma__DBAlbumImgClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBAlbumImgs.
   * @param {DBAlbumImgDeleteManyArgs} args - Arguments to filter DBAlbumImgs to delete.
   * @example
   * // Delete a few DBAlbumImgs
   * const { count } = await prisma.dBAlbumImg.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBAlbumImgDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBAlbumImgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBAlbumImgs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumImgUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBAlbumImgs
   * const dBAlbumImg = await prisma.dBAlbumImg.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBAlbumImgUpdateManyArgs>(args: Prisma.SelectSubset<T, DBAlbumImgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBAlbumImgs and returns the data updated in the database.
   * @param {DBAlbumImgUpdateManyAndReturnArgs} args - Arguments to update many DBAlbumImgs.
   * @example
   * // Update many DBAlbumImgs
   * const dBAlbumImg = await prisma.dBAlbumImg.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBAlbumImgs and only return the `id`
   * const dBAlbumImgWithIdOnly = await prisma.dBAlbumImg.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBAlbumImgUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBAlbumImgUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBAlbumImg.
   * @param {DBAlbumImgUpsertArgs} args - Arguments to update or create a DBAlbumImg.
   * @example
   * // Update or create a DBAlbumImg
   * const dBAlbumImg = await prisma.dBAlbumImg.upsert({
   *   create: {
   *     // ... data to create a DBAlbumImg
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBAlbumImg we want to update
   *   }
   * })
   */
  upsert<T extends DBAlbumImgUpsertArgs>(args: Prisma.SelectSubset<T, DBAlbumImgUpsertArgs<ExtArgs>>): Prisma.Prisma__DBAlbumImgClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBAlbumImgs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumImgCountArgs} args - Arguments to filter DBAlbumImgs to count.
   * @example
   * // Count the number of DBAlbumImgs
   * const count = await prisma.dBAlbumImg.count({
   *   where: {
   *     // ... the filter for the DBAlbumImgs we want to count
   *   }
   * })
  **/
  count<T extends DBAlbumImgCountArgs>(
    args?: Prisma.Subset<T, DBAlbumImgCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBAlbumImgCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBAlbumImg.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumImgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBAlbumImgAggregateArgs>(args: Prisma.Subset<T, DBAlbumImgAggregateArgs>): Prisma.PrismaPromise<GetDBAlbumImgAggregateType<T>>

  /**
   * Group by DBAlbumImg.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumImgGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBAlbumImgGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBAlbumImgGroupByArgs['orderBy'] }
      : { orderBy?: DBAlbumImgGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBAlbumImgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBAlbumImgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBAlbumImg model
 */
readonly fields: DBAlbumImgFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBAlbumImg.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBAlbumImgClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  album<T extends Prisma.DBAlbumImg$albumArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBAlbumImg$albumArgs<ExtArgs>>): Prisma.Prisma__DBAlbumClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  tracks<T extends Prisma.DBAlbumImg$tracksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBAlbumImg$tracksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBAlbumImg model
 */
export interface DBAlbumImgFieldRefs {
  readonly id: Prisma.FieldRef<"DBAlbumImg", 'String'>
  readonly width: Prisma.FieldRef<"DBAlbumImg", 'Int'>
  readonly height: Prisma.FieldRef<"DBAlbumImg", 'Int'>
  readonly url: Prisma.FieldRef<"DBAlbumImg", 'String'>
  readonly albumId: Prisma.FieldRef<"DBAlbumImg", 'String'>
}
    

// Custom InputTypes
/**
 * DBAlbumImg findUnique
 */
export type DBAlbumImgFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  /**
   * Filter, which DBAlbumImg to fetch.
   */
  where: Prisma.DBAlbumImgWhereUniqueInput
}

/**
 * DBAlbumImg findUniqueOrThrow
 */
export type DBAlbumImgFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  /**
   * Filter, which DBAlbumImg to fetch.
   */
  where: Prisma.DBAlbumImgWhereUniqueInput
}

/**
 * DBAlbumImg findFirst
 */
export type DBAlbumImgFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  /**
   * Filter, which DBAlbumImg to fetch.
   */
  where?: Prisma.DBAlbumImgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAlbumImgs to fetch.
   */
  orderBy?: Prisma.DBAlbumImgOrderByWithRelationInput | Prisma.DBAlbumImgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBAlbumImgs.
   */
  cursor?: Prisma.DBAlbumImgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAlbumImgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAlbumImgs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBAlbumImgs.
   */
  distinct?: Prisma.DBAlbumImgScalarFieldEnum | Prisma.DBAlbumImgScalarFieldEnum[]
}

/**
 * DBAlbumImg findFirstOrThrow
 */
export type DBAlbumImgFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  /**
   * Filter, which DBAlbumImg to fetch.
   */
  where?: Prisma.DBAlbumImgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAlbumImgs to fetch.
   */
  orderBy?: Prisma.DBAlbumImgOrderByWithRelationInput | Prisma.DBAlbumImgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBAlbumImgs.
   */
  cursor?: Prisma.DBAlbumImgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAlbumImgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAlbumImgs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBAlbumImgs.
   */
  distinct?: Prisma.DBAlbumImgScalarFieldEnum | Prisma.DBAlbumImgScalarFieldEnum[]
}

/**
 * DBAlbumImg findMany
 */
export type DBAlbumImgFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  /**
   * Filter, which DBAlbumImgs to fetch.
   */
  where?: Prisma.DBAlbumImgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAlbumImgs to fetch.
   */
  orderBy?: Prisma.DBAlbumImgOrderByWithRelationInput | Prisma.DBAlbumImgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBAlbumImgs.
   */
  cursor?: Prisma.DBAlbumImgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAlbumImgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAlbumImgs.
   */
  skip?: number
  distinct?: Prisma.DBAlbumImgScalarFieldEnum | Prisma.DBAlbumImgScalarFieldEnum[]
}

/**
 * DBAlbumImg create
 */
export type DBAlbumImgCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  /**
   * The data needed to create a DBAlbumImg.
   */
  data: Prisma.XOR<Prisma.DBAlbumImgCreateInput, Prisma.DBAlbumImgUncheckedCreateInput>
}

/**
 * DBAlbumImg createMany
 */
export type DBAlbumImgCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBAlbumImgs.
   */
  data: Prisma.DBAlbumImgCreateManyInput | Prisma.DBAlbumImgCreateManyInput[]
}

/**
 * DBAlbumImg createManyAndReturn
 */
export type DBAlbumImgCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * The data used to create many DBAlbumImgs.
   */
  data: Prisma.DBAlbumImgCreateManyInput | Prisma.DBAlbumImgCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DBAlbumImg update
 */
export type DBAlbumImgUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  /**
   * The data needed to update a DBAlbumImg.
   */
  data: Prisma.XOR<Prisma.DBAlbumImgUpdateInput, Prisma.DBAlbumImgUncheckedUpdateInput>
  /**
   * Choose, which DBAlbumImg to update.
   */
  where: Prisma.DBAlbumImgWhereUniqueInput
}

/**
 * DBAlbumImg updateMany
 */
export type DBAlbumImgUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBAlbumImgs.
   */
  data: Prisma.XOR<Prisma.DBAlbumImgUpdateManyMutationInput, Prisma.DBAlbumImgUncheckedUpdateManyInput>
  /**
   * Filter which DBAlbumImgs to update
   */
  where?: Prisma.DBAlbumImgWhereInput
  /**
   * Limit how many DBAlbumImgs to update.
   */
  limit?: number
}

/**
 * DBAlbumImg updateManyAndReturn
 */
export type DBAlbumImgUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * The data used to update DBAlbumImgs.
   */
  data: Prisma.XOR<Prisma.DBAlbumImgUpdateManyMutationInput, Prisma.DBAlbumImgUncheckedUpdateManyInput>
  /**
   * Filter which DBAlbumImgs to update
   */
  where?: Prisma.DBAlbumImgWhereInput
  /**
   * Limit how many DBAlbumImgs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DBAlbumImg upsert
 */
export type DBAlbumImgUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  /**
   * The filter to search for the DBAlbumImg to update in case it exists.
   */
  where: Prisma.DBAlbumImgWhereUniqueInput
  /**
   * In case the DBAlbumImg found by the `where` argument doesn't exist, create a new DBAlbumImg with this data.
   */
  create: Prisma.XOR<Prisma.DBAlbumImgCreateInput, Prisma.DBAlbumImgUncheckedCreateInput>
  /**
   * In case the DBAlbumImg was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBAlbumImgUpdateInput, Prisma.DBAlbumImgUncheckedUpdateInput>
}

/**
 * DBAlbumImg delete
 */
export type DBAlbumImgDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  /**
   * Filter which DBAlbumImg to delete.
   */
  where: Prisma.DBAlbumImgWhereUniqueInput
}

/**
 * DBAlbumImg deleteMany
 */
export type DBAlbumImgDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBAlbumImgs to delete
   */
  where?: Prisma.DBAlbumImgWhereInput
  /**
   * Limit how many DBAlbumImgs to delete.
   */
  limit?: number
}

/**
 * DBAlbumImg.album
 */
export type DBAlbumImg$albumArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  where?: Prisma.DBAlbumWhereInput
}

/**
 * DBAlbumImg.tracks
 */
export type DBAlbumImg$tracksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  where?: Prisma.DBTrackWhereInput
  orderBy?: Prisma.DBTrackOrderByWithRelationInput | Prisma.DBTrackOrderByWithRelationInput[]
  cursor?: Prisma.DBTrackWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBTrackScalarFieldEnum | Prisma.DBTrackScalarFieldEnum[]
}

/**
 * DBAlbumImg without action
 */
export type DBAlbumImgDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
}
