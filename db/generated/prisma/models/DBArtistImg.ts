
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBArtistImg` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBArtistImg
 * *
 *  * Images
 */
export type DBArtistImgModel = runtime.Types.Result.DefaultSelection<Prisma.$DBArtistImgPayload>

export type AggregateDBArtistImg = {
  _count: DBArtistImgCountAggregateOutputType | null
  _avg: DBArtistImgAvgAggregateOutputType | null
  _sum: DBArtistImgSumAggregateOutputType | null
  _min: DBArtistImgMinAggregateOutputType | null
  _max: DBArtistImgMaxAggregateOutputType | null
}

export type DBArtistImgAvgAggregateOutputType = {
  width: number | null
  height: number | null
}

export type DBArtistImgSumAggregateOutputType = {
  width: number | null
  height: number | null
}

export type DBArtistImgMinAggregateOutputType = {
  id: string | null
  width: number | null
  height: number | null
  url: string | null
  artistId: string | null
}

export type DBArtistImgMaxAggregateOutputType = {
  id: string | null
  width: number | null
  height: number | null
  url: string | null
  artistId: string | null
}

export type DBArtistImgCountAggregateOutputType = {
  id: number
  width: number
  height: number
  url: number
  artistId: number
  _all: number
}


export type DBArtistImgAvgAggregateInputType = {
  width?: true
  height?: true
}

export type DBArtistImgSumAggregateInputType = {
  width?: true
  height?: true
}

export type DBArtistImgMinAggregateInputType = {
  id?: true
  width?: true
  height?: true
  url?: true
  artistId?: true
}

export type DBArtistImgMaxAggregateInputType = {
  id?: true
  width?: true
  height?: true
  url?: true
  artistId?: true
}

export type DBArtistImgCountAggregateInputType = {
  id?: true
  width?: true
  height?: true
  url?: true
  artistId?: true
  _all?: true
}

export type DBArtistImgAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBArtistImg to aggregate.
   */
  where?: Prisma.DBArtistImgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBArtistImgs to fetch.
   */
  orderBy?: Prisma.DBArtistImgOrderByWithRelationInput | Prisma.DBArtistImgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBArtistImgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBArtistImgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBArtistImgs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBArtistImgs
  **/
  _count?: true | DBArtistImgCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DBArtistImgAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DBArtistImgSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBArtistImgMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBArtistImgMaxAggregateInputType
}

export type GetDBArtistImgAggregateType<T extends DBArtistImgAggregateArgs> = {
      [P in keyof T & keyof AggregateDBArtistImg]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBArtistImg[P]>
    : Prisma.GetScalarType<T[P], AggregateDBArtistImg[P]>
}




export type DBArtistImgGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBArtistImgWhereInput
  orderBy?: Prisma.DBArtistImgOrderByWithAggregationInput | Prisma.DBArtistImgOrderByWithAggregationInput[]
  by: Prisma.DBArtistImgScalarFieldEnum[] | Prisma.DBArtistImgScalarFieldEnum
  having?: Prisma.DBArtistImgScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBArtistImgCountAggregateInputType | true
  _avg?: DBArtistImgAvgAggregateInputType
  _sum?: DBArtistImgSumAggregateInputType
  _min?: DBArtistImgMinAggregateInputType
  _max?: DBArtistImgMaxAggregateInputType
}

export type DBArtistImgGroupByOutputType = {
  id: string
  width: number
  height: number
  url: string
  artistId: string
  _count: DBArtistImgCountAggregateOutputType | null
  _avg: DBArtistImgAvgAggregateOutputType | null
  _sum: DBArtistImgSumAggregateOutputType | null
  _min: DBArtistImgMinAggregateOutputType | null
  _max: DBArtistImgMaxAggregateOutputType | null
}

type GetDBArtistImgGroupByPayload<T extends DBArtistImgGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBArtistImgGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBArtistImgGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBArtistImgGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBArtistImgGroupByOutputType[P]>
      }
    >
  >



export type DBArtistImgWhereInput = {
  AND?: Prisma.DBArtistImgWhereInput | Prisma.DBArtistImgWhereInput[]
  OR?: Prisma.DBArtistImgWhereInput[]
  NOT?: Prisma.DBArtistImgWhereInput | Prisma.DBArtistImgWhereInput[]
  id?: Prisma.StringFilter<"DBArtistImg"> | string
  width?: Prisma.IntFilter<"DBArtistImg"> | number
  height?: Prisma.IntFilter<"DBArtistImg"> | number
  url?: Prisma.StringFilter<"DBArtistImg"> | string
  artistId?: Prisma.StringFilter<"DBArtistImg"> | string
  artist?: Prisma.XOR<Prisma.DBArtistScalarRelationFilter, Prisma.DBArtistWhereInput>
}

export type DBArtistImgOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  url?: Prisma.SortOrder
  artistId?: Prisma.SortOrder
  artist?: Prisma.DBArtistOrderByWithRelationInput
}

export type DBArtistImgWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  url?: string
  AND?: Prisma.DBArtistImgWhereInput | Prisma.DBArtistImgWhereInput[]
  OR?: Prisma.DBArtistImgWhereInput[]
  NOT?: Prisma.DBArtistImgWhereInput | Prisma.DBArtistImgWhereInput[]
  width?: Prisma.IntFilter<"DBArtistImg"> | number
  height?: Prisma.IntFilter<"DBArtistImg"> | number
  artistId?: Prisma.StringFilter<"DBArtistImg"> | string
  artist?: Prisma.XOR<Prisma.DBArtistScalarRelationFilter, Prisma.DBArtistWhereInput>
}, "id" | "url">

export type DBArtistImgOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  url?: Prisma.SortOrder
  artistId?: Prisma.SortOrder
  _count?: Prisma.DBArtistImgCountOrderByAggregateInput
  _avg?: Prisma.DBArtistImgAvgOrderByAggregateInput
  _max?: Prisma.DBArtistImgMaxOrderByAggregateInput
  _min?: Prisma.DBArtistImgMinOrderByAggregateInput
  _sum?: Prisma.DBArtistImgSumOrderByAggregateInput
}

export type DBArtistImgScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBArtistImgScalarWhereWithAggregatesInput | Prisma.DBArtistImgScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBArtistImgScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBArtistImgScalarWhereWithAggregatesInput | Prisma.DBArtistImgScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DBArtistImg"> | string
  width?: Prisma.IntWithAggregatesFilter<"DBArtistImg"> | number
  height?: Prisma.IntWithAggregatesFilter<"DBArtistImg"> | number
  url?: Prisma.StringWithAggregatesFilter<"DBArtistImg"> | string
  artistId?: Prisma.StringWithAggregatesFilter<"DBArtistImg"> | string
}

export type DBArtistImgCreateInput = {
  id?: string
  width: number
  height: number
  url: string
  artist: Prisma.DBArtistCreateNestedOneWithoutImagesInput
}

export type DBArtistImgUncheckedCreateInput = {
  id?: string
  width: number
  height: number
  url: string
  artistId: string
}

export type DBArtistImgUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  artist?: Prisma.DBArtistUpdateOneRequiredWithoutImagesNestedInput
}

export type DBArtistImgUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  artistId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBArtistImgCreateManyInput = {
  id?: string
  width: number
  height: number
  url: string
  artistId: string
}

export type DBArtistImgUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBArtistImgUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  artistId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBArtistImgListRelationFilter = {
  every?: Prisma.DBArtistImgWhereInput
  some?: Prisma.DBArtistImgWhereInput
  none?: Prisma.DBArtistImgWhereInput
}

export type DBArtistImgOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DBArtistImgCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  url?: Prisma.SortOrder
  artistId?: Prisma.SortOrder
}

export type DBArtistImgAvgOrderByAggregateInput = {
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
}

export type DBArtistImgMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  url?: Prisma.SortOrder
  artistId?: Prisma.SortOrder
}

export type DBArtistImgMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  url?: Prisma.SortOrder
  artistId?: Prisma.SortOrder
}

export type DBArtistImgSumOrderByAggregateInput = {
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
}

export type DBArtistImgCreateNestedManyWithoutArtistInput = {
  create?: Prisma.XOR<Prisma.DBArtistImgCreateWithoutArtistInput, Prisma.DBArtistImgUncheckedCreateWithoutArtistInput> | Prisma.DBArtistImgCreateWithoutArtistInput[] | Prisma.DBArtistImgUncheckedCreateWithoutArtistInput[]
  connectOrCreate?: Prisma.DBArtistImgCreateOrConnectWithoutArtistInput | Prisma.DBArtistImgCreateOrConnectWithoutArtistInput[]
  createMany?: Prisma.DBArtistImgCreateManyArtistInputEnvelope
  connect?: Prisma.DBArtistImgWhereUniqueInput | Prisma.DBArtistImgWhereUniqueInput[]
}

export type DBArtistImgUncheckedCreateNestedManyWithoutArtistInput = {
  create?: Prisma.XOR<Prisma.DBArtistImgCreateWithoutArtistInput, Prisma.DBArtistImgUncheckedCreateWithoutArtistInput> | Prisma.DBArtistImgCreateWithoutArtistInput[] | Prisma.DBArtistImgUncheckedCreateWithoutArtistInput[]
  connectOrCreate?: Prisma.DBArtistImgCreateOrConnectWithoutArtistInput | Prisma.DBArtistImgCreateOrConnectWithoutArtistInput[]
  createMany?: Prisma.DBArtistImgCreateManyArtistInputEnvelope
  connect?: Prisma.DBArtistImgWhereUniqueInput | Prisma.DBArtistImgWhereUniqueInput[]
}

export type DBArtistImgUpdateManyWithoutArtistNestedInput = {
  create?: Prisma.XOR<Prisma.DBArtistImgCreateWithoutArtistInput, Prisma.DBArtistImgUncheckedCreateWithoutArtistInput> | Prisma.DBArtistImgCreateWithoutArtistInput[] | Prisma.DBArtistImgUncheckedCreateWithoutArtistInput[]
  connectOrCreate?: Prisma.DBArtistImgCreateOrConnectWithoutArtistInput | Prisma.DBArtistImgCreateOrConnectWithoutArtistInput[]
  upsert?: Prisma.DBArtistImgUpsertWithWhereUniqueWithoutArtistInput | Prisma.DBArtistImgUpsertWithWhereUniqueWithoutArtistInput[]
  createMany?: Prisma.DBArtistImgCreateManyArtistInputEnvelope
  set?: Prisma.DBArtistImgWhereUniqueInput | Prisma.DBArtistImgWhereUniqueInput[]
  disconnect?: Prisma.DBArtistImgWhereUniqueInput | Prisma.DBArtistImgWhereUniqueInput[]
  delete?: Prisma.DBArtistImgWhereUniqueInput | Prisma.DBArtistImgWhereUniqueInput[]
  connect?: Prisma.DBArtistImgWhereUniqueInput | Prisma.DBArtistImgWhereUniqueInput[]
  update?: Prisma.DBArtistImgUpdateWithWhereUniqueWithoutArtistInput | Prisma.DBArtistImgUpdateWithWhereUniqueWithoutArtistInput[]
  updateMany?: Prisma.DBArtistImgUpdateManyWithWhereWithoutArtistInput | Prisma.DBArtistImgUpdateManyWithWhereWithoutArtistInput[]
  deleteMany?: Prisma.DBArtistImgScalarWhereInput | Prisma.DBArtistImgScalarWhereInput[]
}

export type DBArtistImgUncheckedUpdateManyWithoutArtistNestedInput = {
  create?: Prisma.XOR<Prisma.DBArtistImgCreateWithoutArtistInput, Prisma.DBArtistImgUncheckedCreateWithoutArtistInput> | Prisma.DBArtistImgCreateWithoutArtistInput[] | Prisma.DBArtistImgUncheckedCreateWithoutArtistInput[]
  connectOrCreate?: Prisma.DBArtistImgCreateOrConnectWithoutArtistInput | Prisma.DBArtistImgCreateOrConnectWithoutArtistInput[]
  upsert?: Prisma.DBArtistImgUpsertWithWhereUniqueWithoutArtistInput | Prisma.DBArtistImgUpsertWithWhereUniqueWithoutArtistInput[]
  createMany?: Prisma.DBArtistImgCreateManyArtistInputEnvelope
  set?: Prisma.DBArtistImgWhereUniqueInput | Prisma.DBArtistImgWhereUniqueInput[]
  disconnect?: Prisma.DBArtistImgWhereUniqueInput | Prisma.DBArtistImgWhereUniqueInput[]
  delete?: Prisma.DBArtistImgWhereUniqueInput | Prisma.DBArtistImgWhereUniqueInput[]
  connect?: Prisma.DBArtistImgWhereUniqueInput | Prisma.DBArtistImgWhereUniqueInput[]
  update?: Prisma.DBArtistImgUpdateWithWhereUniqueWithoutArtistInput | Prisma.DBArtistImgUpdateWithWhereUniqueWithoutArtistInput[]
  updateMany?: Prisma.DBArtistImgUpdateManyWithWhereWithoutArtistInput | Prisma.DBArtistImgUpdateManyWithWhereWithoutArtistInput[]
  deleteMany?: Prisma.DBArtistImgScalarWhereInput | Prisma.DBArtistImgScalarWhereInput[]
}

export type DBArtistImgCreateWithoutArtistInput = {
  id?: string
  width: number
  height: number
  url: string
}

export type DBArtistImgUncheckedCreateWithoutArtistInput = {
  id?: string
  width: number
  height: number
  url: string
}

export type DBArtistImgCreateOrConnectWithoutArtistInput = {
  where: Prisma.DBArtistImgWhereUniqueInput
  create: Prisma.XOR<Prisma.DBArtistImgCreateWithoutArtistInput, Prisma.DBArtistImgUncheckedCreateWithoutArtistInput>
}

export type DBArtistImgCreateManyArtistInputEnvelope = {
  data: Prisma.DBArtistImgCreateManyArtistInput | Prisma.DBArtistImgCreateManyArtistInput[]
}

export type DBArtistImgUpsertWithWhereUniqueWithoutArtistInput = {
  where: Prisma.DBArtistImgWhereUniqueInput
  update: Prisma.XOR<Prisma.DBArtistImgUpdateWithoutArtistInput, Prisma.DBArtistImgUncheckedUpdateWithoutArtistInput>
  create: Prisma.XOR<Prisma.DBArtistImgCreateWithoutArtistInput, Prisma.DBArtistImgUncheckedCreateWithoutArtistInput>
}

export type DBArtistImgUpdateWithWhereUniqueWithoutArtistInput = {
  where: Prisma.DBArtistImgWhereUniqueInput
  data: Prisma.XOR<Prisma.DBArtistImgUpdateWithoutArtistInput, Prisma.DBArtistImgUncheckedUpdateWithoutArtistInput>
}

export type DBArtistImgUpdateManyWithWhereWithoutArtistInput = {
  where: Prisma.DBArtistImgScalarWhereInput
  data: Prisma.XOR<Prisma.DBArtistImgUpdateManyMutationInput, Prisma.DBArtistImgUncheckedUpdateManyWithoutArtistInput>
}

export type DBArtistImgScalarWhereInput = {
  AND?: Prisma.DBArtistImgScalarWhereInput | Prisma.DBArtistImgScalarWhereInput[]
  OR?: Prisma.DBArtistImgScalarWhereInput[]
  NOT?: Prisma.DBArtistImgScalarWhereInput | Prisma.DBArtistImgScalarWhereInput[]
  id?: Prisma.StringFilter<"DBArtistImg"> | string
  width?: Prisma.IntFilter<"DBArtistImg"> | number
  height?: Prisma.IntFilter<"DBArtistImg"> | number
  url?: Prisma.StringFilter<"DBArtistImg"> | string
  artistId?: Prisma.StringFilter<"DBArtistImg"> | string
}

export type DBArtistImgCreateManyArtistInput = {
  id?: string
  width: number
  height: number
  url: string
}

export type DBArtistImgUpdateWithoutArtistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBArtistImgUncheckedUpdateWithoutArtistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBArtistImgUncheckedUpdateManyWithoutArtistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
}



export type DBArtistImgSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  width?: boolean
  height?: boolean
  url?: boolean
  artistId?: boolean
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBArtistImg"]>

export type DBArtistImgSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  width?: boolean
  height?: boolean
  url?: boolean
  artistId?: boolean
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBArtistImg"]>

export type DBArtistImgSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  width?: boolean
  height?: boolean
  url?: boolean
  artistId?: boolean
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBArtistImg"]>

export type DBArtistImgSelectScalar = {
  id?: boolean
  width?: boolean
  height?: boolean
  url?: boolean
  artistId?: boolean
}

export type DBArtistImgOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "width" | "height" | "url" | "artistId", ExtArgs["result"]["dBArtistImg"]>
export type DBArtistImgInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
}
export type DBArtistImgIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
}
export type DBArtistImgIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
}

export type $DBArtistImgPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBArtistImg"
  objects: {
    artist: Prisma.$DBArtistPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    width: number
    height: number
    url: string
    artistId: string
  }, ExtArgs["result"]["dBArtistImg"]>
  composites: {}
}

export type DBArtistImgGetPayload<S extends boolean | null | undefined | DBArtistImgDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload, S>

export type DBArtistImgCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBArtistImgFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBArtistImgCountAggregateInputType | true
  }

export interface DBArtistImgDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBArtistImg'], meta: { name: 'DBArtistImg' } }
  /**
   * Find zero or one DBArtistImg that matches the filter.
   * @param {DBArtistImgFindUniqueArgs} args - Arguments to find a DBArtistImg
   * @example
   * // Get one DBArtistImg
   * const dBArtistImg = await prisma.dBArtistImg.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBArtistImgFindUniqueArgs>(args: Prisma.SelectSubset<T, DBArtistImgFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBArtistImgClient<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBArtistImg that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBArtistImgFindUniqueOrThrowArgs} args - Arguments to find a DBArtistImg
   * @example
   * // Get one DBArtistImg
   * const dBArtistImg = await prisma.dBArtistImg.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBArtistImgFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBArtistImgFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBArtistImgClient<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBArtistImg that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistImgFindFirstArgs} args - Arguments to find a DBArtistImg
   * @example
   * // Get one DBArtistImg
   * const dBArtistImg = await prisma.dBArtistImg.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBArtistImgFindFirstArgs>(args?: Prisma.SelectSubset<T, DBArtistImgFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBArtistImgClient<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBArtistImg that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistImgFindFirstOrThrowArgs} args - Arguments to find a DBArtistImg
   * @example
   * // Get one DBArtistImg
   * const dBArtistImg = await prisma.dBArtistImg.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBArtistImgFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBArtistImgFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBArtistImgClient<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBArtistImgs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistImgFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBArtistImgs
   * const dBArtistImgs = await prisma.dBArtistImg.findMany()
   * 
   * // Get first 10 DBArtistImgs
   * const dBArtistImgs = await prisma.dBArtistImg.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dBArtistImgWithIdOnly = await prisma.dBArtistImg.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DBArtistImgFindManyArgs>(args?: Prisma.SelectSubset<T, DBArtistImgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBArtistImg.
   * @param {DBArtistImgCreateArgs} args - Arguments to create a DBArtistImg.
   * @example
   * // Create one DBArtistImg
   * const DBArtistImg = await prisma.dBArtistImg.create({
   *   data: {
   *     // ... data to create a DBArtistImg
   *   }
   * })
   * 
   */
  create<T extends DBArtistImgCreateArgs>(args: Prisma.SelectSubset<T, DBArtistImgCreateArgs<ExtArgs>>): Prisma.Prisma__DBArtistImgClient<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBArtistImgs.
   * @param {DBArtistImgCreateManyArgs} args - Arguments to create many DBArtistImgs.
   * @example
   * // Create many DBArtistImgs
   * const dBArtistImg = await prisma.dBArtistImg.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBArtistImgCreateManyArgs>(args?: Prisma.SelectSubset<T, DBArtistImgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBArtistImgs and returns the data saved in the database.
   * @param {DBArtistImgCreateManyAndReturnArgs} args - Arguments to create many DBArtistImgs.
   * @example
   * // Create many DBArtistImgs
   * const dBArtistImg = await prisma.dBArtistImg.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBArtistImgs and only return the `id`
   * const dBArtistImgWithIdOnly = await prisma.dBArtistImg.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBArtistImgCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBArtistImgCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBArtistImg.
   * @param {DBArtistImgDeleteArgs} args - Arguments to delete one DBArtistImg.
   * @example
   * // Delete one DBArtistImg
   * const DBArtistImg = await prisma.dBArtistImg.delete({
   *   where: {
   *     // ... filter to delete one DBArtistImg
   *   }
   * })
   * 
   */
  delete<T extends DBArtistImgDeleteArgs>(args: Prisma.SelectSubset<T, DBArtistImgDeleteArgs<ExtArgs>>): Prisma.Prisma__DBArtistImgClient<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBArtistImg.
   * @param {DBArtistImgUpdateArgs} args - Arguments to update one DBArtistImg.
   * @example
   * // Update one DBArtistImg
   * const dBArtistImg = await prisma.dBArtistImg.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBArtistImgUpdateArgs>(args: Prisma.SelectSubset<T, DBArtistImgUpdateArgs<ExtArgs>>): Prisma.Prisma__DBArtistImgClient<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBArtistImgs.
   * @param {DBArtistImgDeleteManyArgs} args - Arguments to filter DBArtistImgs to delete.
   * @example
   * // Delete a few DBArtistImgs
   * const { count } = await prisma.dBArtistImg.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBArtistImgDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBArtistImgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBArtistImgs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistImgUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBArtistImgs
   * const dBArtistImg = await prisma.dBArtistImg.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBArtistImgUpdateManyArgs>(args: Prisma.SelectSubset<T, DBArtistImgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBArtistImgs and returns the data updated in the database.
   * @param {DBArtistImgUpdateManyAndReturnArgs} args - Arguments to update many DBArtistImgs.
   * @example
   * // Update many DBArtistImgs
   * const dBArtistImg = await prisma.dBArtistImg.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBArtistImgs and only return the `id`
   * const dBArtistImgWithIdOnly = await prisma.dBArtistImg.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBArtistImgUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBArtistImgUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBArtistImg.
   * @param {DBArtistImgUpsertArgs} args - Arguments to update or create a DBArtistImg.
   * @example
   * // Update or create a DBArtistImg
   * const dBArtistImg = await prisma.dBArtistImg.upsert({
   *   create: {
   *     // ... data to create a DBArtistImg
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBArtistImg we want to update
   *   }
   * })
   */
  upsert<T extends DBArtistImgUpsertArgs>(args: Prisma.SelectSubset<T, DBArtistImgUpsertArgs<ExtArgs>>): Prisma.Prisma__DBArtistImgClient<runtime.Types.Result.GetResult<Prisma.$DBArtistImgPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBArtistImgs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistImgCountArgs} args - Arguments to filter DBArtistImgs to count.
   * @example
   * // Count the number of DBArtistImgs
   * const count = await prisma.dBArtistImg.count({
   *   where: {
   *     // ... the filter for the DBArtistImgs we want to count
   *   }
   * })
  **/
  count<T extends DBArtistImgCountArgs>(
    args?: Prisma.Subset<T, DBArtistImgCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBArtistImgCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBArtistImg.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistImgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBArtistImgAggregateArgs>(args: Prisma.Subset<T, DBArtistImgAggregateArgs>): Prisma.PrismaPromise<GetDBArtistImgAggregateType<T>>

  /**
   * Group by DBArtistImg.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBArtistImgGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBArtistImgGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBArtistImgGroupByArgs['orderBy'] }
      : { orderBy?: DBArtistImgGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBArtistImgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBArtistImgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBArtistImg model
 */
readonly fields: DBArtistImgFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBArtistImg.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBArtistImgClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  artist<T extends Prisma.DBArtistDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBArtistDefaultArgs<ExtArgs>>): Prisma.Prisma__DBArtistClient<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBArtistImg model
 */
export interface DBArtistImgFieldRefs {
  readonly id: Prisma.FieldRef<"DBArtistImg", 'String'>
  readonly width: Prisma.FieldRef<"DBArtistImg", 'Int'>
  readonly height: Prisma.FieldRef<"DBArtistImg", 'Int'>
  readonly url: Prisma.FieldRef<"DBArtistImg", 'String'>
  readonly artistId: Prisma.FieldRef<"DBArtistImg", 'String'>
}
    

// Custom InputTypes
/**
 * DBArtistImg findUnique
 */
export type DBArtistImgFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
  /**
   * Filter, which DBArtistImg to fetch.
   */
  where: Prisma.DBArtistImgWhereUniqueInput
}

/**
 * DBArtistImg findUniqueOrThrow
 */
export type DBArtistImgFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
  /**
   * Filter, which DBArtistImg to fetch.
   */
  where: Prisma.DBArtistImgWhereUniqueInput
}

/**
 * DBArtistImg findFirst
 */
export type DBArtistImgFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
  /**
   * Filter, which DBArtistImg to fetch.
   */
  where?: Prisma.DBArtistImgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBArtistImgs to fetch.
   */
  orderBy?: Prisma.DBArtistImgOrderByWithRelationInput | Prisma.DBArtistImgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBArtistImgs.
   */
  cursor?: Prisma.DBArtistImgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBArtistImgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBArtistImgs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBArtistImgs.
   */
  distinct?: Prisma.DBArtistImgScalarFieldEnum | Prisma.DBArtistImgScalarFieldEnum[]
}

/**
 * DBArtistImg findFirstOrThrow
 */
export type DBArtistImgFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
  /**
   * Filter, which DBArtistImg to fetch.
   */
  where?: Prisma.DBArtistImgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBArtistImgs to fetch.
   */
  orderBy?: Prisma.DBArtistImgOrderByWithRelationInput | Prisma.DBArtistImgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBArtistImgs.
   */
  cursor?: Prisma.DBArtistImgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBArtistImgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBArtistImgs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBArtistImgs.
   */
  distinct?: Prisma.DBArtistImgScalarFieldEnum | Prisma.DBArtistImgScalarFieldEnum[]
}

/**
 * DBArtistImg findMany
 */
export type DBArtistImgFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
  /**
   * Filter, which DBArtistImgs to fetch.
   */
  where?: Prisma.DBArtistImgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBArtistImgs to fetch.
   */
  orderBy?: Prisma.DBArtistImgOrderByWithRelationInput | Prisma.DBArtistImgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBArtistImgs.
   */
  cursor?: Prisma.DBArtistImgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBArtistImgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBArtistImgs.
   */
  skip?: number
  distinct?: Prisma.DBArtistImgScalarFieldEnum | Prisma.DBArtistImgScalarFieldEnum[]
}

/**
 * DBArtistImg create
 */
export type DBArtistImgCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
  /**
   * The data needed to create a DBArtistImg.
   */
  data: Prisma.XOR<Prisma.DBArtistImgCreateInput, Prisma.DBArtistImgUncheckedCreateInput>
}

/**
 * DBArtistImg createMany
 */
export type DBArtistImgCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBArtistImgs.
   */
  data: Prisma.DBArtistImgCreateManyInput | Prisma.DBArtistImgCreateManyInput[]
}

/**
 * DBArtistImg createManyAndReturn
 */
export type DBArtistImgCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * The data used to create many DBArtistImgs.
   */
  data: Prisma.DBArtistImgCreateManyInput | Prisma.DBArtistImgCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DBArtistImg update
 */
export type DBArtistImgUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
  /**
   * The data needed to update a DBArtistImg.
   */
  data: Prisma.XOR<Prisma.DBArtistImgUpdateInput, Prisma.DBArtistImgUncheckedUpdateInput>
  /**
   * Choose, which DBArtistImg to update.
   */
  where: Prisma.DBArtistImgWhereUniqueInput
}

/**
 * DBArtistImg updateMany
 */
export type DBArtistImgUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBArtistImgs.
   */
  data: Prisma.XOR<Prisma.DBArtistImgUpdateManyMutationInput, Prisma.DBArtistImgUncheckedUpdateManyInput>
  /**
   * Filter which DBArtistImgs to update
   */
  where?: Prisma.DBArtistImgWhereInput
  /**
   * Limit how many DBArtistImgs to update.
   */
  limit?: number
}

/**
 * DBArtistImg updateManyAndReturn
 */
export type DBArtistImgUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * The data used to update DBArtistImgs.
   */
  data: Prisma.XOR<Prisma.DBArtistImgUpdateManyMutationInput, Prisma.DBArtistImgUncheckedUpdateManyInput>
  /**
   * Filter which DBArtistImgs to update
   */
  where?: Prisma.DBArtistImgWhereInput
  /**
   * Limit how many DBArtistImgs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DBArtistImg upsert
 */
export type DBArtistImgUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
  /**
   * The filter to search for the DBArtistImg to update in case it exists.
   */
  where: Prisma.DBArtistImgWhereUniqueInput
  /**
   * In case the DBArtistImg found by the `where` argument doesn't exist, create a new DBArtistImg with this data.
   */
  create: Prisma.XOR<Prisma.DBArtistImgCreateInput, Prisma.DBArtistImgUncheckedCreateInput>
  /**
   * In case the DBArtistImg was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBArtistImgUpdateInput, Prisma.DBArtistImgUncheckedUpdateInput>
}

/**
 * DBArtistImg delete
 */
export type DBArtistImgDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
  /**
   * Filter which DBArtistImg to delete.
   */
  where: Prisma.DBArtistImgWhereUniqueInput
}

/**
 * DBArtistImg deleteMany
 */
export type DBArtistImgDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBArtistImgs to delete
   */
  where?: Prisma.DBArtistImgWhereInput
  /**
   * Limit how many DBArtistImgs to delete.
   */
  limit?: number
}

/**
 * DBArtistImg without action
 */
export type DBArtistImgDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtistImg
   */
  select?: Prisma.DBArtistImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtistImg
   */
  omit?: Prisma.DBArtistImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistImgInclude<ExtArgs> | null
}
