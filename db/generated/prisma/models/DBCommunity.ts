
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBCommunity` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBCommunity
 * 
 */
export type DBCommunityModel = runtime.Types.Result.DefaultSelection<Prisma.$DBCommunityPayload>

export type AggregateDBCommunity = {
  _count: DBCommunityCountAggregateOutputType | null
  _min: DBCommunityMinAggregateOutputType | null
  _max: DBCommunityMaxAggregateOutputType | null
}

export type DBCommunityMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DBCommunityMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DBCommunityCountAggregateOutputType = {
  id: number
  name: number
  description: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DBCommunityMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type DBCommunityMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type DBCommunityCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DBCommunityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBCommunity to aggregate.
   */
  where?: Prisma.DBCommunityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBCommunities to fetch.
   */
  orderBy?: Prisma.DBCommunityOrderByWithRelationInput | Prisma.DBCommunityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBCommunityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBCommunities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBCommunities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBCommunities
  **/
  _count?: true | DBCommunityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBCommunityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBCommunityMaxAggregateInputType
}

export type GetDBCommunityAggregateType<T extends DBCommunityAggregateArgs> = {
      [P in keyof T & keyof AggregateDBCommunity]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBCommunity[P]>
    : Prisma.GetScalarType<T[P], AggregateDBCommunity[P]>
}




export type DBCommunityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBCommunityWhereInput
  orderBy?: Prisma.DBCommunityOrderByWithAggregationInput | Prisma.DBCommunityOrderByWithAggregationInput[]
  by: Prisma.DBCommunityScalarFieldEnum[] | Prisma.DBCommunityScalarFieldEnum
  having?: Prisma.DBCommunityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBCommunityCountAggregateInputType | true
  _min?: DBCommunityMinAggregateInputType
  _max?: DBCommunityMaxAggregateInputType
}

export type DBCommunityGroupByOutputType = {
  id: string
  name: string
  description: string | null
  createdAt: Date
  updatedAt: Date
  _count: DBCommunityCountAggregateOutputType | null
  _min: DBCommunityMinAggregateOutputType | null
  _max: DBCommunityMaxAggregateOutputType | null
}

type GetDBCommunityGroupByPayload<T extends DBCommunityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBCommunityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBCommunityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBCommunityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBCommunityGroupByOutputType[P]>
      }
    >
  >



export type DBCommunityWhereInput = {
  AND?: Prisma.DBCommunityWhereInput | Prisma.DBCommunityWhereInput[]
  OR?: Prisma.DBCommunityWhereInput[]
  NOT?: Prisma.DBCommunityWhereInput | Prisma.DBCommunityWhereInput[]
  id?: Prisma.StringFilter<"DBCommunity"> | string
  name?: Prisma.StringFilter<"DBCommunity"> | string
  description?: Prisma.StringNullableFilter<"DBCommunity"> | string | null
  createdAt?: Prisma.DateTimeFilter<"DBCommunity"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DBCommunity"> | Date | string
  members?: Prisma.DBCommunityUserListRelationFilter
}

export type DBCommunityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  members?: Prisma.DBCommunityUserOrderByRelationAggregateInput
}

export type DBCommunityWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DBCommunityWhereInput | Prisma.DBCommunityWhereInput[]
  OR?: Prisma.DBCommunityWhereInput[]
  NOT?: Prisma.DBCommunityWhereInput | Prisma.DBCommunityWhereInput[]
  name?: Prisma.StringFilter<"DBCommunity"> | string
  description?: Prisma.StringNullableFilter<"DBCommunity"> | string | null
  createdAt?: Prisma.DateTimeFilter<"DBCommunity"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DBCommunity"> | Date | string
  members?: Prisma.DBCommunityUserListRelationFilter
}, "id">

export type DBCommunityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DBCommunityCountOrderByAggregateInput
  _max?: Prisma.DBCommunityMaxOrderByAggregateInput
  _min?: Prisma.DBCommunityMinOrderByAggregateInput
}

export type DBCommunityScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBCommunityScalarWhereWithAggregatesInput | Prisma.DBCommunityScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBCommunityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBCommunityScalarWhereWithAggregatesInput | Prisma.DBCommunityScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DBCommunity"> | string
  name?: Prisma.StringWithAggregatesFilter<"DBCommunity"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"DBCommunity"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DBCommunity"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DBCommunity"> | Date | string
}

export type DBCommunityCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.DBCommunityUserCreateNestedManyWithoutCommunityInput
}

export type DBCommunityUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.DBCommunityUserUncheckedCreateNestedManyWithoutCommunityInput
}

export type DBCommunityUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.DBCommunityUserUpdateManyWithoutCommunityNestedInput
}

export type DBCommunityUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.DBCommunityUserUncheckedUpdateManyWithoutCommunityNestedInput
}

export type DBCommunityCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DBCommunityUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBCommunityUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBCommunityScalarRelationFilter = {
  is?: Prisma.DBCommunityWhereInput
  isNot?: Prisma.DBCommunityWhereInput
}

export type DBCommunityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DBCommunityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DBCommunityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DBCommunityCreateNestedOneWithoutMembersInput = {
  create?: Prisma.XOR<Prisma.DBCommunityCreateWithoutMembersInput, Prisma.DBCommunityUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.DBCommunityCreateOrConnectWithoutMembersInput
  connect?: Prisma.DBCommunityWhereUniqueInput
}

export type DBCommunityUpdateOneRequiredWithoutMembersNestedInput = {
  create?: Prisma.XOR<Prisma.DBCommunityCreateWithoutMembersInput, Prisma.DBCommunityUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.DBCommunityCreateOrConnectWithoutMembersInput
  upsert?: Prisma.DBCommunityUpsertWithoutMembersInput
  connect?: Prisma.DBCommunityWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DBCommunityUpdateToOneWithWhereWithoutMembersInput, Prisma.DBCommunityUpdateWithoutMembersInput>, Prisma.DBCommunityUncheckedUpdateWithoutMembersInput>
}

export type DBCommunityCreateWithoutMembersInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DBCommunityUncheckedCreateWithoutMembersInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DBCommunityCreateOrConnectWithoutMembersInput = {
  where: Prisma.DBCommunityWhereUniqueInput
  create: Prisma.XOR<Prisma.DBCommunityCreateWithoutMembersInput, Prisma.DBCommunityUncheckedCreateWithoutMembersInput>
}

export type DBCommunityUpsertWithoutMembersInput = {
  update: Prisma.XOR<Prisma.DBCommunityUpdateWithoutMembersInput, Prisma.DBCommunityUncheckedUpdateWithoutMembersInput>
  create: Prisma.XOR<Prisma.DBCommunityCreateWithoutMembersInput, Prisma.DBCommunityUncheckedCreateWithoutMembersInput>
  where?: Prisma.DBCommunityWhereInput
}

export type DBCommunityUpdateToOneWithWhereWithoutMembersInput = {
  where?: Prisma.DBCommunityWhereInput
  data: Prisma.XOR<Prisma.DBCommunityUpdateWithoutMembersInput, Prisma.DBCommunityUncheckedUpdateWithoutMembersInput>
}

export type DBCommunityUpdateWithoutMembersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBCommunityUncheckedUpdateWithoutMembersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type DBCommunityCountOutputType
 */

export type DBCommunityCountOutputType = {
  members: number
}

export type DBCommunityCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  members?: boolean | DBCommunityCountOutputTypeCountMembersArgs
}

/**
 * DBCommunityCountOutputType without action
 */
export type DBCommunityCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityCountOutputType
   */
  select?: Prisma.DBCommunityCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DBCommunityCountOutputType without action
 */
export type DBCommunityCountOutputTypeCountMembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBCommunityUserWhereInput
}


export type DBCommunitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  members?: boolean | Prisma.DBCommunity$membersArgs<ExtArgs>
  _count?: boolean | Prisma.DBCommunityCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBCommunity"]>

export type DBCommunitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["dBCommunity"]>

export type DBCommunitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["dBCommunity"]>

export type DBCommunitySelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DBCommunityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["dBCommunity"]>
export type DBCommunityInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  members?: boolean | Prisma.DBCommunity$membersArgs<ExtArgs>
  _count?: boolean | Prisma.DBCommunityCountOutputTypeDefaultArgs<ExtArgs>
}
export type DBCommunityIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DBCommunityIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DBCommunityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBCommunity"
  objects: {
    members: Prisma.$DBCommunityUserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["dBCommunity"]>
  composites: {}
}

export type DBCommunityGetPayload<S extends boolean | null | undefined | DBCommunityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload, S>

export type DBCommunityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBCommunityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBCommunityCountAggregateInputType | true
  }

export interface DBCommunityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBCommunity'], meta: { name: 'DBCommunity' } }
  /**
   * Find zero or one DBCommunity that matches the filter.
   * @param {DBCommunityFindUniqueArgs} args - Arguments to find a DBCommunity
   * @example
   * // Get one DBCommunity
   * const dBCommunity = await prisma.dBCommunity.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBCommunityFindUniqueArgs>(args: Prisma.SelectSubset<T, DBCommunityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBCommunityClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBCommunity that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBCommunityFindUniqueOrThrowArgs} args - Arguments to find a DBCommunity
   * @example
   * // Get one DBCommunity
   * const dBCommunity = await prisma.dBCommunity.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBCommunityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBCommunityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBCommunityClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBCommunity that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityFindFirstArgs} args - Arguments to find a DBCommunity
   * @example
   * // Get one DBCommunity
   * const dBCommunity = await prisma.dBCommunity.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBCommunityFindFirstArgs>(args?: Prisma.SelectSubset<T, DBCommunityFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBCommunityClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBCommunity that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityFindFirstOrThrowArgs} args - Arguments to find a DBCommunity
   * @example
   * // Get one DBCommunity
   * const dBCommunity = await prisma.dBCommunity.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBCommunityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBCommunityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBCommunityClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBCommunities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBCommunities
   * const dBCommunities = await prisma.dBCommunity.findMany()
   * 
   * // Get first 10 DBCommunities
   * const dBCommunities = await prisma.dBCommunity.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dBCommunityWithIdOnly = await prisma.dBCommunity.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DBCommunityFindManyArgs>(args?: Prisma.SelectSubset<T, DBCommunityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBCommunity.
   * @param {DBCommunityCreateArgs} args - Arguments to create a DBCommunity.
   * @example
   * // Create one DBCommunity
   * const DBCommunity = await prisma.dBCommunity.create({
   *   data: {
   *     // ... data to create a DBCommunity
   *   }
   * })
   * 
   */
  create<T extends DBCommunityCreateArgs>(args: Prisma.SelectSubset<T, DBCommunityCreateArgs<ExtArgs>>): Prisma.Prisma__DBCommunityClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBCommunities.
   * @param {DBCommunityCreateManyArgs} args - Arguments to create many DBCommunities.
   * @example
   * // Create many DBCommunities
   * const dBCommunity = await prisma.dBCommunity.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBCommunityCreateManyArgs>(args?: Prisma.SelectSubset<T, DBCommunityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBCommunities and returns the data saved in the database.
   * @param {DBCommunityCreateManyAndReturnArgs} args - Arguments to create many DBCommunities.
   * @example
   * // Create many DBCommunities
   * const dBCommunity = await prisma.dBCommunity.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBCommunities and only return the `id`
   * const dBCommunityWithIdOnly = await prisma.dBCommunity.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBCommunityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBCommunityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBCommunity.
   * @param {DBCommunityDeleteArgs} args - Arguments to delete one DBCommunity.
   * @example
   * // Delete one DBCommunity
   * const DBCommunity = await prisma.dBCommunity.delete({
   *   where: {
   *     // ... filter to delete one DBCommunity
   *   }
   * })
   * 
   */
  delete<T extends DBCommunityDeleteArgs>(args: Prisma.SelectSubset<T, DBCommunityDeleteArgs<ExtArgs>>): Prisma.Prisma__DBCommunityClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBCommunity.
   * @param {DBCommunityUpdateArgs} args - Arguments to update one DBCommunity.
   * @example
   * // Update one DBCommunity
   * const dBCommunity = await prisma.dBCommunity.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBCommunityUpdateArgs>(args: Prisma.SelectSubset<T, DBCommunityUpdateArgs<ExtArgs>>): Prisma.Prisma__DBCommunityClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBCommunities.
   * @param {DBCommunityDeleteManyArgs} args - Arguments to filter DBCommunities to delete.
   * @example
   * // Delete a few DBCommunities
   * const { count } = await prisma.dBCommunity.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBCommunityDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBCommunityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBCommunities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBCommunities
   * const dBCommunity = await prisma.dBCommunity.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBCommunityUpdateManyArgs>(args: Prisma.SelectSubset<T, DBCommunityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBCommunities and returns the data updated in the database.
   * @param {DBCommunityUpdateManyAndReturnArgs} args - Arguments to update many DBCommunities.
   * @example
   * // Update many DBCommunities
   * const dBCommunity = await prisma.dBCommunity.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBCommunities and only return the `id`
   * const dBCommunityWithIdOnly = await prisma.dBCommunity.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBCommunityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBCommunityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBCommunity.
   * @param {DBCommunityUpsertArgs} args - Arguments to update or create a DBCommunity.
   * @example
   * // Update or create a DBCommunity
   * const dBCommunity = await prisma.dBCommunity.upsert({
   *   create: {
   *     // ... data to create a DBCommunity
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBCommunity we want to update
   *   }
   * })
   */
  upsert<T extends DBCommunityUpsertArgs>(args: Prisma.SelectSubset<T, DBCommunityUpsertArgs<ExtArgs>>): Prisma.Prisma__DBCommunityClient<runtime.Types.Result.GetResult<Prisma.$DBCommunityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBCommunities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityCountArgs} args - Arguments to filter DBCommunities to count.
   * @example
   * // Count the number of DBCommunities
   * const count = await prisma.dBCommunity.count({
   *   where: {
   *     // ... the filter for the DBCommunities we want to count
   *   }
   * })
  **/
  count<T extends DBCommunityCountArgs>(
    args?: Prisma.Subset<T, DBCommunityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBCommunityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBCommunity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBCommunityAggregateArgs>(args: Prisma.Subset<T, DBCommunityAggregateArgs>): Prisma.PrismaPromise<GetDBCommunityAggregateType<T>>

  /**
   * Group by DBCommunity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBCommunityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBCommunityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBCommunityGroupByArgs['orderBy'] }
      : { orderBy?: DBCommunityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBCommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBCommunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBCommunity model
 */
readonly fields: DBCommunityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBCommunity.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBCommunityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  members<T extends Prisma.DBCommunity$membersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBCommunity$membersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBCommunity model
 */
export interface DBCommunityFieldRefs {
  readonly id: Prisma.FieldRef<"DBCommunity", 'String'>
  readonly name: Prisma.FieldRef<"DBCommunity", 'String'>
  readonly description: Prisma.FieldRef<"DBCommunity", 'String'>
  readonly createdAt: Prisma.FieldRef<"DBCommunity", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DBCommunity", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DBCommunity findUnique
 */
export type DBCommunityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityInclude<ExtArgs> | null
  /**
   * Filter, which DBCommunity to fetch.
   */
  where: Prisma.DBCommunityWhereUniqueInput
}

/**
 * DBCommunity findUniqueOrThrow
 */
export type DBCommunityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityInclude<ExtArgs> | null
  /**
   * Filter, which DBCommunity to fetch.
   */
  where: Prisma.DBCommunityWhereUniqueInput
}

/**
 * DBCommunity findFirst
 */
export type DBCommunityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityInclude<ExtArgs> | null
  /**
   * Filter, which DBCommunity to fetch.
   */
  where?: Prisma.DBCommunityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBCommunities to fetch.
   */
  orderBy?: Prisma.DBCommunityOrderByWithRelationInput | Prisma.DBCommunityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBCommunities.
   */
  cursor?: Prisma.DBCommunityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBCommunities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBCommunities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBCommunities.
   */
  distinct?: Prisma.DBCommunityScalarFieldEnum | Prisma.DBCommunityScalarFieldEnum[]
}

/**
 * DBCommunity findFirstOrThrow
 */
export type DBCommunityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityInclude<ExtArgs> | null
  /**
   * Filter, which DBCommunity to fetch.
   */
  where?: Prisma.DBCommunityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBCommunities to fetch.
   */
  orderBy?: Prisma.DBCommunityOrderByWithRelationInput | Prisma.DBCommunityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBCommunities.
   */
  cursor?: Prisma.DBCommunityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBCommunities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBCommunities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBCommunities.
   */
  distinct?: Prisma.DBCommunityScalarFieldEnum | Prisma.DBCommunityScalarFieldEnum[]
}

/**
 * DBCommunity findMany
 */
export type DBCommunityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityInclude<ExtArgs> | null
  /**
   * Filter, which DBCommunities to fetch.
   */
  where?: Prisma.DBCommunityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBCommunities to fetch.
   */
  orderBy?: Prisma.DBCommunityOrderByWithRelationInput | Prisma.DBCommunityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBCommunities.
   */
  cursor?: Prisma.DBCommunityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBCommunities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBCommunities.
   */
  skip?: number
  distinct?: Prisma.DBCommunityScalarFieldEnum | Prisma.DBCommunityScalarFieldEnum[]
}

/**
 * DBCommunity create
 */
export type DBCommunityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityInclude<ExtArgs> | null
  /**
   * The data needed to create a DBCommunity.
   */
  data: Prisma.XOR<Prisma.DBCommunityCreateInput, Prisma.DBCommunityUncheckedCreateInput>
}

/**
 * DBCommunity createMany
 */
export type DBCommunityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBCommunities.
   */
  data: Prisma.DBCommunityCreateManyInput | Prisma.DBCommunityCreateManyInput[]
}

/**
 * DBCommunity createManyAndReturn
 */
export type DBCommunityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * The data used to create many DBCommunities.
   */
  data: Prisma.DBCommunityCreateManyInput | Prisma.DBCommunityCreateManyInput[]
}

/**
 * DBCommunity update
 */
export type DBCommunityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityInclude<ExtArgs> | null
  /**
   * The data needed to update a DBCommunity.
   */
  data: Prisma.XOR<Prisma.DBCommunityUpdateInput, Prisma.DBCommunityUncheckedUpdateInput>
  /**
   * Choose, which DBCommunity to update.
   */
  where: Prisma.DBCommunityWhereUniqueInput
}

/**
 * DBCommunity updateMany
 */
export type DBCommunityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBCommunities.
   */
  data: Prisma.XOR<Prisma.DBCommunityUpdateManyMutationInput, Prisma.DBCommunityUncheckedUpdateManyInput>
  /**
   * Filter which DBCommunities to update
   */
  where?: Prisma.DBCommunityWhereInput
  /**
   * Limit how many DBCommunities to update.
   */
  limit?: number
}

/**
 * DBCommunity updateManyAndReturn
 */
export type DBCommunityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * The data used to update DBCommunities.
   */
  data: Prisma.XOR<Prisma.DBCommunityUpdateManyMutationInput, Prisma.DBCommunityUncheckedUpdateManyInput>
  /**
   * Filter which DBCommunities to update
   */
  where?: Prisma.DBCommunityWhereInput
  /**
   * Limit how many DBCommunities to update.
   */
  limit?: number
}

/**
 * DBCommunity upsert
 */
export type DBCommunityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityInclude<ExtArgs> | null
  /**
   * The filter to search for the DBCommunity to update in case it exists.
   */
  where: Prisma.DBCommunityWhereUniqueInput
  /**
   * In case the DBCommunity found by the `where` argument doesn't exist, create a new DBCommunity with this data.
   */
  create: Prisma.XOR<Prisma.DBCommunityCreateInput, Prisma.DBCommunityUncheckedCreateInput>
  /**
   * In case the DBCommunity was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBCommunityUpdateInput, Prisma.DBCommunityUncheckedUpdateInput>
}

/**
 * DBCommunity delete
 */
export type DBCommunityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityInclude<ExtArgs> | null
  /**
   * Filter which DBCommunity to delete.
   */
  where: Prisma.DBCommunityWhereUniqueInput
}

/**
 * DBCommunity deleteMany
 */
export type DBCommunityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBCommunities to delete
   */
  where?: Prisma.DBCommunityWhereInput
  /**
   * Limit how many DBCommunities to delete.
   */
  limit?: number
}

/**
 * DBCommunity.members
 */
export type DBCommunity$membersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  where?: Prisma.DBCommunityUserWhereInput
  orderBy?: Prisma.DBCommunityUserOrderByWithRelationInput | Prisma.DBCommunityUserOrderByWithRelationInput[]
  cursor?: Prisma.DBCommunityUserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBCommunityUserScalarFieldEnum | Prisma.DBCommunityUserScalarFieldEnum[]
}

/**
 * DBCommunity without action
 */
export type DBCommunityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunity
   */
  select?: Prisma.DBCommunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunity
   */
  omit?: Prisma.DBCommunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityInclude<ExtArgs> | null
}
