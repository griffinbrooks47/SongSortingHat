
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBSorting` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBSorting
 * 
 */
export type DBSortingModel = runtime.Types.Result.DefaultSelection<Prisma.$DBSortingPayload>

export type AggregateDBSorting = {
  _count: DBSortingCountAggregateOutputType | null
  _min: DBSortingMinAggregateOutputType | null
  _max: DBSortingMaxAggregateOutputType | null
}

export type DBSortingMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  isPublic: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  userId: string | null
  artistId: string | null
}

export type DBSortingMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  isPublic: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  userId: string | null
  artistId: string | null
}

export type DBSortingCountAggregateOutputType = {
  id: number
  name: number
  description: number
  config: number
  isPublic: number
  createdAt: number
  updatedAt: number
  published: number
  userId: number
  artistId: number
  _all: number
}


export type DBSortingMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isPublic?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  userId?: true
  artistId?: true
}

export type DBSortingMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isPublic?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  userId?: true
  artistId?: true
}

export type DBSortingCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  config?: true
  isPublic?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  userId?: true
  artistId?: true
  _all?: true
}

export type DBSortingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBSorting to aggregate.
   */
  where?: Prisma.DBSortingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBSortings to fetch.
   */
  orderBy?: Prisma.DBSortingOrderByWithRelationInput | Prisma.DBSortingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBSortingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBSortings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBSortings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBSortings
  **/
  _count?: true | DBSortingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBSortingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBSortingMaxAggregateInputType
}

export type GetDBSortingAggregateType<T extends DBSortingAggregateArgs> = {
      [P in keyof T & keyof AggregateDBSorting]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBSorting[P]>
    : Prisma.GetScalarType<T[P], AggregateDBSorting[P]>
}




export type DBSortingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBSortingWhereInput
  orderBy?: Prisma.DBSortingOrderByWithAggregationInput | Prisma.DBSortingOrderByWithAggregationInput[]
  by: Prisma.DBSortingScalarFieldEnum[] | Prisma.DBSortingScalarFieldEnum
  having?: Prisma.DBSortingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBSortingCountAggregateInputType | true
  _min?: DBSortingMinAggregateInputType
  _max?: DBSortingMaxAggregateInputType
}

export type DBSortingGroupByOutputType = {
  id: string
  name: string
  description: string | null
  config: runtime.JsonValue
  isPublic: boolean
  createdAt: Date
  updatedAt: Date
  published: boolean
  userId: string
  artistId: string
  _count: DBSortingCountAggregateOutputType | null
  _min: DBSortingMinAggregateOutputType | null
  _max: DBSortingMaxAggregateOutputType | null
}

type GetDBSortingGroupByPayload<T extends DBSortingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBSortingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBSortingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBSortingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBSortingGroupByOutputType[P]>
      }
    >
  >



export type DBSortingWhereInput = {
  AND?: Prisma.DBSortingWhereInput | Prisma.DBSortingWhereInput[]
  OR?: Prisma.DBSortingWhereInput[]
  NOT?: Prisma.DBSortingWhereInput | Prisma.DBSortingWhereInput[]
  id?: Prisma.StringFilter<"DBSorting"> | string
  name?: Prisma.StringFilter<"DBSorting"> | string
  description?: Prisma.StringNullableFilter<"DBSorting"> | string | null
  config?: Prisma.JsonFilter<"DBSorting">
  isPublic?: Prisma.BoolFilter<"DBSorting"> | boolean
  createdAt?: Prisma.DateTimeFilter<"DBSorting"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DBSorting"> | Date | string
  published?: Prisma.BoolFilter<"DBSorting"> | boolean
  userId?: Prisma.StringFilter<"DBSorting"> | string
  artistId?: Prisma.StringFilter<"DBSorting"> | string
  user?: Prisma.XOR<Prisma.DBUserScalarRelationFilter, Prisma.DBUserWhereInput>
  artist?: Prisma.XOR<Prisma.DBArtistScalarRelationFilter, Prisma.DBArtistWhereInput>
  tracks?: Prisma.DBTrackListRelationFilter
}

export type DBSortingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  config?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  artistId?: Prisma.SortOrder
  user?: Prisma.DBUserOrderByWithRelationInput
  artist?: Prisma.DBArtistOrderByWithRelationInput
  tracks?: Prisma.DBTrackOrderByRelationAggregateInput
}

export type DBSortingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DBSortingWhereInput | Prisma.DBSortingWhereInput[]
  OR?: Prisma.DBSortingWhereInput[]
  NOT?: Prisma.DBSortingWhereInput | Prisma.DBSortingWhereInput[]
  name?: Prisma.StringFilter<"DBSorting"> | string
  description?: Prisma.StringNullableFilter<"DBSorting"> | string | null
  config?: Prisma.JsonFilter<"DBSorting">
  isPublic?: Prisma.BoolFilter<"DBSorting"> | boolean
  createdAt?: Prisma.DateTimeFilter<"DBSorting"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DBSorting"> | Date | string
  published?: Prisma.BoolFilter<"DBSorting"> | boolean
  userId?: Prisma.StringFilter<"DBSorting"> | string
  artistId?: Prisma.StringFilter<"DBSorting"> | string
  user?: Prisma.XOR<Prisma.DBUserScalarRelationFilter, Prisma.DBUserWhereInput>
  artist?: Prisma.XOR<Prisma.DBArtistScalarRelationFilter, Prisma.DBArtistWhereInput>
  tracks?: Prisma.DBTrackListRelationFilter
}, "id">

export type DBSortingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  config?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  artistId?: Prisma.SortOrder
  _count?: Prisma.DBSortingCountOrderByAggregateInput
  _max?: Prisma.DBSortingMaxOrderByAggregateInput
  _min?: Prisma.DBSortingMinOrderByAggregateInput
}

export type DBSortingScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBSortingScalarWhereWithAggregatesInput | Prisma.DBSortingScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBSortingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBSortingScalarWhereWithAggregatesInput | Prisma.DBSortingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DBSorting"> | string
  name?: Prisma.StringWithAggregatesFilter<"DBSorting"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"DBSorting"> | string | null
  config?: Prisma.JsonWithAggregatesFilter<"DBSorting">
  isPublic?: Prisma.BoolWithAggregatesFilter<"DBSorting"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DBSorting"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DBSorting"> | Date | string
  published?: Prisma.BoolWithAggregatesFilter<"DBSorting"> | boolean
  userId?: Prisma.StringWithAggregatesFilter<"DBSorting"> | string
  artistId?: Prisma.StringWithAggregatesFilter<"DBSorting"> | string
}

export type DBSortingCreateInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  user: Prisma.DBUserCreateNestedOneWithoutSortingsInput
  artist: Prisma.DBArtistCreateNestedOneWithoutSortingsInput
  tracks?: Prisma.DBTrackCreateNestedManyWithoutSortingsInput
}

export type DBSortingUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  userId: string
  artistId: string
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutSortingsInput
}

export type DBSortingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.DBUserUpdateOneRequiredWithoutSortingsNestedInput
  artist?: Prisma.DBArtistUpdateOneRequiredWithoutSortingsNestedInput
  tracks?: Prisma.DBTrackUpdateManyWithoutSortingsNestedInput
}

export type DBSortingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  artistId?: Prisma.StringFieldUpdateOperationsInput | string
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutSortingsNestedInput
}

export type DBSortingCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  userId: string
  artistId: string
}

export type DBSortingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type DBSortingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  artistId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBSortingListRelationFilter = {
  every?: Prisma.DBSortingWhereInput
  some?: Prisma.DBSortingWhereInput
  none?: Prisma.DBSortingWhereInput
}

export type DBSortingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DBSortingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  config?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  artistId?: Prisma.SortOrder
}

export type DBSortingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  artistId?: Prisma.SortOrder
}

export type DBSortingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  artistId?: Prisma.SortOrder
}

export type DBSortingCreateNestedManyWithoutArtistInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutArtistInput, Prisma.DBSortingUncheckedCreateWithoutArtistInput> | Prisma.DBSortingCreateWithoutArtistInput[] | Prisma.DBSortingUncheckedCreateWithoutArtistInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutArtistInput | Prisma.DBSortingCreateOrConnectWithoutArtistInput[]
  createMany?: Prisma.DBSortingCreateManyArtistInputEnvelope
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
}

export type DBSortingUncheckedCreateNestedManyWithoutArtistInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutArtistInput, Prisma.DBSortingUncheckedCreateWithoutArtistInput> | Prisma.DBSortingCreateWithoutArtistInput[] | Prisma.DBSortingUncheckedCreateWithoutArtistInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutArtistInput | Prisma.DBSortingCreateOrConnectWithoutArtistInput[]
  createMany?: Prisma.DBSortingCreateManyArtistInputEnvelope
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
}

export type DBSortingUpdateManyWithoutArtistNestedInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutArtistInput, Prisma.DBSortingUncheckedCreateWithoutArtistInput> | Prisma.DBSortingCreateWithoutArtistInput[] | Prisma.DBSortingUncheckedCreateWithoutArtistInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutArtistInput | Prisma.DBSortingCreateOrConnectWithoutArtistInput[]
  upsert?: Prisma.DBSortingUpsertWithWhereUniqueWithoutArtistInput | Prisma.DBSortingUpsertWithWhereUniqueWithoutArtistInput[]
  createMany?: Prisma.DBSortingCreateManyArtistInputEnvelope
  set?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  disconnect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  delete?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  update?: Prisma.DBSortingUpdateWithWhereUniqueWithoutArtistInput | Prisma.DBSortingUpdateWithWhereUniqueWithoutArtistInput[]
  updateMany?: Prisma.DBSortingUpdateManyWithWhereWithoutArtistInput | Prisma.DBSortingUpdateManyWithWhereWithoutArtistInput[]
  deleteMany?: Prisma.DBSortingScalarWhereInput | Prisma.DBSortingScalarWhereInput[]
}

export type DBSortingUncheckedUpdateManyWithoutArtistNestedInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutArtistInput, Prisma.DBSortingUncheckedCreateWithoutArtistInput> | Prisma.DBSortingCreateWithoutArtistInput[] | Prisma.DBSortingUncheckedCreateWithoutArtistInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutArtistInput | Prisma.DBSortingCreateOrConnectWithoutArtistInput[]
  upsert?: Prisma.DBSortingUpsertWithWhereUniqueWithoutArtistInput | Prisma.DBSortingUpsertWithWhereUniqueWithoutArtistInput[]
  createMany?: Prisma.DBSortingCreateManyArtistInputEnvelope
  set?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  disconnect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  delete?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  update?: Prisma.DBSortingUpdateWithWhereUniqueWithoutArtistInput | Prisma.DBSortingUpdateWithWhereUniqueWithoutArtistInput[]
  updateMany?: Prisma.DBSortingUpdateManyWithWhereWithoutArtistInput | Prisma.DBSortingUpdateManyWithWhereWithoutArtistInput[]
  deleteMany?: Prisma.DBSortingScalarWhereInput | Prisma.DBSortingScalarWhereInput[]
}

export type DBSortingCreateNestedManyWithoutTracksInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutTracksInput, Prisma.DBSortingUncheckedCreateWithoutTracksInput> | Prisma.DBSortingCreateWithoutTracksInput[] | Prisma.DBSortingUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutTracksInput | Prisma.DBSortingCreateOrConnectWithoutTracksInput[]
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
}

export type DBSortingUncheckedCreateNestedManyWithoutTracksInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutTracksInput, Prisma.DBSortingUncheckedCreateWithoutTracksInput> | Prisma.DBSortingCreateWithoutTracksInput[] | Prisma.DBSortingUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutTracksInput | Prisma.DBSortingCreateOrConnectWithoutTracksInput[]
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
}

export type DBSortingUpdateManyWithoutTracksNestedInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutTracksInput, Prisma.DBSortingUncheckedCreateWithoutTracksInput> | Prisma.DBSortingCreateWithoutTracksInput[] | Prisma.DBSortingUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutTracksInput | Prisma.DBSortingCreateOrConnectWithoutTracksInput[]
  upsert?: Prisma.DBSortingUpsertWithWhereUniqueWithoutTracksInput | Prisma.DBSortingUpsertWithWhereUniqueWithoutTracksInput[]
  set?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  disconnect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  delete?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  update?: Prisma.DBSortingUpdateWithWhereUniqueWithoutTracksInput | Prisma.DBSortingUpdateWithWhereUniqueWithoutTracksInput[]
  updateMany?: Prisma.DBSortingUpdateManyWithWhereWithoutTracksInput | Prisma.DBSortingUpdateManyWithWhereWithoutTracksInput[]
  deleteMany?: Prisma.DBSortingScalarWhereInput | Prisma.DBSortingScalarWhereInput[]
}

export type DBSortingUncheckedUpdateManyWithoutTracksNestedInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutTracksInput, Prisma.DBSortingUncheckedCreateWithoutTracksInput> | Prisma.DBSortingCreateWithoutTracksInput[] | Prisma.DBSortingUncheckedCreateWithoutTracksInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutTracksInput | Prisma.DBSortingCreateOrConnectWithoutTracksInput[]
  upsert?: Prisma.DBSortingUpsertWithWhereUniqueWithoutTracksInput | Prisma.DBSortingUpsertWithWhereUniqueWithoutTracksInput[]
  set?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  disconnect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  delete?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  update?: Prisma.DBSortingUpdateWithWhereUniqueWithoutTracksInput | Prisma.DBSortingUpdateWithWhereUniqueWithoutTracksInput[]
  updateMany?: Prisma.DBSortingUpdateManyWithWhereWithoutTracksInput | Prisma.DBSortingUpdateManyWithWhereWithoutTracksInput[]
  deleteMany?: Prisma.DBSortingScalarWhereInput | Prisma.DBSortingScalarWhereInput[]
}

export type DBSortingCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutUserInput, Prisma.DBSortingUncheckedCreateWithoutUserInput> | Prisma.DBSortingCreateWithoutUserInput[] | Prisma.DBSortingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutUserInput | Prisma.DBSortingCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DBSortingCreateManyUserInputEnvelope
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
}

export type DBSortingUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutUserInput, Prisma.DBSortingUncheckedCreateWithoutUserInput> | Prisma.DBSortingCreateWithoutUserInput[] | Prisma.DBSortingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutUserInput | Prisma.DBSortingCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DBSortingCreateManyUserInputEnvelope
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
}

export type DBSortingUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutUserInput, Prisma.DBSortingUncheckedCreateWithoutUserInput> | Prisma.DBSortingCreateWithoutUserInput[] | Prisma.DBSortingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutUserInput | Prisma.DBSortingCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DBSortingUpsertWithWhereUniqueWithoutUserInput | Prisma.DBSortingUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DBSortingCreateManyUserInputEnvelope
  set?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  disconnect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  delete?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  update?: Prisma.DBSortingUpdateWithWhereUniqueWithoutUserInput | Prisma.DBSortingUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DBSortingUpdateManyWithWhereWithoutUserInput | Prisma.DBSortingUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DBSortingScalarWhereInput | Prisma.DBSortingScalarWhereInput[]
}

export type DBSortingUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DBSortingCreateWithoutUserInput, Prisma.DBSortingUncheckedCreateWithoutUserInput> | Prisma.DBSortingCreateWithoutUserInput[] | Prisma.DBSortingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBSortingCreateOrConnectWithoutUserInput | Prisma.DBSortingCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DBSortingUpsertWithWhereUniqueWithoutUserInput | Prisma.DBSortingUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DBSortingCreateManyUserInputEnvelope
  set?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  disconnect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  delete?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  connect?: Prisma.DBSortingWhereUniqueInput | Prisma.DBSortingWhereUniqueInput[]
  update?: Prisma.DBSortingUpdateWithWhereUniqueWithoutUserInput | Prisma.DBSortingUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DBSortingUpdateManyWithWhereWithoutUserInput | Prisma.DBSortingUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DBSortingScalarWhereInput | Prisma.DBSortingScalarWhereInput[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type DBSortingCreateWithoutArtistInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  user: Prisma.DBUserCreateNestedOneWithoutSortingsInput
  tracks?: Prisma.DBTrackCreateNestedManyWithoutSortingsInput
}

export type DBSortingUncheckedCreateWithoutArtistInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  userId: string
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutSortingsInput
}

export type DBSortingCreateOrConnectWithoutArtistInput = {
  where: Prisma.DBSortingWhereUniqueInput
  create: Prisma.XOR<Prisma.DBSortingCreateWithoutArtistInput, Prisma.DBSortingUncheckedCreateWithoutArtistInput>
}

export type DBSortingCreateManyArtistInputEnvelope = {
  data: Prisma.DBSortingCreateManyArtistInput | Prisma.DBSortingCreateManyArtistInput[]
}

export type DBSortingUpsertWithWhereUniqueWithoutArtistInput = {
  where: Prisma.DBSortingWhereUniqueInput
  update: Prisma.XOR<Prisma.DBSortingUpdateWithoutArtistInput, Prisma.DBSortingUncheckedUpdateWithoutArtistInput>
  create: Prisma.XOR<Prisma.DBSortingCreateWithoutArtistInput, Prisma.DBSortingUncheckedCreateWithoutArtistInput>
}

export type DBSortingUpdateWithWhereUniqueWithoutArtistInput = {
  where: Prisma.DBSortingWhereUniqueInput
  data: Prisma.XOR<Prisma.DBSortingUpdateWithoutArtistInput, Prisma.DBSortingUncheckedUpdateWithoutArtistInput>
}

export type DBSortingUpdateManyWithWhereWithoutArtistInput = {
  where: Prisma.DBSortingScalarWhereInput
  data: Prisma.XOR<Prisma.DBSortingUpdateManyMutationInput, Prisma.DBSortingUncheckedUpdateManyWithoutArtistInput>
}

export type DBSortingScalarWhereInput = {
  AND?: Prisma.DBSortingScalarWhereInput | Prisma.DBSortingScalarWhereInput[]
  OR?: Prisma.DBSortingScalarWhereInput[]
  NOT?: Prisma.DBSortingScalarWhereInput | Prisma.DBSortingScalarWhereInput[]
  id?: Prisma.StringFilter<"DBSorting"> | string
  name?: Prisma.StringFilter<"DBSorting"> | string
  description?: Prisma.StringNullableFilter<"DBSorting"> | string | null
  config?: Prisma.JsonFilter<"DBSorting">
  isPublic?: Prisma.BoolFilter<"DBSorting"> | boolean
  createdAt?: Prisma.DateTimeFilter<"DBSorting"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DBSorting"> | Date | string
  published?: Prisma.BoolFilter<"DBSorting"> | boolean
  userId?: Prisma.StringFilter<"DBSorting"> | string
  artistId?: Prisma.StringFilter<"DBSorting"> | string
}

export type DBSortingCreateWithoutTracksInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  user: Prisma.DBUserCreateNestedOneWithoutSortingsInput
  artist: Prisma.DBArtistCreateNestedOneWithoutSortingsInput
}

export type DBSortingUncheckedCreateWithoutTracksInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  userId: string
  artistId: string
}

export type DBSortingCreateOrConnectWithoutTracksInput = {
  where: Prisma.DBSortingWhereUniqueInput
  create: Prisma.XOR<Prisma.DBSortingCreateWithoutTracksInput, Prisma.DBSortingUncheckedCreateWithoutTracksInput>
}

export type DBSortingUpsertWithWhereUniqueWithoutTracksInput = {
  where: Prisma.DBSortingWhereUniqueInput
  update: Prisma.XOR<Prisma.DBSortingUpdateWithoutTracksInput, Prisma.DBSortingUncheckedUpdateWithoutTracksInput>
  create: Prisma.XOR<Prisma.DBSortingCreateWithoutTracksInput, Prisma.DBSortingUncheckedCreateWithoutTracksInput>
}

export type DBSortingUpdateWithWhereUniqueWithoutTracksInput = {
  where: Prisma.DBSortingWhereUniqueInput
  data: Prisma.XOR<Prisma.DBSortingUpdateWithoutTracksInput, Prisma.DBSortingUncheckedUpdateWithoutTracksInput>
}

export type DBSortingUpdateManyWithWhereWithoutTracksInput = {
  where: Prisma.DBSortingScalarWhereInput
  data: Prisma.XOR<Prisma.DBSortingUpdateManyMutationInput, Prisma.DBSortingUncheckedUpdateManyWithoutTracksInput>
}

export type DBSortingCreateWithoutUserInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  artist: Prisma.DBArtistCreateNestedOneWithoutSortingsInput
  tracks?: Prisma.DBTrackCreateNestedManyWithoutSortingsInput
}

export type DBSortingUncheckedCreateWithoutUserInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  artistId: string
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutSortingsInput
}

export type DBSortingCreateOrConnectWithoutUserInput = {
  where: Prisma.DBSortingWhereUniqueInput
  create: Prisma.XOR<Prisma.DBSortingCreateWithoutUserInput, Prisma.DBSortingUncheckedCreateWithoutUserInput>
}

export type DBSortingCreateManyUserInputEnvelope = {
  data: Prisma.DBSortingCreateManyUserInput | Prisma.DBSortingCreateManyUserInput[]
}

export type DBSortingUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.DBSortingWhereUniqueInput
  update: Prisma.XOR<Prisma.DBSortingUpdateWithoutUserInput, Prisma.DBSortingUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.DBSortingCreateWithoutUserInput, Prisma.DBSortingUncheckedCreateWithoutUserInput>
}

export type DBSortingUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.DBSortingWhereUniqueInput
  data: Prisma.XOR<Prisma.DBSortingUpdateWithoutUserInput, Prisma.DBSortingUncheckedUpdateWithoutUserInput>
}

export type DBSortingUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.DBSortingScalarWhereInput
  data: Prisma.XOR<Prisma.DBSortingUpdateManyMutationInput, Prisma.DBSortingUncheckedUpdateManyWithoutUserInput>
}

export type DBSortingCreateManyArtistInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  userId: string
}

export type DBSortingUpdateWithoutArtistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.DBUserUpdateOneRequiredWithoutSortingsNestedInput
  tracks?: Prisma.DBTrackUpdateManyWithoutSortingsNestedInput
}

export type DBSortingUncheckedUpdateWithoutArtistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutSortingsNestedInput
}

export type DBSortingUncheckedUpdateManyWithoutArtistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBSortingUpdateWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.DBUserUpdateOneRequiredWithoutSortingsNestedInput
  artist?: Prisma.DBArtistUpdateOneRequiredWithoutSortingsNestedInput
}

export type DBSortingUncheckedUpdateWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  artistId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBSortingUncheckedUpdateManyWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  artistId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBSortingCreateManyUserInput = {
  id?: string
  name: string
  description?: string | null
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  artistId: string
}

export type DBSortingUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  artist?: Prisma.DBArtistUpdateOneRequiredWithoutSortingsNestedInput
  tracks?: Prisma.DBTrackUpdateManyWithoutSortingsNestedInput
}

export type DBSortingUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  artistId?: Prisma.StringFieldUpdateOperationsInput | string
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutSortingsNestedInput
}

export type DBSortingUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  artistId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type DBSortingCountOutputType
 */

export type DBSortingCountOutputType = {
  tracks: number
}

export type DBSortingCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tracks?: boolean | DBSortingCountOutputTypeCountTracksArgs
}

/**
 * DBSortingCountOutputType without action
 */
export type DBSortingCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSortingCountOutputType
   */
  select?: Prisma.DBSortingCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DBSortingCountOutputType without action
 */
export type DBSortingCountOutputTypeCountTracksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBTrackWhereInput
}


export type DBSortingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  config?: boolean
  isPublic?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  userId?: boolean
  artistId?: boolean
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
  tracks?: boolean | Prisma.DBSorting$tracksArgs<ExtArgs>
  _count?: boolean | Prisma.DBSortingCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBSorting"]>

export type DBSortingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  config?: boolean
  isPublic?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  userId?: boolean
  artistId?: boolean
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBSorting"]>

export type DBSortingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  config?: boolean
  isPublic?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  userId?: boolean
  artistId?: boolean
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBSorting"]>

export type DBSortingSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  config?: boolean
  isPublic?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  userId?: boolean
  artistId?: boolean
}

export type DBSortingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "config" | "isPublic" | "createdAt" | "updatedAt" | "published" | "userId" | "artistId", ExtArgs["result"]["dBSorting"]>
export type DBSortingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
  tracks?: boolean | Prisma.DBSorting$tracksArgs<ExtArgs>
  _count?: boolean | Prisma.DBSortingCountOutputTypeDefaultArgs<ExtArgs>
}
export type DBSortingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
}
export type DBSortingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
  artist?: boolean | Prisma.DBArtistDefaultArgs<ExtArgs>
}

export type $DBSortingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBSorting"
  objects: {
    user: Prisma.$DBUserPayload<ExtArgs>
    artist: Prisma.$DBArtistPayload<ExtArgs>
    tracks: Prisma.$DBTrackPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    config: runtime.JsonValue
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    published: boolean
    userId: string
    artistId: string
  }, ExtArgs["result"]["dBSorting"]>
  composites: {}
}

export type DBSortingGetPayload<S extends boolean | null | undefined | DBSortingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBSortingPayload, S>

export type DBSortingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBSortingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBSortingCountAggregateInputType | true
  }

export interface DBSortingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBSorting'], meta: { name: 'DBSorting' } }
  /**
   * Find zero or one DBSorting that matches the filter.
   * @param {DBSortingFindUniqueArgs} args - Arguments to find a DBSorting
   * @example
   * // Get one DBSorting
   * const dBSorting = await prisma.dBSorting.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBSortingFindUniqueArgs>(args: Prisma.SelectSubset<T, DBSortingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBSortingClient<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBSorting that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBSortingFindUniqueOrThrowArgs} args - Arguments to find a DBSorting
   * @example
   * // Get one DBSorting
   * const dBSorting = await prisma.dBSorting.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBSortingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBSortingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBSortingClient<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBSorting that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBSortingFindFirstArgs} args - Arguments to find a DBSorting
   * @example
   * // Get one DBSorting
   * const dBSorting = await prisma.dBSorting.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBSortingFindFirstArgs>(args?: Prisma.SelectSubset<T, DBSortingFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBSortingClient<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBSorting that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBSortingFindFirstOrThrowArgs} args - Arguments to find a DBSorting
   * @example
   * // Get one DBSorting
   * const dBSorting = await prisma.dBSorting.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBSortingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBSortingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBSortingClient<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBSortings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBSortingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBSortings
   * const dBSortings = await prisma.dBSorting.findMany()
   * 
   * // Get first 10 DBSortings
   * const dBSortings = await prisma.dBSorting.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dBSortingWithIdOnly = await prisma.dBSorting.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DBSortingFindManyArgs>(args?: Prisma.SelectSubset<T, DBSortingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBSorting.
   * @param {DBSortingCreateArgs} args - Arguments to create a DBSorting.
   * @example
   * // Create one DBSorting
   * const DBSorting = await prisma.dBSorting.create({
   *   data: {
   *     // ... data to create a DBSorting
   *   }
   * })
   * 
   */
  create<T extends DBSortingCreateArgs>(args: Prisma.SelectSubset<T, DBSortingCreateArgs<ExtArgs>>): Prisma.Prisma__DBSortingClient<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBSortings.
   * @param {DBSortingCreateManyArgs} args - Arguments to create many DBSortings.
   * @example
   * // Create many DBSortings
   * const dBSorting = await prisma.dBSorting.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBSortingCreateManyArgs>(args?: Prisma.SelectSubset<T, DBSortingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBSortings and returns the data saved in the database.
   * @param {DBSortingCreateManyAndReturnArgs} args - Arguments to create many DBSortings.
   * @example
   * // Create many DBSortings
   * const dBSorting = await prisma.dBSorting.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBSortings and only return the `id`
   * const dBSortingWithIdOnly = await prisma.dBSorting.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBSortingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBSortingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBSorting.
   * @param {DBSortingDeleteArgs} args - Arguments to delete one DBSorting.
   * @example
   * // Delete one DBSorting
   * const DBSorting = await prisma.dBSorting.delete({
   *   where: {
   *     // ... filter to delete one DBSorting
   *   }
   * })
   * 
   */
  delete<T extends DBSortingDeleteArgs>(args: Prisma.SelectSubset<T, DBSortingDeleteArgs<ExtArgs>>): Prisma.Prisma__DBSortingClient<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBSorting.
   * @param {DBSortingUpdateArgs} args - Arguments to update one DBSorting.
   * @example
   * // Update one DBSorting
   * const dBSorting = await prisma.dBSorting.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBSortingUpdateArgs>(args: Prisma.SelectSubset<T, DBSortingUpdateArgs<ExtArgs>>): Prisma.Prisma__DBSortingClient<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBSortings.
   * @param {DBSortingDeleteManyArgs} args - Arguments to filter DBSortings to delete.
   * @example
   * // Delete a few DBSortings
   * const { count } = await prisma.dBSorting.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBSortingDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBSortingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBSortings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBSortingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBSortings
   * const dBSorting = await prisma.dBSorting.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBSortingUpdateManyArgs>(args: Prisma.SelectSubset<T, DBSortingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBSortings and returns the data updated in the database.
   * @param {DBSortingUpdateManyAndReturnArgs} args - Arguments to update many DBSortings.
   * @example
   * // Update many DBSortings
   * const dBSorting = await prisma.dBSorting.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBSortings and only return the `id`
   * const dBSortingWithIdOnly = await prisma.dBSorting.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBSortingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBSortingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBSorting.
   * @param {DBSortingUpsertArgs} args - Arguments to update or create a DBSorting.
   * @example
   * // Update or create a DBSorting
   * const dBSorting = await prisma.dBSorting.upsert({
   *   create: {
   *     // ... data to create a DBSorting
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBSorting we want to update
   *   }
   * })
   */
  upsert<T extends DBSortingUpsertArgs>(args: Prisma.SelectSubset<T, DBSortingUpsertArgs<ExtArgs>>): Prisma.Prisma__DBSortingClient<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBSortings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBSortingCountArgs} args - Arguments to filter DBSortings to count.
   * @example
   * // Count the number of DBSortings
   * const count = await prisma.dBSorting.count({
   *   where: {
   *     // ... the filter for the DBSortings we want to count
   *   }
   * })
  **/
  count<T extends DBSortingCountArgs>(
    args?: Prisma.Subset<T, DBSortingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBSortingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBSorting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBSortingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBSortingAggregateArgs>(args: Prisma.Subset<T, DBSortingAggregateArgs>): Prisma.PrismaPromise<GetDBSortingAggregateType<T>>

  /**
   * Group by DBSorting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBSortingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBSortingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBSortingGroupByArgs['orderBy'] }
      : { orderBy?: DBSortingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBSortingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBSortingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBSorting model
 */
readonly fields: DBSortingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBSorting.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBSortingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.DBUserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBUserDefaultArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  artist<T extends Prisma.DBArtistDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBArtistDefaultArgs<ExtArgs>>): Prisma.Prisma__DBArtistClient<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tracks<T extends Prisma.DBSorting$tracksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBSorting$tracksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBSorting model
 */
export interface DBSortingFieldRefs {
  readonly id: Prisma.FieldRef<"DBSorting", 'String'>
  readonly name: Prisma.FieldRef<"DBSorting", 'String'>
  readonly description: Prisma.FieldRef<"DBSorting", 'String'>
  readonly config: Prisma.FieldRef<"DBSorting", 'Json'>
  readonly isPublic: Prisma.FieldRef<"DBSorting", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"DBSorting", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DBSorting", 'DateTime'>
  readonly published: Prisma.FieldRef<"DBSorting", 'Boolean'>
  readonly userId: Prisma.FieldRef<"DBSorting", 'String'>
  readonly artistId: Prisma.FieldRef<"DBSorting", 'String'>
}
    

// Custom InputTypes
/**
 * DBSorting findUnique
 */
export type DBSortingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  /**
   * Filter, which DBSorting to fetch.
   */
  where: Prisma.DBSortingWhereUniqueInput
}

/**
 * DBSorting findUniqueOrThrow
 */
export type DBSortingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  /**
   * Filter, which DBSorting to fetch.
   */
  where: Prisma.DBSortingWhereUniqueInput
}

/**
 * DBSorting findFirst
 */
export type DBSortingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  /**
   * Filter, which DBSorting to fetch.
   */
  where?: Prisma.DBSortingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBSortings to fetch.
   */
  orderBy?: Prisma.DBSortingOrderByWithRelationInput | Prisma.DBSortingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBSortings.
   */
  cursor?: Prisma.DBSortingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBSortings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBSortings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBSortings.
   */
  distinct?: Prisma.DBSortingScalarFieldEnum | Prisma.DBSortingScalarFieldEnum[]
}

/**
 * DBSorting findFirstOrThrow
 */
export type DBSortingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  /**
   * Filter, which DBSorting to fetch.
   */
  where?: Prisma.DBSortingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBSortings to fetch.
   */
  orderBy?: Prisma.DBSortingOrderByWithRelationInput | Prisma.DBSortingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBSortings.
   */
  cursor?: Prisma.DBSortingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBSortings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBSortings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBSortings.
   */
  distinct?: Prisma.DBSortingScalarFieldEnum | Prisma.DBSortingScalarFieldEnum[]
}

/**
 * DBSorting findMany
 */
export type DBSortingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  /**
   * Filter, which DBSortings to fetch.
   */
  where?: Prisma.DBSortingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBSortings to fetch.
   */
  orderBy?: Prisma.DBSortingOrderByWithRelationInput | Prisma.DBSortingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBSortings.
   */
  cursor?: Prisma.DBSortingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBSortings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBSortings.
   */
  skip?: number
  distinct?: Prisma.DBSortingScalarFieldEnum | Prisma.DBSortingScalarFieldEnum[]
}

/**
 * DBSorting create
 */
export type DBSortingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  /**
   * The data needed to create a DBSorting.
   */
  data: Prisma.XOR<Prisma.DBSortingCreateInput, Prisma.DBSortingUncheckedCreateInput>
}

/**
 * DBSorting createMany
 */
export type DBSortingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBSortings.
   */
  data: Prisma.DBSortingCreateManyInput | Prisma.DBSortingCreateManyInput[]
}

/**
 * DBSorting createManyAndReturn
 */
export type DBSortingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * The data used to create many DBSortings.
   */
  data: Prisma.DBSortingCreateManyInput | Prisma.DBSortingCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DBSorting update
 */
export type DBSortingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  /**
   * The data needed to update a DBSorting.
   */
  data: Prisma.XOR<Prisma.DBSortingUpdateInput, Prisma.DBSortingUncheckedUpdateInput>
  /**
   * Choose, which DBSorting to update.
   */
  where: Prisma.DBSortingWhereUniqueInput
}

/**
 * DBSorting updateMany
 */
export type DBSortingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBSortings.
   */
  data: Prisma.XOR<Prisma.DBSortingUpdateManyMutationInput, Prisma.DBSortingUncheckedUpdateManyInput>
  /**
   * Filter which DBSortings to update
   */
  where?: Prisma.DBSortingWhereInput
  /**
   * Limit how many DBSortings to update.
   */
  limit?: number
}

/**
 * DBSorting updateManyAndReturn
 */
export type DBSortingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * The data used to update DBSortings.
   */
  data: Prisma.XOR<Prisma.DBSortingUpdateManyMutationInput, Prisma.DBSortingUncheckedUpdateManyInput>
  /**
   * Filter which DBSortings to update
   */
  where?: Prisma.DBSortingWhereInput
  /**
   * Limit how many DBSortings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DBSorting upsert
 */
export type DBSortingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  /**
   * The filter to search for the DBSorting to update in case it exists.
   */
  where: Prisma.DBSortingWhereUniqueInput
  /**
   * In case the DBSorting found by the `where` argument doesn't exist, create a new DBSorting with this data.
   */
  create: Prisma.XOR<Prisma.DBSortingCreateInput, Prisma.DBSortingUncheckedCreateInput>
  /**
   * In case the DBSorting was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBSortingUpdateInput, Prisma.DBSortingUncheckedUpdateInput>
}

/**
 * DBSorting delete
 */
export type DBSortingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  /**
   * Filter which DBSorting to delete.
   */
  where: Prisma.DBSortingWhereUniqueInput
}

/**
 * DBSorting deleteMany
 */
export type DBSortingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBSortings to delete
   */
  where?: Prisma.DBSortingWhereInput
  /**
   * Limit how many DBSortings to delete.
   */
  limit?: number
}

/**
 * DBSorting.tracks
 */
export type DBSorting$tracksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  where?: Prisma.DBTrackWhereInput
  orderBy?: Prisma.DBTrackOrderByWithRelationInput | Prisma.DBTrackOrderByWithRelationInput[]
  cursor?: Prisma.DBTrackWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBTrackScalarFieldEnum | Prisma.DBTrackScalarFieldEnum[]
}

/**
 * DBSorting without action
 */
export type DBSortingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
}
