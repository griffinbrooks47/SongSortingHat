
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBAlbum` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBAlbum
 * *
 *  * Album
 */
export type DBAlbumModel = runtime.Types.Result.DefaultSelection<Prisma.$DBAlbumPayload>

export type AggregateDBAlbum = {
  _count: DBAlbumCountAggregateOutputType | null
  _avg: DBAlbumAvgAggregateOutputType | null
  _sum: DBAlbumSumAggregateOutputType | null
  _min: DBAlbumMinAggregateOutputType | null
  _max: DBAlbumMaxAggregateOutputType | null
}

export type DBAlbumAvgAggregateOutputType = {
  total_tracks: number | null
}

export type DBAlbumSumAggregateOutputType = {
  total_tracks: number | null
}

export type DBAlbumMinAggregateOutputType = {
  id: string | null
  spotifyId: string | null
  last_updated: Date | null
  title: string | null
  total_tracks: number | null
  release_date: string | null
}

export type DBAlbumMaxAggregateOutputType = {
  id: string | null
  spotifyId: string | null
  last_updated: Date | null
  title: string | null
  total_tracks: number | null
  release_date: string | null
}

export type DBAlbumCountAggregateOutputType = {
  id: number
  spotifyId: number
  last_updated: number
  title: number
  total_tracks: number
  release_date: number
  external_urls: number
  _all: number
}


export type DBAlbumAvgAggregateInputType = {
  total_tracks?: true
}

export type DBAlbumSumAggregateInputType = {
  total_tracks?: true
}

export type DBAlbumMinAggregateInputType = {
  id?: true
  spotifyId?: true
  last_updated?: true
  title?: true
  total_tracks?: true
  release_date?: true
}

export type DBAlbumMaxAggregateInputType = {
  id?: true
  spotifyId?: true
  last_updated?: true
  title?: true
  total_tracks?: true
  release_date?: true
}

export type DBAlbumCountAggregateInputType = {
  id?: true
  spotifyId?: true
  last_updated?: true
  title?: true
  total_tracks?: true
  release_date?: true
  external_urls?: true
  _all?: true
}

export type DBAlbumAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBAlbum to aggregate.
   */
  where?: Prisma.DBAlbumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAlbums to fetch.
   */
  orderBy?: Prisma.DBAlbumOrderByWithRelationInput | Prisma.DBAlbumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBAlbumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAlbums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAlbums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBAlbums
  **/
  _count?: true | DBAlbumCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DBAlbumAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DBAlbumSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBAlbumMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBAlbumMaxAggregateInputType
}

export type GetDBAlbumAggregateType<T extends DBAlbumAggregateArgs> = {
      [P in keyof T & keyof AggregateDBAlbum]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBAlbum[P]>
    : Prisma.GetScalarType<T[P], AggregateDBAlbum[P]>
}




export type DBAlbumGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBAlbumWhereInput
  orderBy?: Prisma.DBAlbumOrderByWithAggregationInput | Prisma.DBAlbumOrderByWithAggregationInput[]
  by: Prisma.DBAlbumScalarFieldEnum[] | Prisma.DBAlbumScalarFieldEnum
  having?: Prisma.DBAlbumScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBAlbumCountAggregateInputType | true
  _avg?: DBAlbumAvgAggregateInputType
  _sum?: DBAlbumSumAggregateInputType
  _min?: DBAlbumMinAggregateInputType
  _max?: DBAlbumMaxAggregateInputType
}

export type DBAlbumGroupByOutputType = {
  id: string
  spotifyId: string
  last_updated: Date
  title: string
  total_tracks: number
  release_date: string
  external_urls: runtime.JsonValue | null
  _count: DBAlbumCountAggregateOutputType | null
  _avg: DBAlbumAvgAggregateOutputType | null
  _sum: DBAlbumSumAggregateOutputType | null
  _min: DBAlbumMinAggregateOutputType | null
  _max: DBAlbumMaxAggregateOutputType | null
}

type GetDBAlbumGroupByPayload<T extends DBAlbumGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBAlbumGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBAlbumGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBAlbumGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBAlbumGroupByOutputType[P]>
      }
    >
  >



export type DBAlbumWhereInput = {
  AND?: Prisma.DBAlbumWhereInput | Prisma.DBAlbumWhereInput[]
  OR?: Prisma.DBAlbumWhereInput[]
  NOT?: Prisma.DBAlbumWhereInput | Prisma.DBAlbumWhereInput[]
  id?: Prisma.StringFilter<"DBAlbum"> | string
  spotifyId?: Prisma.StringFilter<"DBAlbum"> | string
  last_updated?: Prisma.DateTimeFilter<"DBAlbum"> | Date | string
  title?: Prisma.StringFilter<"DBAlbum"> | string
  total_tracks?: Prisma.IntFilter<"DBAlbum"> | number
  release_date?: Prisma.StringFilter<"DBAlbum"> | string
  external_urls?: Prisma.JsonNullableFilter<"DBAlbum">
  artists?: Prisma.DBArtistListRelationFilter
  tracks?: Prisma.DBTrackListRelationFilter
  images?: Prisma.DBAlbumImgListRelationFilter
}

export type DBAlbumOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  last_updated?: Prisma.SortOrder
  title?: Prisma.SortOrder
  total_tracks?: Prisma.SortOrder
  release_date?: Prisma.SortOrder
  external_urls?: Prisma.SortOrderInput | Prisma.SortOrder
  artists?: Prisma.DBArtistOrderByRelationAggregateInput
  tracks?: Prisma.DBTrackOrderByRelationAggregateInput
  images?: Prisma.DBAlbumImgOrderByRelationAggregateInput
}

export type DBAlbumWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  spotifyId?: string
  AND?: Prisma.DBAlbumWhereInput | Prisma.DBAlbumWhereInput[]
  OR?: Prisma.DBAlbumWhereInput[]
  NOT?: Prisma.DBAlbumWhereInput | Prisma.DBAlbumWhereInput[]
  last_updated?: Prisma.DateTimeFilter<"DBAlbum"> | Date | string
  title?: Prisma.StringFilter<"DBAlbum"> | string
  total_tracks?: Prisma.IntFilter<"DBAlbum"> | number
  release_date?: Prisma.StringFilter<"DBAlbum"> | string
  external_urls?: Prisma.JsonNullableFilter<"DBAlbum">
  artists?: Prisma.DBArtistListRelationFilter
  tracks?: Prisma.DBTrackListRelationFilter
  images?: Prisma.DBAlbumImgListRelationFilter
}, "id" | "spotifyId">

export type DBAlbumOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  last_updated?: Prisma.SortOrder
  title?: Prisma.SortOrder
  total_tracks?: Prisma.SortOrder
  release_date?: Prisma.SortOrder
  external_urls?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.DBAlbumCountOrderByAggregateInput
  _avg?: Prisma.DBAlbumAvgOrderByAggregateInput
  _max?: Prisma.DBAlbumMaxOrderByAggregateInput
  _min?: Prisma.DBAlbumMinOrderByAggregateInput
  _sum?: Prisma.DBAlbumSumOrderByAggregateInput
}

export type DBAlbumScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBAlbumScalarWhereWithAggregatesInput | Prisma.DBAlbumScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBAlbumScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBAlbumScalarWhereWithAggregatesInput | Prisma.DBAlbumScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DBAlbum"> | string
  spotifyId?: Prisma.StringWithAggregatesFilter<"DBAlbum"> | string
  last_updated?: Prisma.DateTimeWithAggregatesFilter<"DBAlbum"> | Date | string
  title?: Prisma.StringWithAggregatesFilter<"DBAlbum"> | string
  total_tracks?: Prisma.IntWithAggregatesFilter<"DBAlbum"> | number
  release_date?: Prisma.StringWithAggregatesFilter<"DBAlbum"> | string
  external_urls?: Prisma.JsonNullableWithAggregatesFilter<"DBAlbum">
}

export type DBAlbumCreateInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  title: string
  total_tracks: number
  release_date: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistCreateNestedManyWithoutAlbumsInput
  tracks?: Prisma.DBTrackCreateNestedManyWithoutAlbumInput
  images?: Prisma.DBAlbumImgCreateNestedManyWithoutAlbumInput
}

export type DBAlbumUncheckedCreateInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  title: string
  total_tracks: number
  release_date: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistUncheckedCreateNestedManyWithoutAlbumsInput
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutAlbumInput
  images?: Prisma.DBAlbumImgUncheckedCreateNestedManyWithoutAlbumInput
}

export type DBAlbumUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistUpdateManyWithoutAlbumsNestedInput
  tracks?: Prisma.DBTrackUpdateManyWithoutAlbumNestedInput
  images?: Prisma.DBAlbumImgUpdateManyWithoutAlbumNestedInput
}

export type DBAlbumUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistUncheckedUpdateManyWithoutAlbumsNestedInput
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutAlbumNestedInput
  images?: Prisma.DBAlbumImgUncheckedUpdateManyWithoutAlbumNestedInput
}

export type DBAlbumCreateManyInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  title: string
  total_tracks: number
  release_date: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type DBAlbumUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type DBAlbumUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type DBAlbumCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  last_updated?: Prisma.SortOrder
  title?: Prisma.SortOrder
  total_tracks?: Prisma.SortOrder
  release_date?: Prisma.SortOrder
  external_urls?: Prisma.SortOrder
}

export type DBAlbumAvgOrderByAggregateInput = {
  total_tracks?: Prisma.SortOrder
}

export type DBAlbumMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  last_updated?: Prisma.SortOrder
  title?: Prisma.SortOrder
  total_tracks?: Prisma.SortOrder
  release_date?: Prisma.SortOrder
}

export type DBAlbumMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  last_updated?: Prisma.SortOrder
  title?: Prisma.SortOrder
  total_tracks?: Prisma.SortOrder
  release_date?: Prisma.SortOrder
}

export type DBAlbumSumOrderByAggregateInput = {
  total_tracks?: Prisma.SortOrder
}

export type DBAlbumListRelationFilter = {
  every?: Prisma.DBAlbumWhereInput
  some?: Prisma.DBAlbumWhereInput
  none?: Prisma.DBAlbumWhereInput
}

export type DBAlbumOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DBAlbumNullableScalarRelationFilter = {
  is?: Prisma.DBAlbumWhereInput | null
  isNot?: Prisma.DBAlbumWhereInput | null
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DBAlbumCreateNestedManyWithoutArtistsInput = {
  create?: Prisma.XOR<Prisma.DBAlbumCreateWithoutArtistsInput, Prisma.DBAlbumUncheckedCreateWithoutArtistsInput> | Prisma.DBAlbumCreateWithoutArtistsInput[] | Prisma.DBAlbumUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBAlbumCreateOrConnectWithoutArtistsInput | Prisma.DBAlbumCreateOrConnectWithoutArtistsInput[]
  connect?: Prisma.DBAlbumWhereUniqueInput | Prisma.DBAlbumWhereUniqueInput[]
}

export type DBAlbumUncheckedCreateNestedManyWithoutArtistsInput = {
  create?: Prisma.XOR<Prisma.DBAlbumCreateWithoutArtistsInput, Prisma.DBAlbumUncheckedCreateWithoutArtistsInput> | Prisma.DBAlbumCreateWithoutArtistsInput[] | Prisma.DBAlbumUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBAlbumCreateOrConnectWithoutArtistsInput | Prisma.DBAlbumCreateOrConnectWithoutArtistsInput[]
  connect?: Prisma.DBAlbumWhereUniqueInput | Prisma.DBAlbumWhereUniqueInput[]
}

export type DBAlbumUpdateManyWithoutArtistsNestedInput = {
  create?: Prisma.XOR<Prisma.DBAlbumCreateWithoutArtistsInput, Prisma.DBAlbumUncheckedCreateWithoutArtistsInput> | Prisma.DBAlbumCreateWithoutArtistsInput[] | Prisma.DBAlbumUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBAlbumCreateOrConnectWithoutArtistsInput | Prisma.DBAlbumCreateOrConnectWithoutArtistsInput[]
  upsert?: Prisma.DBAlbumUpsertWithWhereUniqueWithoutArtistsInput | Prisma.DBAlbumUpsertWithWhereUniqueWithoutArtistsInput[]
  set?: Prisma.DBAlbumWhereUniqueInput | Prisma.DBAlbumWhereUniqueInput[]
  disconnect?: Prisma.DBAlbumWhereUniqueInput | Prisma.DBAlbumWhereUniqueInput[]
  delete?: Prisma.DBAlbumWhereUniqueInput | Prisma.DBAlbumWhereUniqueInput[]
  connect?: Prisma.DBAlbumWhereUniqueInput | Prisma.DBAlbumWhereUniqueInput[]
  update?: Prisma.DBAlbumUpdateWithWhereUniqueWithoutArtistsInput | Prisma.DBAlbumUpdateWithWhereUniqueWithoutArtistsInput[]
  updateMany?: Prisma.DBAlbumUpdateManyWithWhereWithoutArtistsInput | Prisma.DBAlbumUpdateManyWithWhereWithoutArtistsInput[]
  deleteMany?: Prisma.DBAlbumScalarWhereInput | Prisma.DBAlbumScalarWhereInput[]
}

export type DBAlbumUncheckedUpdateManyWithoutArtistsNestedInput = {
  create?: Prisma.XOR<Prisma.DBAlbumCreateWithoutArtistsInput, Prisma.DBAlbumUncheckedCreateWithoutArtistsInput> | Prisma.DBAlbumCreateWithoutArtistsInput[] | Prisma.DBAlbumUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBAlbumCreateOrConnectWithoutArtistsInput | Prisma.DBAlbumCreateOrConnectWithoutArtistsInput[]
  upsert?: Prisma.DBAlbumUpsertWithWhereUniqueWithoutArtistsInput | Prisma.DBAlbumUpsertWithWhereUniqueWithoutArtistsInput[]
  set?: Prisma.DBAlbumWhereUniqueInput | Prisma.DBAlbumWhereUniqueInput[]
  disconnect?: Prisma.DBAlbumWhereUniqueInput | Prisma.DBAlbumWhereUniqueInput[]
  delete?: Prisma.DBAlbumWhereUniqueInput | Prisma.DBAlbumWhereUniqueInput[]
  connect?: Prisma.DBAlbumWhereUniqueInput | Prisma.DBAlbumWhereUniqueInput[]
  update?: Prisma.DBAlbumUpdateWithWhereUniqueWithoutArtistsInput | Prisma.DBAlbumUpdateWithWhereUniqueWithoutArtistsInput[]
  updateMany?: Prisma.DBAlbumUpdateManyWithWhereWithoutArtistsInput | Prisma.DBAlbumUpdateManyWithWhereWithoutArtistsInput[]
  deleteMany?: Prisma.DBAlbumScalarWhereInput | Prisma.DBAlbumScalarWhereInput[]
}

export type DBAlbumCreateNestedOneWithoutImagesInput = {
  create?: Prisma.XOR<Prisma.DBAlbumCreateWithoutImagesInput, Prisma.DBAlbumUncheckedCreateWithoutImagesInput>
  connectOrCreate?: Prisma.DBAlbumCreateOrConnectWithoutImagesInput
  connect?: Prisma.DBAlbumWhereUniqueInput
}

export type DBAlbumUpdateOneWithoutImagesNestedInput = {
  create?: Prisma.XOR<Prisma.DBAlbumCreateWithoutImagesInput, Prisma.DBAlbumUncheckedCreateWithoutImagesInput>
  connectOrCreate?: Prisma.DBAlbumCreateOrConnectWithoutImagesInput
  upsert?: Prisma.DBAlbumUpsertWithoutImagesInput
  disconnect?: Prisma.DBAlbumWhereInput | boolean
  delete?: Prisma.DBAlbumWhereInput | boolean
  connect?: Prisma.DBAlbumWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DBAlbumUpdateToOneWithWhereWithoutImagesInput, Prisma.DBAlbumUpdateWithoutImagesInput>, Prisma.DBAlbumUncheckedUpdateWithoutImagesInput>
}

export type DBAlbumCreateNestedOneWithoutTracksInput = {
  create?: Prisma.XOR<Prisma.DBAlbumCreateWithoutTracksInput, Prisma.DBAlbumUncheckedCreateWithoutTracksInput>
  connectOrCreate?: Prisma.DBAlbumCreateOrConnectWithoutTracksInput
  connect?: Prisma.DBAlbumWhereUniqueInput
}

export type DBAlbumUpdateOneWithoutTracksNestedInput = {
  create?: Prisma.XOR<Prisma.DBAlbumCreateWithoutTracksInput, Prisma.DBAlbumUncheckedCreateWithoutTracksInput>
  connectOrCreate?: Prisma.DBAlbumCreateOrConnectWithoutTracksInput
  upsert?: Prisma.DBAlbumUpsertWithoutTracksInput
  disconnect?: Prisma.DBAlbumWhereInput | boolean
  delete?: Prisma.DBAlbumWhereInput | boolean
  connect?: Prisma.DBAlbumWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DBAlbumUpdateToOneWithWhereWithoutTracksInput, Prisma.DBAlbumUpdateWithoutTracksInput>, Prisma.DBAlbumUncheckedUpdateWithoutTracksInput>
}

export type DBAlbumCreateWithoutArtistsInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  title: string
  total_tracks: number
  release_date: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  tracks?: Prisma.DBTrackCreateNestedManyWithoutAlbumInput
  images?: Prisma.DBAlbumImgCreateNestedManyWithoutAlbumInput
}

export type DBAlbumUncheckedCreateWithoutArtistsInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  title: string
  total_tracks: number
  release_date: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutAlbumInput
  images?: Prisma.DBAlbumImgUncheckedCreateNestedManyWithoutAlbumInput
}

export type DBAlbumCreateOrConnectWithoutArtistsInput = {
  where: Prisma.DBAlbumWhereUniqueInput
  create: Prisma.XOR<Prisma.DBAlbumCreateWithoutArtistsInput, Prisma.DBAlbumUncheckedCreateWithoutArtistsInput>
}

export type DBAlbumUpsertWithWhereUniqueWithoutArtistsInput = {
  where: Prisma.DBAlbumWhereUniqueInput
  update: Prisma.XOR<Prisma.DBAlbumUpdateWithoutArtistsInput, Prisma.DBAlbumUncheckedUpdateWithoutArtistsInput>
  create: Prisma.XOR<Prisma.DBAlbumCreateWithoutArtistsInput, Prisma.DBAlbumUncheckedCreateWithoutArtistsInput>
}

export type DBAlbumUpdateWithWhereUniqueWithoutArtistsInput = {
  where: Prisma.DBAlbumWhereUniqueInput
  data: Prisma.XOR<Prisma.DBAlbumUpdateWithoutArtistsInput, Prisma.DBAlbumUncheckedUpdateWithoutArtistsInput>
}

export type DBAlbumUpdateManyWithWhereWithoutArtistsInput = {
  where: Prisma.DBAlbumScalarWhereInput
  data: Prisma.XOR<Prisma.DBAlbumUpdateManyMutationInput, Prisma.DBAlbumUncheckedUpdateManyWithoutArtistsInput>
}

export type DBAlbumScalarWhereInput = {
  AND?: Prisma.DBAlbumScalarWhereInput | Prisma.DBAlbumScalarWhereInput[]
  OR?: Prisma.DBAlbumScalarWhereInput[]
  NOT?: Prisma.DBAlbumScalarWhereInput | Prisma.DBAlbumScalarWhereInput[]
  id?: Prisma.StringFilter<"DBAlbum"> | string
  spotifyId?: Prisma.StringFilter<"DBAlbum"> | string
  last_updated?: Prisma.DateTimeFilter<"DBAlbum"> | Date | string
  title?: Prisma.StringFilter<"DBAlbum"> | string
  total_tracks?: Prisma.IntFilter<"DBAlbum"> | number
  release_date?: Prisma.StringFilter<"DBAlbum"> | string
  external_urls?: Prisma.JsonNullableFilter<"DBAlbum">
}

export type DBAlbumCreateWithoutImagesInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  title: string
  total_tracks: number
  release_date: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistCreateNestedManyWithoutAlbumsInput
  tracks?: Prisma.DBTrackCreateNestedManyWithoutAlbumInput
}

export type DBAlbumUncheckedCreateWithoutImagesInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  title: string
  total_tracks: number
  release_date: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistUncheckedCreateNestedManyWithoutAlbumsInput
  tracks?: Prisma.DBTrackUncheckedCreateNestedManyWithoutAlbumInput
}

export type DBAlbumCreateOrConnectWithoutImagesInput = {
  where: Prisma.DBAlbumWhereUniqueInput
  create: Prisma.XOR<Prisma.DBAlbumCreateWithoutImagesInput, Prisma.DBAlbumUncheckedCreateWithoutImagesInput>
}

export type DBAlbumUpsertWithoutImagesInput = {
  update: Prisma.XOR<Prisma.DBAlbumUpdateWithoutImagesInput, Prisma.DBAlbumUncheckedUpdateWithoutImagesInput>
  create: Prisma.XOR<Prisma.DBAlbumCreateWithoutImagesInput, Prisma.DBAlbumUncheckedCreateWithoutImagesInput>
  where?: Prisma.DBAlbumWhereInput
}

export type DBAlbumUpdateToOneWithWhereWithoutImagesInput = {
  where?: Prisma.DBAlbumWhereInput
  data: Prisma.XOR<Prisma.DBAlbumUpdateWithoutImagesInput, Prisma.DBAlbumUncheckedUpdateWithoutImagesInput>
}

export type DBAlbumUpdateWithoutImagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistUpdateManyWithoutAlbumsNestedInput
  tracks?: Prisma.DBTrackUpdateManyWithoutAlbumNestedInput
}

export type DBAlbumUncheckedUpdateWithoutImagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistUncheckedUpdateManyWithoutAlbumsNestedInput
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutAlbumNestedInput
}

export type DBAlbumCreateWithoutTracksInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  title: string
  total_tracks: number
  release_date: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistCreateNestedManyWithoutAlbumsInput
  images?: Prisma.DBAlbumImgCreateNestedManyWithoutAlbumInput
}

export type DBAlbumUncheckedCreateWithoutTracksInput = {
  id?: string
  spotifyId: string
  last_updated?: Date | string
  title: string
  total_tracks: number
  release_date: string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistUncheckedCreateNestedManyWithoutAlbumsInput
  images?: Prisma.DBAlbumImgUncheckedCreateNestedManyWithoutAlbumInput
}

export type DBAlbumCreateOrConnectWithoutTracksInput = {
  where: Prisma.DBAlbumWhereUniqueInput
  create: Prisma.XOR<Prisma.DBAlbumCreateWithoutTracksInput, Prisma.DBAlbumUncheckedCreateWithoutTracksInput>
}

export type DBAlbumUpsertWithoutTracksInput = {
  update: Prisma.XOR<Prisma.DBAlbumUpdateWithoutTracksInput, Prisma.DBAlbumUncheckedUpdateWithoutTracksInput>
  create: Prisma.XOR<Prisma.DBAlbumCreateWithoutTracksInput, Prisma.DBAlbumUncheckedCreateWithoutTracksInput>
  where?: Prisma.DBAlbumWhereInput
}

export type DBAlbumUpdateToOneWithWhereWithoutTracksInput = {
  where?: Prisma.DBAlbumWhereInput
  data: Prisma.XOR<Prisma.DBAlbumUpdateWithoutTracksInput, Prisma.DBAlbumUncheckedUpdateWithoutTracksInput>
}

export type DBAlbumUpdateWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistUpdateManyWithoutAlbumsNestedInput
  images?: Prisma.DBAlbumImgUpdateManyWithoutAlbumNestedInput
}

export type DBAlbumUncheckedUpdateWithoutTracksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  artists?: Prisma.DBArtistUncheckedUpdateManyWithoutAlbumsNestedInput
  images?: Prisma.DBAlbumImgUncheckedUpdateManyWithoutAlbumNestedInput
}

export type DBAlbumUpdateWithoutArtistsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  tracks?: Prisma.DBTrackUpdateManyWithoutAlbumNestedInput
  images?: Prisma.DBAlbumImgUpdateManyWithoutAlbumNestedInput
}

export type DBAlbumUncheckedUpdateWithoutArtistsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  tracks?: Prisma.DBTrackUncheckedUpdateManyWithoutAlbumNestedInput
  images?: Prisma.DBAlbumImgUncheckedUpdateManyWithoutAlbumNestedInput
}

export type DBAlbumUncheckedUpdateManyWithoutArtistsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  last_updated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  total_tracks?: Prisma.IntFieldUpdateOperationsInput | number
  release_date?: Prisma.StringFieldUpdateOperationsInput | string
  external_urls?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}


/**
 * Count Type DBAlbumCountOutputType
 */

export type DBAlbumCountOutputType = {
  artists: number
  tracks: number
  images: number
}

export type DBAlbumCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  artists?: boolean | DBAlbumCountOutputTypeCountArtistsArgs
  tracks?: boolean | DBAlbumCountOutputTypeCountTracksArgs
  images?: boolean | DBAlbumCountOutputTypeCountImagesArgs
}

/**
 * DBAlbumCountOutputType without action
 */
export type DBAlbumCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumCountOutputType
   */
  select?: Prisma.DBAlbumCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DBAlbumCountOutputType without action
 */
export type DBAlbumCountOutputTypeCountArtistsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBArtistWhereInput
}

/**
 * DBAlbumCountOutputType without action
 */
export type DBAlbumCountOutputTypeCountTracksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBTrackWhereInput
}

/**
 * DBAlbumCountOutputType without action
 */
export type DBAlbumCountOutputTypeCountImagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBAlbumImgWhereInput
}


export type DBAlbumSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spotifyId?: boolean
  last_updated?: boolean
  title?: boolean
  total_tracks?: boolean
  release_date?: boolean
  external_urls?: boolean
  artists?: boolean | Prisma.DBAlbum$artistsArgs<ExtArgs>
  tracks?: boolean | Prisma.DBAlbum$tracksArgs<ExtArgs>
  images?: boolean | Prisma.DBAlbum$imagesArgs<ExtArgs>
  _count?: boolean | Prisma.DBAlbumCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBAlbum"]>

export type DBAlbumSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spotifyId?: boolean
  last_updated?: boolean
  title?: boolean
  total_tracks?: boolean
  release_date?: boolean
  external_urls?: boolean
}, ExtArgs["result"]["dBAlbum"]>

export type DBAlbumSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spotifyId?: boolean
  last_updated?: boolean
  title?: boolean
  total_tracks?: boolean
  release_date?: boolean
  external_urls?: boolean
}, ExtArgs["result"]["dBAlbum"]>

export type DBAlbumSelectScalar = {
  id?: boolean
  spotifyId?: boolean
  last_updated?: boolean
  title?: boolean
  total_tracks?: boolean
  release_date?: boolean
  external_urls?: boolean
}

export type DBAlbumOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "spotifyId" | "last_updated" | "title" | "total_tracks" | "release_date" | "external_urls", ExtArgs["result"]["dBAlbum"]>
export type DBAlbumInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  artists?: boolean | Prisma.DBAlbum$artistsArgs<ExtArgs>
  tracks?: boolean | Prisma.DBAlbum$tracksArgs<ExtArgs>
  images?: boolean | Prisma.DBAlbum$imagesArgs<ExtArgs>
  _count?: boolean | Prisma.DBAlbumCountOutputTypeDefaultArgs<ExtArgs>
}
export type DBAlbumIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DBAlbumIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DBAlbumPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBAlbum"
  objects: {
    /**
     * *
     *    * Album Artists
     *    * Usually one artist, but can be multiple.
     */
    artists: Prisma.$DBArtistPayload<ExtArgs>[]
    /**
     * *
     *    * Tracks on this album.
     */
    tracks: Prisma.$DBTrackPayload<ExtArgs>[]
    /**
     * *
     *    * Images
     */
    images: Prisma.$DBAlbumImgPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * *
     *    * Identifiers
     */
    id: string
    spotifyId: string
    /**
     * *
     *    * Database records
     */
    last_updated: Date
    /**
     * *
     *    * Metadata
     */
    title: string
    total_tracks: number
    release_date: string
    external_urls: runtime.JsonValue | null
  }, ExtArgs["result"]["dBAlbum"]>
  composites: {}
}

export type DBAlbumGetPayload<S extends boolean | null | undefined | DBAlbumDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload, S>

export type DBAlbumCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBAlbumFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBAlbumCountAggregateInputType | true
  }

export interface DBAlbumDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBAlbum'], meta: { name: 'DBAlbum' } }
  /**
   * Find zero or one DBAlbum that matches the filter.
   * @param {DBAlbumFindUniqueArgs} args - Arguments to find a DBAlbum
   * @example
   * // Get one DBAlbum
   * const dBAlbum = await prisma.dBAlbum.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBAlbumFindUniqueArgs>(args: Prisma.SelectSubset<T, DBAlbumFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBAlbumClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBAlbum that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBAlbumFindUniqueOrThrowArgs} args - Arguments to find a DBAlbum
   * @example
   * // Get one DBAlbum
   * const dBAlbum = await prisma.dBAlbum.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBAlbumFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBAlbumFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBAlbumClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBAlbum that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumFindFirstArgs} args - Arguments to find a DBAlbum
   * @example
   * // Get one DBAlbum
   * const dBAlbum = await prisma.dBAlbum.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBAlbumFindFirstArgs>(args?: Prisma.SelectSubset<T, DBAlbumFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBAlbumClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBAlbum that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumFindFirstOrThrowArgs} args - Arguments to find a DBAlbum
   * @example
   * // Get one DBAlbum
   * const dBAlbum = await prisma.dBAlbum.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBAlbumFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBAlbumFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBAlbumClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBAlbums that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBAlbums
   * const dBAlbums = await prisma.dBAlbum.findMany()
   * 
   * // Get first 10 DBAlbums
   * const dBAlbums = await prisma.dBAlbum.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dBAlbumWithIdOnly = await prisma.dBAlbum.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DBAlbumFindManyArgs>(args?: Prisma.SelectSubset<T, DBAlbumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBAlbum.
   * @param {DBAlbumCreateArgs} args - Arguments to create a DBAlbum.
   * @example
   * // Create one DBAlbum
   * const DBAlbum = await prisma.dBAlbum.create({
   *   data: {
   *     // ... data to create a DBAlbum
   *   }
   * })
   * 
   */
  create<T extends DBAlbumCreateArgs>(args: Prisma.SelectSubset<T, DBAlbumCreateArgs<ExtArgs>>): Prisma.Prisma__DBAlbumClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBAlbums.
   * @param {DBAlbumCreateManyArgs} args - Arguments to create many DBAlbums.
   * @example
   * // Create many DBAlbums
   * const dBAlbum = await prisma.dBAlbum.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBAlbumCreateManyArgs>(args?: Prisma.SelectSubset<T, DBAlbumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBAlbums and returns the data saved in the database.
   * @param {DBAlbumCreateManyAndReturnArgs} args - Arguments to create many DBAlbums.
   * @example
   * // Create many DBAlbums
   * const dBAlbum = await prisma.dBAlbum.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBAlbums and only return the `id`
   * const dBAlbumWithIdOnly = await prisma.dBAlbum.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBAlbumCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBAlbumCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBAlbum.
   * @param {DBAlbumDeleteArgs} args - Arguments to delete one DBAlbum.
   * @example
   * // Delete one DBAlbum
   * const DBAlbum = await prisma.dBAlbum.delete({
   *   where: {
   *     // ... filter to delete one DBAlbum
   *   }
   * })
   * 
   */
  delete<T extends DBAlbumDeleteArgs>(args: Prisma.SelectSubset<T, DBAlbumDeleteArgs<ExtArgs>>): Prisma.Prisma__DBAlbumClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBAlbum.
   * @param {DBAlbumUpdateArgs} args - Arguments to update one DBAlbum.
   * @example
   * // Update one DBAlbum
   * const dBAlbum = await prisma.dBAlbum.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBAlbumUpdateArgs>(args: Prisma.SelectSubset<T, DBAlbumUpdateArgs<ExtArgs>>): Prisma.Prisma__DBAlbumClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBAlbums.
   * @param {DBAlbumDeleteManyArgs} args - Arguments to filter DBAlbums to delete.
   * @example
   * // Delete a few DBAlbums
   * const { count } = await prisma.dBAlbum.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBAlbumDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBAlbumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBAlbums.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBAlbums
   * const dBAlbum = await prisma.dBAlbum.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBAlbumUpdateManyArgs>(args: Prisma.SelectSubset<T, DBAlbumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBAlbums and returns the data updated in the database.
   * @param {DBAlbumUpdateManyAndReturnArgs} args - Arguments to update many DBAlbums.
   * @example
   * // Update many DBAlbums
   * const dBAlbum = await prisma.dBAlbum.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBAlbums and only return the `id`
   * const dBAlbumWithIdOnly = await prisma.dBAlbum.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBAlbumUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBAlbumUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBAlbum.
   * @param {DBAlbumUpsertArgs} args - Arguments to update or create a DBAlbum.
   * @example
   * // Update or create a DBAlbum
   * const dBAlbum = await prisma.dBAlbum.upsert({
   *   create: {
   *     // ... data to create a DBAlbum
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBAlbum we want to update
   *   }
   * })
   */
  upsert<T extends DBAlbumUpsertArgs>(args: Prisma.SelectSubset<T, DBAlbumUpsertArgs<ExtArgs>>): Prisma.Prisma__DBAlbumClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBAlbums.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumCountArgs} args - Arguments to filter DBAlbums to count.
   * @example
   * // Count the number of DBAlbums
   * const count = await prisma.dBAlbum.count({
   *   where: {
   *     // ... the filter for the DBAlbums we want to count
   *   }
   * })
  **/
  count<T extends DBAlbumCountArgs>(
    args?: Prisma.Subset<T, DBAlbumCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBAlbumCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBAlbum.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBAlbumAggregateArgs>(args: Prisma.Subset<T, DBAlbumAggregateArgs>): Prisma.PrismaPromise<GetDBAlbumAggregateType<T>>

  /**
   * Group by DBAlbum.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAlbumGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBAlbumGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBAlbumGroupByArgs['orderBy'] }
      : { orderBy?: DBAlbumGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBAlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBAlbumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBAlbum model
 */
readonly fields: DBAlbumFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBAlbum.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBAlbumClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  artists<T extends Prisma.DBAlbum$artistsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBAlbum$artistsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  tracks<T extends Prisma.DBAlbum$tracksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBAlbum$tracksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  images<T extends Prisma.DBAlbum$imagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBAlbum$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBAlbum model
 */
export interface DBAlbumFieldRefs {
  readonly id: Prisma.FieldRef<"DBAlbum", 'String'>
  readonly spotifyId: Prisma.FieldRef<"DBAlbum", 'String'>
  readonly last_updated: Prisma.FieldRef<"DBAlbum", 'DateTime'>
  readonly title: Prisma.FieldRef<"DBAlbum", 'String'>
  readonly total_tracks: Prisma.FieldRef<"DBAlbum", 'Int'>
  readonly release_date: Prisma.FieldRef<"DBAlbum", 'String'>
  readonly external_urls: Prisma.FieldRef<"DBAlbum", 'Json'>
}
    

// Custom InputTypes
/**
 * DBAlbum findUnique
 */
export type DBAlbumFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  /**
   * Filter, which DBAlbum to fetch.
   */
  where: Prisma.DBAlbumWhereUniqueInput
}

/**
 * DBAlbum findUniqueOrThrow
 */
export type DBAlbumFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  /**
   * Filter, which DBAlbum to fetch.
   */
  where: Prisma.DBAlbumWhereUniqueInput
}

/**
 * DBAlbum findFirst
 */
export type DBAlbumFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  /**
   * Filter, which DBAlbum to fetch.
   */
  where?: Prisma.DBAlbumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAlbums to fetch.
   */
  orderBy?: Prisma.DBAlbumOrderByWithRelationInput | Prisma.DBAlbumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBAlbums.
   */
  cursor?: Prisma.DBAlbumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAlbums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAlbums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBAlbums.
   */
  distinct?: Prisma.DBAlbumScalarFieldEnum | Prisma.DBAlbumScalarFieldEnum[]
}

/**
 * DBAlbum findFirstOrThrow
 */
export type DBAlbumFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  /**
   * Filter, which DBAlbum to fetch.
   */
  where?: Prisma.DBAlbumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAlbums to fetch.
   */
  orderBy?: Prisma.DBAlbumOrderByWithRelationInput | Prisma.DBAlbumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBAlbums.
   */
  cursor?: Prisma.DBAlbumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAlbums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAlbums.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBAlbums.
   */
  distinct?: Prisma.DBAlbumScalarFieldEnum | Prisma.DBAlbumScalarFieldEnum[]
}

/**
 * DBAlbum findMany
 */
export type DBAlbumFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  /**
   * Filter, which DBAlbums to fetch.
   */
  where?: Prisma.DBAlbumWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAlbums to fetch.
   */
  orderBy?: Prisma.DBAlbumOrderByWithRelationInput | Prisma.DBAlbumOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBAlbums.
   */
  cursor?: Prisma.DBAlbumWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAlbums from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAlbums.
   */
  skip?: number
  distinct?: Prisma.DBAlbumScalarFieldEnum | Prisma.DBAlbumScalarFieldEnum[]
}

/**
 * DBAlbum create
 */
export type DBAlbumCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  /**
   * The data needed to create a DBAlbum.
   */
  data: Prisma.XOR<Prisma.DBAlbumCreateInput, Prisma.DBAlbumUncheckedCreateInput>
}

/**
 * DBAlbum createMany
 */
export type DBAlbumCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBAlbums.
   */
  data: Prisma.DBAlbumCreateManyInput | Prisma.DBAlbumCreateManyInput[]
}

/**
 * DBAlbum createManyAndReturn
 */
export type DBAlbumCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * The data used to create many DBAlbums.
   */
  data: Prisma.DBAlbumCreateManyInput | Prisma.DBAlbumCreateManyInput[]
}

/**
 * DBAlbum update
 */
export type DBAlbumUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  /**
   * The data needed to update a DBAlbum.
   */
  data: Prisma.XOR<Prisma.DBAlbumUpdateInput, Prisma.DBAlbumUncheckedUpdateInput>
  /**
   * Choose, which DBAlbum to update.
   */
  where: Prisma.DBAlbumWhereUniqueInput
}

/**
 * DBAlbum updateMany
 */
export type DBAlbumUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBAlbums.
   */
  data: Prisma.XOR<Prisma.DBAlbumUpdateManyMutationInput, Prisma.DBAlbumUncheckedUpdateManyInput>
  /**
   * Filter which DBAlbums to update
   */
  where?: Prisma.DBAlbumWhereInput
  /**
   * Limit how many DBAlbums to update.
   */
  limit?: number
}

/**
 * DBAlbum updateManyAndReturn
 */
export type DBAlbumUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * The data used to update DBAlbums.
   */
  data: Prisma.XOR<Prisma.DBAlbumUpdateManyMutationInput, Prisma.DBAlbumUncheckedUpdateManyInput>
  /**
   * Filter which DBAlbums to update
   */
  where?: Prisma.DBAlbumWhereInput
  /**
   * Limit how many DBAlbums to update.
   */
  limit?: number
}

/**
 * DBAlbum upsert
 */
export type DBAlbumUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  /**
   * The filter to search for the DBAlbum to update in case it exists.
   */
  where: Prisma.DBAlbumWhereUniqueInput
  /**
   * In case the DBAlbum found by the `where` argument doesn't exist, create a new DBAlbum with this data.
   */
  create: Prisma.XOR<Prisma.DBAlbumCreateInput, Prisma.DBAlbumUncheckedCreateInput>
  /**
   * In case the DBAlbum was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBAlbumUpdateInput, Prisma.DBAlbumUncheckedUpdateInput>
}

/**
 * DBAlbum delete
 */
export type DBAlbumDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  /**
   * Filter which DBAlbum to delete.
   */
  where: Prisma.DBAlbumWhereUniqueInput
}

/**
 * DBAlbum deleteMany
 */
export type DBAlbumDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBAlbums to delete
   */
  where?: Prisma.DBAlbumWhereInput
  /**
   * Limit how many DBAlbums to delete.
   */
  limit?: number
}

/**
 * DBAlbum.artists
 */
export type DBAlbum$artistsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  where?: Prisma.DBArtistWhereInput
  orderBy?: Prisma.DBArtistOrderByWithRelationInput | Prisma.DBArtistOrderByWithRelationInput[]
  cursor?: Prisma.DBArtistWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBArtistScalarFieldEnum | Prisma.DBArtistScalarFieldEnum[]
}

/**
 * DBAlbum.tracks
 */
export type DBAlbum$tracksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  where?: Prisma.DBTrackWhereInput
  orderBy?: Prisma.DBTrackOrderByWithRelationInput | Prisma.DBTrackOrderByWithRelationInput[]
  cursor?: Prisma.DBTrackWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBTrackScalarFieldEnum | Prisma.DBTrackScalarFieldEnum[]
}

/**
 * DBAlbum.images
 */
export type DBAlbum$imagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  where?: Prisma.DBAlbumImgWhereInput
  orderBy?: Prisma.DBAlbumImgOrderByWithRelationInput | Prisma.DBAlbumImgOrderByWithRelationInput[]
  cursor?: Prisma.DBAlbumImgWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBAlbumImgScalarFieldEnum | Prisma.DBAlbumImgScalarFieldEnum[]
}

/**
 * DBAlbum without action
 */
export type DBAlbumDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
}
