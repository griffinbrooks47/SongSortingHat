
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBGenre` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBGenre
 * *
 *  * Genres
 */
export type DBGenreModel = runtime.Types.Result.DefaultSelection<Prisma.$DBGenrePayload>

export type AggregateDBGenre = {
  _count: DBGenreCountAggregateOutputType | null
  _min: DBGenreMinAggregateOutputType | null
  _max: DBGenreMaxAggregateOutputType | null
}

export type DBGenreMinAggregateOutputType = {
  id: string | null
  name: string | null
}

export type DBGenreMaxAggregateOutputType = {
  id: string | null
  name: string | null
}

export type DBGenreCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type DBGenreMinAggregateInputType = {
  id?: true
  name?: true
}

export type DBGenreMaxAggregateInputType = {
  id?: true
  name?: true
}

export type DBGenreCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type DBGenreAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBGenre to aggregate.
   */
  where?: Prisma.DBGenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBGenres to fetch.
   */
  orderBy?: Prisma.DBGenreOrderByWithRelationInput | Prisma.DBGenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBGenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBGenres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBGenres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBGenres
  **/
  _count?: true | DBGenreCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBGenreMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBGenreMaxAggregateInputType
}

export type GetDBGenreAggregateType<T extends DBGenreAggregateArgs> = {
      [P in keyof T & keyof AggregateDBGenre]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBGenre[P]>
    : Prisma.GetScalarType<T[P], AggregateDBGenre[P]>
}




export type DBGenreGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBGenreWhereInput
  orderBy?: Prisma.DBGenreOrderByWithAggregationInput | Prisma.DBGenreOrderByWithAggregationInput[]
  by: Prisma.DBGenreScalarFieldEnum[] | Prisma.DBGenreScalarFieldEnum
  having?: Prisma.DBGenreScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBGenreCountAggregateInputType | true
  _min?: DBGenreMinAggregateInputType
  _max?: DBGenreMaxAggregateInputType
}

export type DBGenreGroupByOutputType = {
  id: string
  name: string
  _count: DBGenreCountAggregateOutputType | null
  _min: DBGenreMinAggregateOutputType | null
  _max: DBGenreMaxAggregateOutputType | null
}

type GetDBGenreGroupByPayload<T extends DBGenreGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBGenreGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBGenreGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBGenreGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBGenreGroupByOutputType[P]>
      }
    >
  >



export type DBGenreWhereInput = {
  AND?: Prisma.DBGenreWhereInput | Prisma.DBGenreWhereInput[]
  OR?: Prisma.DBGenreWhereInput[]
  NOT?: Prisma.DBGenreWhereInput | Prisma.DBGenreWhereInput[]
  id?: Prisma.StringFilter<"DBGenre"> | string
  name?: Prisma.StringFilter<"DBGenre"> | string
  artists?: Prisma.DBArtistListRelationFilter
}

export type DBGenreOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  artists?: Prisma.DBArtistOrderByRelationAggregateInput
}

export type DBGenreWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.DBGenreWhereInput | Prisma.DBGenreWhereInput[]
  OR?: Prisma.DBGenreWhereInput[]
  NOT?: Prisma.DBGenreWhereInput | Prisma.DBGenreWhereInput[]
  artists?: Prisma.DBArtistListRelationFilter
}, "id" | "name">

export type DBGenreOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.DBGenreCountOrderByAggregateInput
  _max?: Prisma.DBGenreMaxOrderByAggregateInput
  _min?: Prisma.DBGenreMinOrderByAggregateInput
}

export type DBGenreScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBGenreScalarWhereWithAggregatesInput | Prisma.DBGenreScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBGenreScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBGenreScalarWhereWithAggregatesInput | Prisma.DBGenreScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DBGenre"> | string
  name?: Prisma.StringWithAggregatesFilter<"DBGenre"> | string
}

export type DBGenreCreateInput = {
  id?: string
  name: string
  artists?: Prisma.DBArtistCreateNestedManyWithoutGenresInput
}

export type DBGenreUncheckedCreateInput = {
  id?: string
  name: string
  artists?: Prisma.DBArtistUncheckedCreateNestedManyWithoutGenresInput
}

export type DBGenreUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  artists?: Prisma.DBArtistUpdateManyWithoutGenresNestedInput
}

export type DBGenreUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  artists?: Prisma.DBArtistUncheckedUpdateManyWithoutGenresNestedInput
}

export type DBGenreCreateManyInput = {
  id?: string
  name: string
}

export type DBGenreUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBGenreUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBGenreListRelationFilter = {
  every?: Prisma.DBGenreWhereInput
  some?: Prisma.DBGenreWhereInput
  none?: Prisma.DBGenreWhereInput
}

export type DBGenreOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DBGenreCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type DBGenreMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type DBGenreMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type DBGenreCreateNestedManyWithoutArtistsInput = {
  create?: Prisma.XOR<Prisma.DBGenreCreateWithoutArtistsInput, Prisma.DBGenreUncheckedCreateWithoutArtistsInput> | Prisma.DBGenreCreateWithoutArtistsInput[] | Prisma.DBGenreUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBGenreCreateOrConnectWithoutArtistsInput | Prisma.DBGenreCreateOrConnectWithoutArtistsInput[]
  connect?: Prisma.DBGenreWhereUniqueInput | Prisma.DBGenreWhereUniqueInput[]
}

export type DBGenreUncheckedCreateNestedManyWithoutArtistsInput = {
  create?: Prisma.XOR<Prisma.DBGenreCreateWithoutArtistsInput, Prisma.DBGenreUncheckedCreateWithoutArtistsInput> | Prisma.DBGenreCreateWithoutArtistsInput[] | Prisma.DBGenreUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBGenreCreateOrConnectWithoutArtistsInput | Prisma.DBGenreCreateOrConnectWithoutArtistsInput[]
  connect?: Prisma.DBGenreWhereUniqueInput | Prisma.DBGenreWhereUniqueInput[]
}

export type DBGenreUpdateManyWithoutArtistsNestedInput = {
  create?: Prisma.XOR<Prisma.DBGenreCreateWithoutArtistsInput, Prisma.DBGenreUncheckedCreateWithoutArtistsInput> | Prisma.DBGenreCreateWithoutArtistsInput[] | Prisma.DBGenreUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBGenreCreateOrConnectWithoutArtistsInput | Prisma.DBGenreCreateOrConnectWithoutArtistsInput[]
  upsert?: Prisma.DBGenreUpsertWithWhereUniqueWithoutArtistsInput | Prisma.DBGenreUpsertWithWhereUniqueWithoutArtistsInput[]
  set?: Prisma.DBGenreWhereUniqueInput | Prisma.DBGenreWhereUniqueInput[]
  disconnect?: Prisma.DBGenreWhereUniqueInput | Prisma.DBGenreWhereUniqueInput[]
  delete?: Prisma.DBGenreWhereUniqueInput | Prisma.DBGenreWhereUniqueInput[]
  connect?: Prisma.DBGenreWhereUniqueInput | Prisma.DBGenreWhereUniqueInput[]
  update?: Prisma.DBGenreUpdateWithWhereUniqueWithoutArtistsInput | Prisma.DBGenreUpdateWithWhereUniqueWithoutArtistsInput[]
  updateMany?: Prisma.DBGenreUpdateManyWithWhereWithoutArtistsInput | Prisma.DBGenreUpdateManyWithWhereWithoutArtistsInput[]
  deleteMany?: Prisma.DBGenreScalarWhereInput | Prisma.DBGenreScalarWhereInput[]
}

export type DBGenreUncheckedUpdateManyWithoutArtistsNestedInput = {
  create?: Prisma.XOR<Prisma.DBGenreCreateWithoutArtistsInput, Prisma.DBGenreUncheckedCreateWithoutArtistsInput> | Prisma.DBGenreCreateWithoutArtistsInput[] | Prisma.DBGenreUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBGenreCreateOrConnectWithoutArtistsInput | Prisma.DBGenreCreateOrConnectWithoutArtistsInput[]
  upsert?: Prisma.DBGenreUpsertWithWhereUniqueWithoutArtistsInput | Prisma.DBGenreUpsertWithWhereUniqueWithoutArtistsInput[]
  set?: Prisma.DBGenreWhereUniqueInput | Prisma.DBGenreWhereUniqueInput[]
  disconnect?: Prisma.DBGenreWhereUniqueInput | Prisma.DBGenreWhereUniqueInput[]
  delete?: Prisma.DBGenreWhereUniqueInput | Prisma.DBGenreWhereUniqueInput[]
  connect?: Prisma.DBGenreWhereUniqueInput | Prisma.DBGenreWhereUniqueInput[]
  update?: Prisma.DBGenreUpdateWithWhereUniqueWithoutArtistsInput | Prisma.DBGenreUpdateWithWhereUniqueWithoutArtistsInput[]
  updateMany?: Prisma.DBGenreUpdateManyWithWhereWithoutArtistsInput | Prisma.DBGenreUpdateManyWithWhereWithoutArtistsInput[]
  deleteMany?: Prisma.DBGenreScalarWhereInput | Prisma.DBGenreScalarWhereInput[]
}

export type DBGenreCreateWithoutArtistsInput = {
  id?: string
  name: string
}

export type DBGenreUncheckedCreateWithoutArtistsInput = {
  id?: string
  name: string
}

export type DBGenreCreateOrConnectWithoutArtistsInput = {
  where: Prisma.DBGenreWhereUniqueInput
  create: Prisma.XOR<Prisma.DBGenreCreateWithoutArtistsInput, Prisma.DBGenreUncheckedCreateWithoutArtistsInput>
}

export type DBGenreUpsertWithWhereUniqueWithoutArtistsInput = {
  where: Prisma.DBGenreWhereUniqueInput
  update: Prisma.XOR<Prisma.DBGenreUpdateWithoutArtistsInput, Prisma.DBGenreUncheckedUpdateWithoutArtistsInput>
  create: Prisma.XOR<Prisma.DBGenreCreateWithoutArtistsInput, Prisma.DBGenreUncheckedCreateWithoutArtistsInput>
}

export type DBGenreUpdateWithWhereUniqueWithoutArtistsInput = {
  where: Prisma.DBGenreWhereUniqueInput
  data: Prisma.XOR<Prisma.DBGenreUpdateWithoutArtistsInput, Prisma.DBGenreUncheckedUpdateWithoutArtistsInput>
}

export type DBGenreUpdateManyWithWhereWithoutArtistsInput = {
  where: Prisma.DBGenreScalarWhereInput
  data: Prisma.XOR<Prisma.DBGenreUpdateManyMutationInput, Prisma.DBGenreUncheckedUpdateManyWithoutArtistsInput>
}

export type DBGenreScalarWhereInput = {
  AND?: Prisma.DBGenreScalarWhereInput | Prisma.DBGenreScalarWhereInput[]
  OR?: Prisma.DBGenreScalarWhereInput[]
  NOT?: Prisma.DBGenreScalarWhereInput | Prisma.DBGenreScalarWhereInput[]
  id?: Prisma.StringFilter<"DBGenre"> | string
  name?: Prisma.StringFilter<"DBGenre"> | string
}

export type DBGenreUpdateWithoutArtistsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBGenreUncheckedUpdateWithoutArtistsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DBGenreUncheckedUpdateManyWithoutArtistsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type DBGenreCountOutputType
 */

export type DBGenreCountOutputType = {
  artists: number
}

export type DBGenreCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  artists?: boolean | DBGenreCountOutputTypeCountArtistsArgs
}

/**
 * DBGenreCountOutputType without action
 */
export type DBGenreCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenreCountOutputType
   */
  select?: Prisma.DBGenreCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DBGenreCountOutputType without action
 */
export type DBGenreCountOutputTypeCountArtistsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBArtistWhereInput
}


export type DBGenreSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  artists?: boolean | Prisma.DBGenre$artistsArgs<ExtArgs>
  _count?: boolean | Prisma.DBGenreCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBGenre"]>

export type DBGenreSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["dBGenre"]>

export type DBGenreSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["dBGenre"]>

export type DBGenreSelectScalar = {
  id?: boolean
  name?: boolean
}

export type DBGenreOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["dBGenre"]>
export type DBGenreInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  artists?: boolean | Prisma.DBGenre$artistsArgs<ExtArgs>
  _count?: boolean | Prisma.DBGenreCountOutputTypeDefaultArgs<ExtArgs>
}
export type DBGenreIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DBGenreIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DBGenrePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBGenre"
  objects: {
    /**
     * *
     *    * Artists associated with this genre
     */
    artists: Prisma.$DBArtistPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * *
     *    * Identifiers
     */
    id: string
    /**
     * *
     *    * Metadata
     */
    name: string
  }, ExtArgs["result"]["dBGenre"]>
  composites: {}
}

export type DBGenreGetPayload<S extends boolean | null | undefined | DBGenreDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBGenrePayload, S>

export type DBGenreCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBGenreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBGenreCountAggregateInputType | true
  }

export interface DBGenreDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBGenre'], meta: { name: 'DBGenre' } }
  /**
   * Find zero or one DBGenre that matches the filter.
   * @param {DBGenreFindUniqueArgs} args - Arguments to find a DBGenre
   * @example
   * // Get one DBGenre
   * const dBGenre = await prisma.dBGenre.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBGenreFindUniqueArgs>(args: Prisma.SelectSubset<T, DBGenreFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBGenreClient<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBGenre that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBGenreFindUniqueOrThrowArgs} args - Arguments to find a DBGenre
   * @example
   * // Get one DBGenre
   * const dBGenre = await prisma.dBGenre.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBGenreFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBGenreFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBGenreClient<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBGenre that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBGenreFindFirstArgs} args - Arguments to find a DBGenre
   * @example
   * // Get one DBGenre
   * const dBGenre = await prisma.dBGenre.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBGenreFindFirstArgs>(args?: Prisma.SelectSubset<T, DBGenreFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBGenreClient<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBGenre that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBGenreFindFirstOrThrowArgs} args - Arguments to find a DBGenre
   * @example
   * // Get one DBGenre
   * const dBGenre = await prisma.dBGenre.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBGenreFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBGenreFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBGenreClient<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBGenres that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBGenreFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBGenres
   * const dBGenres = await prisma.dBGenre.findMany()
   * 
   * // Get first 10 DBGenres
   * const dBGenres = await prisma.dBGenre.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dBGenreWithIdOnly = await prisma.dBGenre.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DBGenreFindManyArgs>(args?: Prisma.SelectSubset<T, DBGenreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBGenre.
   * @param {DBGenreCreateArgs} args - Arguments to create a DBGenre.
   * @example
   * // Create one DBGenre
   * const DBGenre = await prisma.dBGenre.create({
   *   data: {
   *     // ... data to create a DBGenre
   *   }
   * })
   * 
   */
  create<T extends DBGenreCreateArgs>(args: Prisma.SelectSubset<T, DBGenreCreateArgs<ExtArgs>>): Prisma.Prisma__DBGenreClient<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBGenres.
   * @param {DBGenreCreateManyArgs} args - Arguments to create many DBGenres.
   * @example
   * // Create many DBGenres
   * const dBGenre = await prisma.dBGenre.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBGenreCreateManyArgs>(args?: Prisma.SelectSubset<T, DBGenreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBGenres and returns the data saved in the database.
   * @param {DBGenreCreateManyAndReturnArgs} args - Arguments to create many DBGenres.
   * @example
   * // Create many DBGenres
   * const dBGenre = await prisma.dBGenre.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBGenres and only return the `id`
   * const dBGenreWithIdOnly = await prisma.dBGenre.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBGenreCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBGenreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBGenre.
   * @param {DBGenreDeleteArgs} args - Arguments to delete one DBGenre.
   * @example
   * // Delete one DBGenre
   * const DBGenre = await prisma.dBGenre.delete({
   *   where: {
   *     // ... filter to delete one DBGenre
   *   }
   * })
   * 
   */
  delete<T extends DBGenreDeleteArgs>(args: Prisma.SelectSubset<T, DBGenreDeleteArgs<ExtArgs>>): Prisma.Prisma__DBGenreClient<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBGenre.
   * @param {DBGenreUpdateArgs} args - Arguments to update one DBGenre.
   * @example
   * // Update one DBGenre
   * const dBGenre = await prisma.dBGenre.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBGenreUpdateArgs>(args: Prisma.SelectSubset<T, DBGenreUpdateArgs<ExtArgs>>): Prisma.Prisma__DBGenreClient<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBGenres.
   * @param {DBGenreDeleteManyArgs} args - Arguments to filter DBGenres to delete.
   * @example
   * // Delete a few DBGenres
   * const { count } = await prisma.dBGenre.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBGenreDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBGenreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBGenres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBGenreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBGenres
   * const dBGenre = await prisma.dBGenre.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBGenreUpdateManyArgs>(args: Prisma.SelectSubset<T, DBGenreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBGenres and returns the data updated in the database.
   * @param {DBGenreUpdateManyAndReturnArgs} args - Arguments to update many DBGenres.
   * @example
   * // Update many DBGenres
   * const dBGenre = await prisma.dBGenre.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBGenres and only return the `id`
   * const dBGenreWithIdOnly = await prisma.dBGenre.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBGenreUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBGenreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBGenre.
   * @param {DBGenreUpsertArgs} args - Arguments to update or create a DBGenre.
   * @example
   * // Update or create a DBGenre
   * const dBGenre = await prisma.dBGenre.upsert({
   *   create: {
   *     // ... data to create a DBGenre
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBGenre we want to update
   *   }
   * })
   */
  upsert<T extends DBGenreUpsertArgs>(args: Prisma.SelectSubset<T, DBGenreUpsertArgs<ExtArgs>>): Prisma.Prisma__DBGenreClient<runtime.Types.Result.GetResult<Prisma.$DBGenrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBGenres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBGenreCountArgs} args - Arguments to filter DBGenres to count.
   * @example
   * // Count the number of DBGenres
   * const count = await prisma.dBGenre.count({
   *   where: {
   *     // ... the filter for the DBGenres we want to count
   *   }
   * })
  **/
  count<T extends DBGenreCountArgs>(
    args?: Prisma.Subset<T, DBGenreCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBGenreCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBGenre.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBGenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBGenreAggregateArgs>(args: Prisma.Subset<T, DBGenreAggregateArgs>): Prisma.PrismaPromise<GetDBGenreAggregateType<T>>

  /**
   * Group by DBGenre.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBGenreGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBGenreGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBGenreGroupByArgs['orderBy'] }
      : { orderBy?: DBGenreGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBGenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBGenre model
 */
readonly fields: DBGenreFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBGenre.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBGenreClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  artists<T extends Prisma.DBGenre$artistsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBGenre$artistsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBGenre model
 */
export interface DBGenreFieldRefs {
  readonly id: Prisma.FieldRef<"DBGenre", 'String'>
  readonly name: Prisma.FieldRef<"DBGenre", 'String'>
}
    

// Custom InputTypes
/**
 * DBGenre findUnique
 */
export type DBGenreFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
  /**
   * Filter, which DBGenre to fetch.
   */
  where: Prisma.DBGenreWhereUniqueInput
}

/**
 * DBGenre findUniqueOrThrow
 */
export type DBGenreFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
  /**
   * Filter, which DBGenre to fetch.
   */
  where: Prisma.DBGenreWhereUniqueInput
}

/**
 * DBGenre findFirst
 */
export type DBGenreFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
  /**
   * Filter, which DBGenre to fetch.
   */
  where?: Prisma.DBGenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBGenres to fetch.
   */
  orderBy?: Prisma.DBGenreOrderByWithRelationInput | Prisma.DBGenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBGenres.
   */
  cursor?: Prisma.DBGenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBGenres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBGenres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBGenres.
   */
  distinct?: Prisma.DBGenreScalarFieldEnum | Prisma.DBGenreScalarFieldEnum[]
}

/**
 * DBGenre findFirstOrThrow
 */
export type DBGenreFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
  /**
   * Filter, which DBGenre to fetch.
   */
  where?: Prisma.DBGenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBGenres to fetch.
   */
  orderBy?: Prisma.DBGenreOrderByWithRelationInput | Prisma.DBGenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBGenres.
   */
  cursor?: Prisma.DBGenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBGenres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBGenres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBGenres.
   */
  distinct?: Prisma.DBGenreScalarFieldEnum | Prisma.DBGenreScalarFieldEnum[]
}

/**
 * DBGenre findMany
 */
export type DBGenreFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
  /**
   * Filter, which DBGenres to fetch.
   */
  where?: Prisma.DBGenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBGenres to fetch.
   */
  orderBy?: Prisma.DBGenreOrderByWithRelationInput | Prisma.DBGenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBGenres.
   */
  cursor?: Prisma.DBGenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBGenres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBGenres.
   */
  skip?: number
  distinct?: Prisma.DBGenreScalarFieldEnum | Prisma.DBGenreScalarFieldEnum[]
}

/**
 * DBGenre create
 */
export type DBGenreCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
  /**
   * The data needed to create a DBGenre.
   */
  data: Prisma.XOR<Prisma.DBGenreCreateInput, Prisma.DBGenreUncheckedCreateInput>
}

/**
 * DBGenre createMany
 */
export type DBGenreCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBGenres.
   */
  data: Prisma.DBGenreCreateManyInput | Prisma.DBGenreCreateManyInput[]
}

/**
 * DBGenre createManyAndReturn
 */
export type DBGenreCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * The data used to create many DBGenres.
   */
  data: Prisma.DBGenreCreateManyInput | Prisma.DBGenreCreateManyInput[]
}

/**
 * DBGenre update
 */
export type DBGenreUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
  /**
   * The data needed to update a DBGenre.
   */
  data: Prisma.XOR<Prisma.DBGenreUpdateInput, Prisma.DBGenreUncheckedUpdateInput>
  /**
   * Choose, which DBGenre to update.
   */
  where: Prisma.DBGenreWhereUniqueInput
}

/**
 * DBGenre updateMany
 */
export type DBGenreUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBGenres.
   */
  data: Prisma.XOR<Prisma.DBGenreUpdateManyMutationInput, Prisma.DBGenreUncheckedUpdateManyInput>
  /**
   * Filter which DBGenres to update
   */
  where?: Prisma.DBGenreWhereInput
  /**
   * Limit how many DBGenres to update.
   */
  limit?: number
}

/**
 * DBGenre updateManyAndReturn
 */
export type DBGenreUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * The data used to update DBGenres.
   */
  data: Prisma.XOR<Prisma.DBGenreUpdateManyMutationInput, Prisma.DBGenreUncheckedUpdateManyInput>
  /**
   * Filter which DBGenres to update
   */
  where?: Prisma.DBGenreWhereInput
  /**
   * Limit how many DBGenres to update.
   */
  limit?: number
}

/**
 * DBGenre upsert
 */
export type DBGenreUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
  /**
   * The filter to search for the DBGenre to update in case it exists.
   */
  where: Prisma.DBGenreWhereUniqueInput
  /**
   * In case the DBGenre found by the `where` argument doesn't exist, create a new DBGenre with this data.
   */
  create: Prisma.XOR<Prisma.DBGenreCreateInput, Prisma.DBGenreUncheckedCreateInput>
  /**
   * In case the DBGenre was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBGenreUpdateInput, Prisma.DBGenreUncheckedUpdateInput>
}

/**
 * DBGenre delete
 */
export type DBGenreDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
  /**
   * Filter which DBGenre to delete.
   */
  where: Prisma.DBGenreWhereUniqueInput
}

/**
 * DBGenre deleteMany
 */
export type DBGenreDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBGenres to delete
   */
  where?: Prisma.DBGenreWhereInput
  /**
   * Limit how many DBGenres to delete.
   */
  limit?: number
}

/**
 * DBGenre.artists
 */
export type DBGenre$artistsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  where?: Prisma.DBArtistWhereInput
  orderBy?: Prisma.DBArtistOrderByWithRelationInput | Prisma.DBArtistOrderByWithRelationInput[]
  cursor?: Prisma.DBArtistWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBArtistScalarFieldEnum | Prisma.DBArtistScalarFieldEnum[]
}

/**
 * DBGenre without action
 */
export type DBGenreDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBGenre
   */
  select?: Prisma.DBGenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBGenre
   */
  omit?: Prisma.DBGenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBGenreInclude<ExtArgs> | null
}
