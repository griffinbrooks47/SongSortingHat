
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBTrack` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBTrack
 * *
 *  * Track
 */
export type DBTrackModel = runtime.Types.Result.DefaultSelection<Prisma.$DBTrackPayload>

export type AggregateDBTrack = {
  _count: DBTrackCountAggregateOutputType | null
  _min: DBTrackMinAggregateOutputType | null
  _max: DBTrackMaxAggregateOutputType | null
}

export type DBTrackMinAggregateOutputType = {
  id: string | null
  spotifyId: string | null
  title: string | null
  updatedAt: Date | null
  albumTitle: string | null
  albumId: string | null
}

export type DBTrackMaxAggregateOutputType = {
  id: string | null
  spotifyId: string | null
  title: string | null
  updatedAt: Date | null
  albumTitle: string | null
  albumId: string | null
}

export type DBTrackCountAggregateOutputType = {
  id: number
  spotifyId: number
  title: number
  updatedAt: number
  albumTitle: number
  albumId: number
  _all: number
}


export type DBTrackMinAggregateInputType = {
  id?: true
  spotifyId?: true
  title?: true
  updatedAt?: true
  albumTitle?: true
  albumId?: true
}

export type DBTrackMaxAggregateInputType = {
  id?: true
  spotifyId?: true
  title?: true
  updatedAt?: true
  albumTitle?: true
  albumId?: true
}

export type DBTrackCountAggregateInputType = {
  id?: true
  spotifyId?: true
  title?: true
  updatedAt?: true
  albumTitle?: true
  albumId?: true
  _all?: true
}

export type DBTrackAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBTrack to aggregate.
   */
  where?: Prisma.DBTrackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBTracks to fetch.
   */
  orderBy?: Prisma.DBTrackOrderByWithRelationInput | Prisma.DBTrackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBTrackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBTracks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBTracks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBTracks
  **/
  _count?: true | DBTrackCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBTrackMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBTrackMaxAggregateInputType
}

export type GetDBTrackAggregateType<T extends DBTrackAggregateArgs> = {
      [P in keyof T & keyof AggregateDBTrack]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBTrack[P]>
    : Prisma.GetScalarType<T[P], AggregateDBTrack[P]>
}




export type DBTrackGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBTrackWhereInput
  orderBy?: Prisma.DBTrackOrderByWithAggregationInput | Prisma.DBTrackOrderByWithAggregationInput[]
  by: Prisma.DBTrackScalarFieldEnum[] | Prisma.DBTrackScalarFieldEnum
  having?: Prisma.DBTrackScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBTrackCountAggregateInputType | true
  _min?: DBTrackMinAggregateInputType
  _max?: DBTrackMaxAggregateInputType
}

export type DBTrackGroupByOutputType = {
  id: string
  spotifyId: string
  title: string
  updatedAt: Date
  albumTitle: string | null
  albumId: string | null
  _count: DBTrackCountAggregateOutputType | null
  _min: DBTrackMinAggregateOutputType | null
  _max: DBTrackMaxAggregateOutputType | null
}

type GetDBTrackGroupByPayload<T extends DBTrackGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBTrackGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBTrackGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBTrackGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBTrackGroupByOutputType[P]>
      }
    >
  >



export type DBTrackWhereInput = {
  AND?: Prisma.DBTrackWhereInput | Prisma.DBTrackWhereInput[]
  OR?: Prisma.DBTrackWhereInput[]
  NOT?: Prisma.DBTrackWhereInput | Prisma.DBTrackWhereInput[]
  id?: Prisma.StringFilter<"DBTrack"> | string
  spotifyId?: Prisma.StringFilter<"DBTrack"> | string
  title?: Prisma.StringFilter<"DBTrack"> | string
  updatedAt?: Prisma.DateTimeFilter<"DBTrack"> | Date | string
  albumTitle?: Prisma.StringNullableFilter<"DBTrack"> | string | null
  albumId?: Prisma.StringNullableFilter<"DBTrack"> | string | null
  artists?: Prisma.DBArtistListRelationFilter
  album?: Prisma.XOR<Prisma.DBAlbumNullableScalarRelationFilter, Prisma.DBAlbumWhereInput> | null
  images?: Prisma.DBAlbumImgListRelationFilter
  sortings?: Prisma.DBSortingListRelationFilter
}

export type DBTrackOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  albumTitle?: Prisma.SortOrderInput | Prisma.SortOrder
  albumId?: Prisma.SortOrderInput | Prisma.SortOrder
  artists?: Prisma.DBArtistOrderByRelationAggregateInput
  album?: Prisma.DBAlbumOrderByWithRelationInput
  images?: Prisma.DBAlbumImgOrderByRelationAggregateInput
  sortings?: Prisma.DBSortingOrderByRelationAggregateInput
}

export type DBTrackWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  spotifyId?: string
  AND?: Prisma.DBTrackWhereInput | Prisma.DBTrackWhereInput[]
  OR?: Prisma.DBTrackWhereInput[]
  NOT?: Prisma.DBTrackWhereInput | Prisma.DBTrackWhereInput[]
  title?: Prisma.StringFilter<"DBTrack"> | string
  updatedAt?: Prisma.DateTimeFilter<"DBTrack"> | Date | string
  albumTitle?: Prisma.StringNullableFilter<"DBTrack"> | string | null
  albumId?: Prisma.StringNullableFilter<"DBTrack"> | string | null
  artists?: Prisma.DBArtistListRelationFilter
  album?: Prisma.XOR<Prisma.DBAlbumNullableScalarRelationFilter, Prisma.DBAlbumWhereInput> | null
  images?: Prisma.DBAlbumImgListRelationFilter
  sortings?: Prisma.DBSortingListRelationFilter
}, "id" | "spotifyId">

export type DBTrackOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  albumTitle?: Prisma.SortOrderInput | Prisma.SortOrder
  albumId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.DBTrackCountOrderByAggregateInput
  _max?: Prisma.DBTrackMaxOrderByAggregateInput
  _min?: Prisma.DBTrackMinOrderByAggregateInput
}

export type DBTrackScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBTrackScalarWhereWithAggregatesInput | Prisma.DBTrackScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBTrackScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBTrackScalarWhereWithAggregatesInput | Prisma.DBTrackScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DBTrack"> | string
  spotifyId?: Prisma.StringWithAggregatesFilter<"DBTrack"> | string
  title?: Prisma.StringWithAggregatesFilter<"DBTrack"> | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DBTrack"> | Date | string
  albumTitle?: Prisma.StringNullableWithAggregatesFilter<"DBTrack"> | string | null
  albumId?: Prisma.StringNullableWithAggregatesFilter<"DBTrack"> | string | null
}

export type DBTrackCreateInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  artists?: Prisma.DBArtistCreateNestedManyWithoutTracksInput
  album?: Prisma.DBAlbumCreateNestedOneWithoutTracksInput
  images?: Prisma.DBAlbumImgCreateNestedManyWithoutTracksInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutTracksInput
}

export type DBTrackUncheckedCreateInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  albumId?: string | null
  artists?: Prisma.DBArtistUncheckedCreateNestedManyWithoutTracksInput
  images?: Prisma.DBAlbumImgUncheckedCreateNestedManyWithoutTracksInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutTracksInput
}

export type DBTrackUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artists?: Prisma.DBArtistUpdateManyWithoutTracksNestedInput
  album?: Prisma.DBAlbumUpdateOneWithoutTracksNestedInput
  images?: Prisma.DBAlbumImgUpdateManyWithoutTracksNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutTracksNestedInput
}

export type DBTrackUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artists?: Prisma.DBArtistUncheckedUpdateManyWithoutTracksNestedInput
  images?: Prisma.DBAlbumImgUncheckedUpdateManyWithoutTracksNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutTracksNestedInput
}

export type DBTrackCreateManyInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  albumId?: string | null
}

export type DBTrackUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type DBTrackUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type DBTrackListRelationFilter = {
  every?: Prisma.DBTrackWhereInput
  some?: Prisma.DBTrackWhereInput
  none?: Prisma.DBTrackWhereInput
}

export type DBTrackOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DBTrackCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  albumTitle?: Prisma.SortOrder
  albumId?: Prisma.SortOrder
}

export type DBTrackMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  albumTitle?: Prisma.SortOrder
  albumId?: Prisma.SortOrder
}

export type DBTrackMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  spotifyId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  albumTitle?: Prisma.SortOrder
  albumId?: Prisma.SortOrder
}

export type DBTrackCreateNestedManyWithoutAlbumInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutAlbumInput, Prisma.DBTrackUncheckedCreateWithoutAlbumInput> | Prisma.DBTrackCreateWithoutAlbumInput[] | Prisma.DBTrackUncheckedCreateWithoutAlbumInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutAlbumInput | Prisma.DBTrackCreateOrConnectWithoutAlbumInput[]
  createMany?: Prisma.DBTrackCreateManyAlbumInputEnvelope
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
}

export type DBTrackUncheckedCreateNestedManyWithoutAlbumInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutAlbumInput, Prisma.DBTrackUncheckedCreateWithoutAlbumInput> | Prisma.DBTrackCreateWithoutAlbumInput[] | Prisma.DBTrackUncheckedCreateWithoutAlbumInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutAlbumInput | Prisma.DBTrackCreateOrConnectWithoutAlbumInput[]
  createMany?: Prisma.DBTrackCreateManyAlbumInputEnvelope
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
}

export type DBTrackUpdateManyWithoutAlbumNestedInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutAlbumInput, Prisma.DBTrackUncheckedCreateWithoutAlbumInput> | Prisma.DBTrackCreateWithoutAlbumInput[] | Prisma.DBTrackUncheckedCreateWithoutAlbumInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutAlbumInput | Prisma.DBTrackCreateOrConnectWithoutAlbumInput[]
  upsert?: Prisma.DBTrackUpsertWithWhereUniqueWithoutAlbumInput | Prisma.DBTrackUpsertWithWhereUniqueWithoutAlbumInput[]
  createMany?: Prisma.DBTrackCreateManyAlbumInputEnvelope
  set?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  disconnect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  delete?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  update?: Prisma.DBTrackUpdateWithWhereUniqueWithoutAlbumInput | Prisma.DBTrackUpdateWithWhereUniqueWithoutAlbumInput[]
  updateMany?: Prisma.DBTrackUpdateManyWithWhereWithoutAlbumInput | Prisma.DBTrackUpdateManyWithWhereWithoutAlbumInput[]
  deleteMany?: Prisma.DBTrackScalarWhereInput | Prisma.DBTrackScalarWhereInput[]
}

export type DBTrackUncheckedUpdateManyWithoutAlbumNestedInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutAlbumInput, Prisma.DBTrackUncheckedCreateWithoutAlbumInput> | Prisma.DBTrackCreateWithoutAlbumInput[] | Prisma.DBTrackUncheckedCreateWithoutAlbumInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutAlbumInput | Prisma.DBTrackCreateOrConnectWithoutAlbumInput[]
  upsert?: Prisma.DBTrackUpsertWithWhereUniqueWithoutAlbumInput | Prisma.DBTrackUpsertWithWhereUniqueWithoutAlbumInput[]
  createMany?: Prisma.DBTrackCreateManyAlbumInputEnvelope
  set?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  disconnect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  delete?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  update?: Prisma.DBTrackUpdateWithWhereUniqueWithoutAlbumInput | Prisma.DBTrackUpdateWithWhereUniqueWithoutAlbumInput[]
  updateMany?: Prisma.DBTrackUpdateManyWithWhereWithoutAlbumInput | Prisma.DBTrackUpdateManyWithWhereWithoutAlbumInput[]
  deleteMany?: Prisma.DBTrackScalarWhereInput | Prisma.DBTrackScalarWhereInput[]
}

export type DBTrackCreateNestedManyWithoutArtistsInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutArtistsInput, Prisma.DBTrackUncheckedCreateWithoutArtistsInput> | Prisma.DBTrackCreateWithoutArtistsInput[] | Prisma.DBTrackUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutArtistsInput | Prisma.DBTrackCreateOrConnectWithoutArtistsInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
}

export type DBTrackUncheckedCreateNestedManyWithoutArtistsInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutArtistsInput, Prisma.DBTrackUncheckedCreateWithoutArtistsInput> | Prisma.DBTrackCreateWithoutArtistsInput[] | Prisma.DBTrackUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutArtistsInput | Prisma.DBTrackCreateOrConnectWithoutArtistsInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
}

export type DBTrackUpdateManyWithoutArtistsNestedInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutArtistsInput, Prisma.DBTrackUncheckedCreateWithoutArtistsInput> | Prisma.DBTrackCreateWithoutArtistsInput[] | Prisma.DBTrackUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutArtistsInput | Prisma.DBTrackCreateOrConnectWithoutArtistsInput[]
  upsert?: Prisma.DBTrackUpsertWithWhereUniqueWithoutArtistsInput | Prisma.DBTrackUpsertWithWhereUniqueWithoutArtistsInput[]
  set?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  disconnect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  delete?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  update?: Prisma.DBTrackUpdateWithWhereUniqueWithoutArtistsInput | Prisma.DBTrackUpdateWithWhereUniqueWithoutArtistsInput[]
  updateMany?: Prisma.DBTrackUpdateManyWithWhereWithoutArtistsInput | Prisma.DBTrackUpdateManyWithWhereWithoutArtistsInput[]
  deleteMany?: Prisma.DBTrackScalarWhereInput | Prisma.DBTrackScalarWhereInput[]
}

export type DBTrackUncheckedUpdateManyWithoutArtistsNestedInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutArtistsInput, Prisma.DBTrackUncheckedCreateWithoutArtistsInput> | Prisma.DBTrackCreateWithoutArtistsInput[] | Prisma.DBTrackUncheckedCreateWithoutArtistsInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutArtistsInput | Prisma.DBTrackCreateOrConnectWithoutArtistsInput[]
  upsert?: Prisma.DBTrackUpsertWithWhereUniqueWithoutArtistsInput | Prisma.DBTrackUpsertWithWhereUniqueWithoutArtistsInput[]
  set?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  disconnect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  delete?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  update?: Prisma.DBTrackUpdateWithWhereUniqueWithoutArtistsInput | Prisma.DBTrackUpdateWithWhereUniqueWithoutArtistsInput[]
  updateMany?: Prisma.DBTrackUpdateManyWithWhereWithoutArtistsInput | Prisma.DBTrackUpdateManyWithWhereWithoutArtistsInput[]
  deleteMany?: Prisma.DBTrackScalarWhereInput | Prisma.DBTrackScalarWhereInput[]
}

export type DBTrackCreateNestedManyWithoutImagesInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutImagesInput, Prisma.DBTrackUncheckedCreateWithoutImagesInput> | Prisma.DBTrackCreateWithoutImagesInput[] | Prisma.DBTrackUncheckedCreateWithoutImagesInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutImagesInput | Prisma.DBTrackCreateOrConnectWithoutImagesInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
}

export type DBTrackUncheckedCreateNestedManyWithoutImagesInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutImagesInput, Prisma.DBTrackUncheckedCreateWithoutImagesInput> | Prisma.DBTrackCreateWithoutImagesInput[] | Prisma.DBTrackUncheckedCreateWithoutImagesInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutImagesInput | Prisma.DBTrackCreateOrConnectWithoutImagesInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
}

export type DBTrackUpdateManyWithoutImagesNestedInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutImagesInput, Prisma.DBTrackUncheckedCreateWithoutImagesInput> | Prisma.DBTrackCreateWithoutImagesInput[] | Prisma.DBTrackUncheckedCreateWithoutImagesInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutImagesInput | Prisma.DBTrackCreateOrConnectWithoutImagesInput[]
  upsert?: Prisma.DBTrackUpsertWithWhereUniqueWithoutImagesInput | Prisma.DBTrackUpsertWithWhereUniqueWithoutImagesInput[]
  set?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  disconnect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  delete?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  update?: Prisma.DBTrackUpdateWithWhereUniqueWithoutImagesInput | Prisma.DBTrackUpdateWithWhereUniqueWithoutImagesInput[]
  updateMany?: Prisma.DBTrackUpdateManyWithWhereWithoutImagesInput | Prisma.DBTrackUpdateManyWithWhereWithoutImagesInput[]
  deleteMany?: Prisma.DBTrackScalarWhereInput | Prisma.DBTrackScalarWhereInput[]
}

export type DBTrackUncheckedUpdateManyWithoutImagesNestedInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutImagesInput, Prisma.DBTrackUncheckedCreateWithoutImagesInput> | Prisma.DBTrackCreateWithoutImagesInput[] | Prisma.DBTrackUncheckedCreateWithoutImagesInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutImagesInput | Prisma.DBTrackCreateOrConnectWithoutImagesInput[]
  upsert?: Prisma.DBTrackUpsertWithWhereUniqueWithoutImagesInput | Prisma.DBTrackUpsertWithWhereUniqueWithoutImagesInput[]
  set?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  disconnect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  delete?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  update?: Prisma.DBTrackUpdateWithWhereUniqueWithoutImagesInput | Prisma.DBTrackUpdateWithWhereUniqueWithoutImagesInput[]
  updateMany?: Prisma.DBTrackUpdateManyWithWhereWithoutImagesInput | Prisma.DBTrackUpdateManyWithWhereWithoutImagesInput[]
  deleteMany?: Prisma.DBTrackScalarWhereInput | Prisma.DBTrackScalarWhereInput[]
}

export type DBTrackCreateNestedManyWithoutSortingsInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutSortingsInput, Prisma.DBTrackUncheckedCreateWithoutSortingsInput> | Prisma.DBTrackCreateWithoutSortingsInput[] | Prisma.DBTrackUncheckedCreateWithoutSortingsInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutSortingsInput | Prisma.DBTrackCreateOrConnectWithoutSortingsInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
}

export type DBTrackUncheckedCreateNestedManyWithoutSortingsInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutSortingsInput, Prisma.DBTrackUncheckedCreateWithoutSortingsInput> | Prisma.DBTrackCreateWithoutSortingsInput[] | Prisma.DBTrackUncheckedCreateWithoutSortingsInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutSortingsInput | Prisma.DBTrackCreateOrConnectWithoutSortingsInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
}

export type DBTrackUpdateManyWithoutSortingsNestedInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutSortingsInput, Prisma.DBTrackUncheckedCreateWithoutSortingsInput> | Prisma.DBTrackCreateWithoutSortingsInput[] | Prisma.DBTrackUncheckedCreateWithoutSortingsInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutSortingsInput | Prisma.DBTrackCreateOrConnectWithoutSortingsInput[]
  upsert?: Prisma.DBTrackUpsertWithWhereUniqueWithoutSortingsInput | Prisma.DBTrackUpsertWithWhereUniqueWithoutSortingsInput[]
  set?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  disconnect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  delete?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  update?: Prisma.DBTrackUpdateWithWhereUniqueWithoutSortingsInput | Prisma.DBTrackUpdateWithWhereUniqueWithoutSortingsInput[]
  updateMany?: Prisma.DBTrackUpdateManyWithWhereWithoutSortingsInput | Prisma.DBTrackUpdateManyWithWhereWithoutSortingsInput[]
  deleteMany?: Prisma.DBTrackScalarWhereInput | Prisma.DBTrackScalarWhereInput[]
}

export type DBTrackUncheckedUpdateManyWithoutSortingsNestedInput = {
  create?: Prisma.XOR<Prisma.DBTrackCreateWithoutSortingsInput, Prisma.DBTrackUncheckedCreateWithoutSortingsInput> | Prisma.DBTrackCreateWithoutSortingsInput[] | Prisma.DBTrackUncheckedCreateWithoutSortingsInput[]
  connectOrCreate?: Prisma.DBTrackCreateOrConnectWithoutSortingsInput | Prisma.DBTrackCreateOrConnectWithoutSortingsInput[]
  upsert?: Prisma.DBTrackUpsertWithWhereUniqueWithoutSortingsInput | Prisma.DBTrackUpsertWithWhereUniqueWithoutSortingsInput[]
  set?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  disconnect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  delete?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  connect?: Prisma.DBTrackWhereUniqueInput | Prisma.DBTrackWhereUniqueInput[]
  update?: Prisma.DBTrackUpdateWithWhereUniqueWithoutSortingsInput | Prisma.DBTrackUpdateWithWhereUniqueWithoutSortingsInput[]
  updateMany?: Prisma.DBTrackUpdateManyWithWhereWithoutSortingsInput | Prisma.DBTrackUpdateManyWithWhereWithoutSortingsInput[]
  deleteMany?: Prisma.DBTrackScalarWhereInput | Prisma.DBTrackScalarWhereInput[]
}

export type DBTrackCreateWithoutAlbumInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  artists?: Prisma.DBArtistCreateNestedManyWithoutTracksInput
  images?: Prisma.DBAlbumImgCreateNestedManyWithoutTracksInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutTracksInput
}

export type DBTrackUncheckedCreateWithoutAlbumInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  artists?: Prisma.DBArtistUncheckedCreateNestedManyWithoutTracksInput
  images?: Prisma.DBAlbumImgUncheckedCreateNestedManyWithoutTracksInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutTracksInput
}

export type DBTrackCreateOrConnectWithoutAlbumInput = {
  where: Prisma.DBTrackWhereUniqueInput
  create: Prisma.XOR<Prisma.DBTrackCreateWithoutAlbumInput, Prisma.DBTrackUncheckedCreateWithoutAlbumInput>
}

export type DBTrackCreateManyAlbumInputEnvelope = {
  data: Prisma.DBTrackCreateManyAlbumInput | Prisma.DBTrackCreateManyAlbumInput[]
}

export type DBTrackUpsertWithWhereUniqueWithoutAlbumInput = {
  where: Prisma.DBTrackWhereUniqueInput
  update: Prisma.XOR<Prisma.DBTrackUpdateWithoutAlbumInput, Prisma.DBTrackUncheckedUpdateWithoutAlbumInput>
  create: Prisma.XOR<Prisma.DBTrackCreateWithoutAlbumInput, Prisma.DBTrackUncheckedCreateWithoutAlbumInput>
}

export type DBTrackUpdateWithWhereUniqueWithoutAlbumInput = {
  where: Prisma.DBTrackWhereUniqueInput
  data: Prisma.XOR<Prisma.DBTrackUpdateWithoutAlbumInput, Prisma.DBTrackUncheckedUpdateWithoutAlbumInput>
}

export type DBTrackUpdateManyWithWhereWithoutAlbumInput = {
  where: Prisma.DBTrackScalarWhereInput
  data: Prisma.XOR<Prisma.DBTrackUpdateManyMutationInput, Prisma.DBTrackUncheckedUpdateManyWithoutAlbumInput>
}

export type DBTrackScalarWhereInput = {
  AND?: Prisma.DBTrackScalarWhereInput | Prisma.DBTrackScalarWhereInput[]
  OR?: Prisma.DBTrackScalarWhereInput[]
  NOT?: Prisma.DBTrackScalarWhereInput | Prisma.DBTrackScalarWhereInput[]
  id?: Prisma.StringFilter<"DBTrack"> | string
  spotifyId?: Prisma.StringFilter<"DBTrack"> | string
  title?: Prisma.StringFilter<"DBTrack"> | string
  updatedAt?: Prisma.DateTimeFilter<"DBTrack"> | Date | string
  albumTitle?: Prisma.StringNullableFilter<"DBTrack"> | string | null
  albumId?: Prisma.StringNullableFilter<"DBTrack"> | string | null
}

export type DBTrackCreateWithoutArtistsInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  album?: Prisma.DBAlbumCreateNestedOneWithoutTracksInput
  images?: Prisma.DBAlbumImgCreateNestedManyWithoutTracksInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutTracksInput
}

export type DBTrackUncheckedCreateWithoutArtistsInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  albumId?: string | null
  images?: Prisma.DBAlbumImgUncheckedCreateNestedManyWithoutTracksInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutTracksInput
}

export type DBTrackCreateOrConnectWithoutArtistsInput = {
  where: Prisma.DBTrackWhereUniqueInput
  create: Prisma.XOR<Prisma.DBTrackCreateWithoutArtistsInput, Prisma.DBTrackUncheckedCreateWithoutArtistsInput>
}

export type DBTrackUpsertWithWhereUniqueWithoutArtistsInput = {
  where: Prisma.DBTrackWhereUniqueInput
  update: Prisma.XOR<Prisma.DBTrackUpdateWithoutArtistsInput, Prisma.DBTrackUncheckedUpdateWithoutArtistsInput>
  create: Prisma.XOR<Prisma.DBTrackCreateWithoutArtistsInput, Prisma.DBTrackUncheckedCreateWithoutArtistsInput>
}

export type DBTrackUpdateWithWhereUniqueWithoutArtistsInput = {
  where: Prisma.DBTrackWhereUniqueInput
  data: Prisma.XOR<Prisma.DBTrackUpdateWithoutArtistsInput, Prisma.DBTrackUncheckedUpdateWithoutArtistsInput>
}

export type DBTrackUpdateManyWithWhereWithoutArtistsInput = {
  where: Prisma.DBTrackScalarWhereInput
  data: Prisma.XOR<Prisma.DBTrackUpdateManyMutationInput, Prisma.DBTrackUncheckedUpdateManyWithoutArtistsInput>
}

export type DBTrackCreateWithoutImagesInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  artists?: Prisma.DBArtistCreateNestedManyWithoutTracksInput
  album?: Prisma.DBAlbumCreateNestedOneWithoutTracksInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutTracksInput
}

export type DBTrackUncheckedCreateWithoutImagesInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  albumId?: string | null
  artists?: Prisma.DBArtistUncheckedCreateNestedManyWithoutTracksInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutTracksInput
}

export type DBTrackCreateOrConnectWithoutImagesInput = {
  where: Prisma.DBTrackWhereUniqueInput
  create: Prisma.XOR<Prisma.DBTrackCreateWithoutImagesInput, Prisma.DBTrackUncheckedCreateWithoutImagesInput>
}

export type DBTrackUpsertWithWhereUniqueWithoutImagesInput = {
  where: Prisma.DBTrackWhereUniqueInput
  update: Prisma.XOR<Prisma.DBTrackUpdateWithoutImagesInput, Prisma.DBTrackUncheckedUpdateWithoutImagesInput>
  create: Prisma.XOR<Prisma.DBTrackCreateWithoutImagesInput, Prisma.DBTrackUncheckedCreateWithoutImagesInput>
}

export type DBTrackUpdateWithWhereUniqueWithoutImagesInput = {
  where: Prisma.DBTrackWhereUniqueInput
  data: Prisma.XOR<Prisma.DBTrackUpdateWithoutImagesInput, Prisma.DBTrackUncheckedUpdateWithoutImagesInput>
}

export type DBTrackUpdateManyWithWhereWithoutImagesInput = {
  where: Prisma.DBTrackScalarWhereInput
  data: Prisma.XOR<Prisma.DBTrackUpdateManyMutationInput, Prisma.DBTrackUncheckedUpdateManyWithoutImagesInput>
}

export type DBTrackCreateWithoutSortingsInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  artists?: Prisma.DBArtistCreateNestedManyWithoutTracksInput
  album?: Prisma.DBAlbumCreateNestedOneWithoutTracksInput
  images?: Prisma.DBAlbumImgCreateNestedManyWithoutTracksInput
}

export type DBTrackUncheckedCreateWithoutSortingsInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
  albumId?: string | null
  artists?: Prisma.DBArtistUncheckedCreateNestedManyWithoutTracksInput
  images?: Prisma.DBAlbumImgUncheckedCreateNestedManyWithoutTracksInput
}

export type DBTrackCreateOrConnectWithoutSortingsInput = {
  where: Prisma.DBTrackWhereUniqueInput
  create: Prisma.XOR<Prisma.DBTrackCreateWithoutSortingsInput, Prisma.DBTrackUncheckedCreateWithoutSortingsInput>
}

export type DBTrackUpsertWithWhereUniqueWithoutSortingsInput = {
  where: Prisma.DBTrackWhereUniqueInput
  update: Prisma.XOR<Prisma.DBTrackUpdateWithoutSortingsInput, Prisma.DBTrackUncheckedUpdateWithoutSortingsInput>
  create: Prisma.XOR<Prisma.DBTrackCreateWithoutSortingsInput, Prisma.DBTrackUncheckedCreateWithoutSortingsInput>
}

export type DBTrackUpdateWithWhereUniqueWithoutSortingsInput = {
  where: Prisma.DBTrackWhereUniqueInput
  data: Prisma.XOR<Prisma.DBTrackUpdateWithoutSortingsInput, Prisma.DBTrackUncheckedUpdateWithoutSortingsInput>
}

export type DBTrackUpdateManyWithWhereWithoutSortingsInput = {
  where: Prisma.DBTrackScalarWhereInput
  data: Prisma.XOR<Prisma.DBTrackUpdateManyMutationInput, Prisma.DBTrackUncheckedUpdateManyWithoutSortingsInput>
}

export type DBTrackCreateManyAlbumInput = {
  id?: string
  spotifyId: string
  title: string
  updatedAt?: Date | string
  albumTitle?: string | null
}

export type DBTrackUpdateWithoutAlbumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artists?: Prisma.DBArtistUpdateManyWithoutTracksNestedInput
  images?: Prisma.DBAlbumImgUpdateManyWithoutTracksNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutTracksNestedInput
}

export type DBTrackUncheckedUpdateWithoutAlbumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artists?: Prisma.DBArtistUncheckedUpdateManyWithoutTracksNestedInput
  images?: Prisma.DBAlbumImgUncheckedUpdateManyWithoutTracksNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutTracksNestedInput
}

export type DBTrackUncheckedUpdateManyWithoutAlbumInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type DBTrackUpdateWithoutArtistsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  album?: Prisma.DBAlbumUpdateOneWithoutTracksNestedInput
  images?: Prisma.DBAlbumImgUpdateManyWithoutTracksNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutTracksNestedInput
}

export type DBTrackUncheckedUpdateWithoutArtistsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  images?: Prisma.DBAlbumImgUncheckedUpdateManyWithoutTracksNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutTracksNestedInput
}

export type DBTrackUncheckedUpdateManyWithoutArtistsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type DBTrackUpdateWithoutImagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artists?: Prisma.DBArtistUpdateManyWithoutTracksNestedInput
  album?: Prisma.DBAlbumUpdateOneWithoutTracksNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutTracksNestedInput
}

export type DBTrackUncheckedUpdateWithoutImagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artists?: Prisma.DBArtistUncheckedUpdateManyWithoutTracksNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutTracksNestedInput
}

export type DBTrackUncheckedUpdateManyWithoutImagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type DBTrackUpdateWithoutSortingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artists?: Prisma.DBArtistUpdateManyWithoutTracksNestedInput
  album?: Prisma.DBAlbumUpdateOneWithoutTracksNestedInput
  images?: Prisma.DBAlbumImgUpdateManyWithoutTracksNestedInput
}

export type DBTrackUncheckedUpdateWithoutSortingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artists?: Prisma.DBArtistUncheckedUpdateManyWithoutTracksNestedInput
  images?: Prisma.DBAlbumImgUncheckedUpdateManyWithoutTracksNestedInput
}

export type DBTrackUncheckedUpdateManyWithoutSortingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spotifyId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  albumTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type DBTrackCountOutputType
 */

export type DBTrackCountOutputType = {
  artists: number
  images: number
  sortings: number
}

export type DBTrackCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  artists?: boolean | DBTrackCountOutputTypeCountArtistsArgs
  images?: boolean | DBTrackCountOutputTypeCountImagesArgs
  sortings?: boolean | DBTrackCountOutputTypeCountSortingsArgs
}

/**
 * DBTrackCountOutputType without action
 */
export type DBTrackCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrackCountOutputType
   */
  select?: Prisma.DBTrackCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DBTrackCountOutputType without action
 */
export type DBTrackCountOutputTypeCountArtistsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBArtistWhereInput
}

/**
 * DBTrackCountOutputType without action
 */
export type DBTrackCountOutputTypeCountImagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBAlbumImgWhereInput
}

/**
 * DBTrackCountOutputType without action
 */
export type DBTrackCountOutputTypeCountSortingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBSortingWhereInput
}


export type DBTrackSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spotifyId?: boolean
  title?: boolean
  updatedAt?: boolean
  albumTitle?: boolean
  albumId?: boolean
  artists?: boolean | Prisma.DBTrack$artistsArgs<ExtArgs>
  album?: boolean | Prisma.DBTrack$albumArgs<ExtArgs>
  images?: boolean | Prisma.DBTrack$imagesArgs<ExtArgs>
  sortings?: boolean | Prisma.DBTrack$sortingsArgs<ExtArgs>
  _count?: boolean | Prisma.DBTrackCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBTrack"]>

export type DBTrackSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spotifyId?: boolean
  title?: boolean
  updatedAt?: boolean
  albumTitle?: boolean
  albumId?: boolean
  album?: boolean | Prisma.DBTrack$albumArgs<ExtArgs>
}, ExtArgs["result"]["dBTrack"]>

export type DBTrackSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spotifyId?: boolean
  title?: boolean
  updatedAt?: boolean
  albumTitle?: boolean
  albumId?: boolean
  album?: boolean | Prisma.DBTrack$albumArgs<ExtArgs>
}, ExtArgs["result"]["dBTrack"]>

export type DBTrackSelectScalar = {
  id?: boolean
  spotifyId?: boolean
  title?: boolean
  updatedAt?: boolean
  albumTitle?: boolean
  albumId?: boolean
}

export type DBTrackOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "spotifyId" | "title" | "updatedAt" | "albumTitle" | "albumId", ExtArgs["result"]["dBTrack"]>
export type DBTrackInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  artists?: boolean | Prisma.DBTrack$artistsArgs<ExtArgs>
  album?: boolean | Prisma.DBTrack$albumArgs<ExtArgs>
  images?: boolean | Prisma.DBTrack$imagesArgs<ExtArgs>
  sortings?: boolean | Prisma.DBTrack$sortingsArgs<ExtArgs>
  _count?: boolean | Prisma.DBTrackCountOutputTypeDefaultArgs<ExtArgs>
}
export type DBTrackIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  album?: boolean | Prisma.DBTrack$albumArgs<ExtArgs>
}
export type DBTrackIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  album?: boolean | Prisma.DBTrack$albumArgs<ExtArgs>
}

export type $DBTrackPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBTrack"
  objects: {
    /**
     * *
     *    * Artists
     */
    artists: Prisma.$DBArtistPayload<ExtArgs>[]
    album: Prisma.$DBAlbumPayload<ExtArgs> | null
    /**
     * *
     *    * Images
     */
    images: Prisma.$DBAlbumImgPayload<ExtArgs>[]
    /**
     * *
     *    * Sortings that feature this track
     */
    sortings: Prisma.$DBSortingPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * *
     *    * Identifiers
     */
    id: string
    spotifyId: string
    /**
     * *
     *    * Metadata
     */
    title: string
    updatedAt: Date
    albumTitle: string | null
    /**
     * *
     *    * Optional album relation (songs may be individual singles, not album tracks)
     */
    albumId: string | null
  }, ExtArgs["result"]["dBTrack"]>
  composites: {}
}

export type DBTrackGetPayload<S extends boolean | null | undefined | DBTrackDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBTrackPayload, S>

export type DBTrackCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBTrackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBTrackCountAggregateInputType | true
  }

export interface DBTrackDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBTrack'], meta: { name: 'DBTrack' } }
  /**
   * Find zero or one DBTrack that matches the filter.
   * @param {DBTrackFindUniqueArgs} args - Arguments to find a DBTrack
   * @example
   * // Get one DBTrack
   * const dBTrack = await prisma.dBTrack.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBTrackFindUniqueArgs>(args: Prisma.SelectSubset<T, DBTrackFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBTrackClient<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBTrack that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBTrackFindUniqueOrThrowArgs} args - Arguments to find a DBTrack
   * @example
   * // Get one DBTrack
   * const dBTrack = await prisma.dBTrack.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBTrackFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBTrackFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBTrackClient<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBTrack that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBTrackFindFirstArgs} args - Arguments to find a DBTrack
   * @example
   * // Get one DBTrack
   * const dBTrack = await prisma.dBTrack.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBTrackFindFirstArgs>(args?: Prisma.SelectSubset<T, DBTrackFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBTrackClient<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBTrack that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBTrackFindFirstOrThrowArgs} args - Arguments to find a DBTrack
   * @example
   * // Get one DBTrack
   * const dBTrack = await prisma.dBTrack.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBTrackFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBTrackFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBTrackClient<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBTracks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBTrackFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBTracks
   * const dBTracks = await prisma.dBTrack.findMany()
   * 
   * // Get first 10 DBTracks
   * const dBTracks = await prisma.dBTrack.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dBTrackWithIdOnly = await prisma.dBTrack.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DBTrackFindManyArgs>(args?: Prisma.SelectSubset<T, DBTrackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBTrack.
   * @param {DBTrackCreateArgs} args - Arguments to create a DBTrack.
   * @example
   * // Create one DBTrack
   * const DBTrack = await prisma.dBTrack.create({
   *   data: {
   *     // ... data to create a DBTrack
   *   }
   * })
   * 
   */
  create<T extends DBTrackCreateArgs>(args: Prisma.SelectSubset<T, DBTrackCreateArgs<ExtArgs>>): Prisma.Prisma__DBTrackClient<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBTracks.
   * @param {DBTrackCreateManyArgs} args - Arguments to create many DBTracks.
   * @example
   * // Create many DBTracks
   * const dBTrack = await prisma.dBTrack.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBTrackCreateManyArgs>(args?: Prisma.SelectSubset<T, DBTrackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBTracks and returns the data saved in the database.
   * @param {DBTrackCreateManyAndReturnArgs} args - Arguments to create many DBTracks.
   * @example
   * // Create many DBTracks
   * const dBTrack = await prisma.dBTrack.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBTracks and only return the `id`
   * const dBTrackWithIdOnly = await prisma.dBTrack.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBTrackCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBTrackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBTrack.
   * @param {DBTrackDeleteArgs} args - Arguments to delete one DBTrack.
   * @example
   * // Delete one DBTrack
   * const DBTrack = await prisma.dBTrack.delete({
   *   where: {
   *     // ... filter to delete one DBTrack
   *   }
   * })
   * 
   */
  delete<T extends DBTrackDeleteArgs>(args: Prisma.SelectSubset<T, DBTrackDeleteArgs<ExtArgs>>): Prisma.Prisma__DBTrackClient<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBTrack.
   * @param {DBTrackUpdateArgs} args - Arguments to update one DBTrack.
   * @example
   * // Update one DBTrack
   * const dBTrack = await prisma.dBTrack.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBTrackUpdateArgs>(args: Prisma.SelectSubset<T, DBTrackUpdateArgs<ExtArgs>>): Prisma.Prisma__DBTrackClient<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBTracks.
   * @param {DBTrackDeleteManyArgs} args - Arguments to filter DBTracks to delete.
   * @example
   * // Delete a few DBTracks
   * const { count } = await prisma.dBTrack.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBTrackDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBTrackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBTracks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBTrackUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBTracks
   * const dBTrack = await prisma.dBTrack.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBTrackUpdateManyArgs>(args: Prisma.SelectSubset<T, DBTrackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBTracks and returns the data updated in the database.
   * @param {DBTrackUpdateManyAndReturnArgs} args - Arguments to update many DBTracks.
   * @example
   * // Update many DBTracks
   * const dBTrack = await prisma.dBTrack.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBTracks and only return the `id`
   * const dBTrackWithIdOnly = await prisma.dBTrack.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBTrackUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBTrackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBTrack.
   * @param {DBTrackUpsertArgs} args - Arguments to update or create a DBTrack.
   * @example
   * // Update or create a DBTrack
   * const dBTrack = await prisma.dBTrack.upsert({
   *   create: {
   *     // ... data to create a DBTrack
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBTrack we want to update
   *   }
   * })
   */
  upsert<T extends DBTrackUpsertArgs>(args: Prisma.SelectSubset<T, DBTrackUpsertArgs<ExtArgs>>): Prisma.Prisma__DBTrackClient<runtime.Types.Result.GetResult<Prisma.$DBTrackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBTracks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBTrackCountArgs} args - Arguments to filter DBTracks to count.
   * @example
   * // Count the number of DBTracks
   * const count = await prisma.dBTrack.count({
   *   where: {
   *     // ... the filter for the DBTracks we want to count
   *   }
   * })
  **/
  count<T extends DBTrackCountArgs>(
    args?: Prisma.Subset<T, DBTrackCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBTrackCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBTrack.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBTrackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBTrackAggregateArgs>(args: Prisma.Subset<T, DBTrackAggregateArgs>): Prisma.PrismaPromise<GetDBTrackAggregateType<T>>

  /**
   * Group by DBTrack.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBTrackGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBTrackGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBTrackGroupByArgs['orderBy'] }
      : { orderBy?: DBTrackGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBTrackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBTrackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBTrack model
 */
readonly fields: DBTrackFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBTrack.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBTrackClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  artists<T extends Prisma.DBTrack$artistsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBTrack$artistsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  album<T extends Prisma.DBTrack$albumArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBTrack$albumArgs<ExtArgs>>): Prisma.Prisma__DBAlbumClient<runtime.Types.Result.GetResult<Prisma.$DBAlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  images<T extends Prisma.DBTrack$imagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBTrack$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAlbumImgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  sortings<T extends Prisma.DBTrack$sortingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBTrack$sortingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBTrack model
 */
export interface DBTrackFieldRefs {
  readonly id: Prisma.FieldRef<"DBTrack", 'String'>
  readonly spotifyId: Prisma.FieldRef<"DBTrack", 'String'>
  readonly title: Prisma.FieldRef<"DBTrack", 'String'>
  readonly updatedAt: Prisma.FieldRef<"DBTrack", 'DateTime'>
  readonly albumTitle: Prisma.FieldRef<"DBTrack", 'String'>
  readonly albumId: Prisma.FieldRef<"DBTrack", 'String'>
}
    

// Custom InputTypes
/**
 * DBTrack findUnique
 */
export type DBTrackFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  /**
   * Filter, which DBTrack to fetch.
   */
  where: Prisma.DBTrackWhereUniqueInput
}

/**
 * DBTrack findUniqueOrThrow
 */
export type DBTrackFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  /**
   * Filter, which DBTrack to fetch.
   */
  where: Prisma.DBTrackWhereUniqueInput
}

/**
 * DBTrack findFirst
 */
export type DBTrackFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  /**
   * Filter, which DBTrack to fetch.
   */
  where?: Prisma.DBTrackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBTracks to fetch.
   */
  orderBy?: Prisma.DBTrackOrderByWithRelationInput | Prisma.DBTrackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBTracks.
   */
  cursor?: Prisma.DBTrackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBTracks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBTracks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBTracks.
   */
  distinct?: Prisma.DBTrackScalarFieldEnum | Prisma.DBTrackScalarFieldEnum[]
}

/**
 * DBTrack findFirstOrThrow
 */
export type DBTrackFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  /**
   * Filter, which DBTrack to fetch.
   */
  where?: Prisma.DBTrackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBTracks to fetch.
   */
  orderBy?: Prisma.DBTrackOrderByWithRelationInput | Prisma.DBTrackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBTracks.
   */
  cursor?: Prisma.DBTrackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBTracks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBTracks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBTracks.
   */
  distinct?: Prisma.DBTrackScalarFieldEnum | Prisma.DBTrackScalarFieldEnum[]
}

/**
 * DBTrack findMany
 */
export type DBTrackFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  /**
   * Filter, which DBTracks to fetch.
   */
  where?: Prisma.DBTrackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBTracks to fetch.
   */
  orderBy?: Prisma.DBTrackOrderByWithRelationInput | Prisma.DBTrackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBTracks.
   */
  cursor?: Prisma.DBTrackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBTracks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBTracks.
   */
  skip?: number
  distinct?: Prisma.DBTrackScalarFieldEnum | Prisma.DBTrackScalarFieldEnum[]
}

/**
 * DBTrack create
 */
export type DBTrackCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  /**
   * The data needed to create a DBTrack.
   */
  data: Prisma.XOR<Prisma.DBTrackCreateInput, Prisma.DBTrackUncheckedCreateInput>
}

/**
 * DBTrack createMany
 */
export type DBTrackCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBTracks.
   */
  data: Prisma.DBTrackCreateManyInput | Prisma.DBTrackCreateManyInput[]
}

/**
 * DBTrack createManyAndReturn
 */
export type DBTrackCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * The data used to create many DBTracks.
   */
  data: Prisma.DBTrackCreateManyInput | Prisma.DBTrackCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DBTrack update
 */
export type DBTrackUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  /**
   * The data needed to update a DBTrack.
   */
  data: Prisma.XOR<Prisma.DBTrackUpdateInput, Prisma.DBTrackUncheckedUpdateInput>
  /**
   * Choose, which DBTrack to update.
   */
  where: Prisma.DBTrackWhereUniqueInput
}

/**
 * DBTrack updateMany
 */
export type DBTrackUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBTracks.
   */
  data: Prisma.XOR<Prisma.DBTrackUpdateManyMutationInput, Prisma.DBTrackUncheckedUpdateManyInput>
  /**
   * Filter which DBTracks to update
   */
  where?: Prisma.DBTrackWhereInput
  /**
   * Limit how many DBTracks to update.
   */
  limit?: number
}

/**
 * DBTrack updateManyAndReturn
 */
export type DBTrackUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * The data used to update DBTracks.
   */
  data: Prisma.XOR<Prisma.DBTrackUpdateManyMutationInput, Prisma.DBTrackUncheckedUpdateManyInput>
  /**
   * Filter which DBTracks to update
   */
  where?: Prisma.DBTrackWhereInput
  /**
   * Limit how many DBTracks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DBTrack upsert
 */
export type DBTrackUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  /**
   * The filter to search for the DBTrack to update in case it exists.
   */
  where: Prisma.DBTrackWhereUniqueInput
  /**
   * In case the DBTrack found by the `where` argument doesn't exist, create a new DBTrack with this data.
   */
  create: Prisma.XOR<Prisma.DBTrackCreateInput, Prisma.DBTrackUncheckedCreateInput>
  /**
   * In case the DBTrack was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBTrackUpdateInput, Prisma.DBTrackUncheckedUpdateInput>
}

/**
 * DBTrack delete
 */
export type DBTrackDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
  /**
   * Filter which DBTrack to delete.
   */
  where: Prisma.DBTrackWhereUniqueInput
}

/**
 * DBTrack deleteMany
 */
export type DBTrackDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBTracks to delete
   */
  where?: Prisma.DBTrackWhereInput
  /**
   * Limit how many DBTracks to delete.
   */
  limit?: number
}

/**
 * DBTrack.artists
 */
export type DBTrack$artistsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBArtist
   */
  select?: Prisma.DBArtistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBArtist
   */
  omit?: Prisma.DBArtistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBArtistInclude<ExtArgs> | null
  where?: Prisma.DBArtistWhereInput
  orderBy?: Prisma.DBArtistOrderByWithRelationInput | Prisma.DBArtistOrderByWithRelationInput[]
  cursor?: Prisma.DBArtistWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBArtistScalarFieldEnum | Prisma.DBArtistScalarFieldEnum[]
}

/**
 * DBTrack.album
 */
export type DBTrack$albumArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbum
   */
  select?: Prisma.DBAlbumSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbum
   */
  omit?: Prisma.DBAlbumOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumInclude<ExtArgs> | null
  where?: Prisma.DBAlbumWhereInput
}

/**
 * DBTrack.images
 */
export type DBTrack$imagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAlbumImg
   */
  select?: Prisma.DBAlbumImgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAlbumImg
   */
  omit?: Prisma.DBAlbumImgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAlbumImgInclude<ExtArgs> | null
  where?: Prisma.DBAlbumImgWhereInput
  orderBy?: Prisma.DBAlbumImgOrderByWithRelationInput | Prisma.DBAlbumImgOrderByWithRelationInput[]
  cursor?: Prisma.DBAlbumImgWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBAlbumImgScalarFieldEnum | Prisma.DBAlbumImgScalarFieldEnum[]
}

/**
 * DBTrack.sortings
 */
export type DBTrack$sortingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  where?: Prisma.DBSortingWhereInput
  orderBy?: Prisma.DBSortingOrderByWithRelationInput | Prisma.DBSortingOrderByWithRelationInput[]
  cursor?: Prisma.DBSortingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBSortingScalarFieldEnum | Prisma.DBSortingScalarFieldEnum[]
}

/**
 * DBTrack without action
 */
export type DBTrackDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBTrack
   */
  select?: Prisma.DBTrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBTrack
   */
  omit?: Prisma.DBTrackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBTrackInclude<ExtArgs> | null
}
