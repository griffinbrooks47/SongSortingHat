
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBUser
 * 
 */
export type DBUserModel = runtime.Types.Result.DefaultSelection<Prisma.$DBUserPayload>

export type AggregateDBUser = {
  _count: DBUserCountAggregateOutputType | null
  _min: DBUserMinAggregateOutputType | null
  _max: DBUserMaxAggregateOutputType | null
}

export type DBUserMinAggregateOutputType = {
  id: string | null
  email: string | null
  password: string | null
  name: string | null
  avatarUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DBUserMaxAggregateOutputType = {
  id: string | null
  email: string | null
  password: string | null
  name: string | null
  avatarUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DBUserCountAggregateOutputType = {
  id: number
  email: number
  password: number
  name: number
  avatarUrl: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DBUserMinAggregateInputType = {
  id?: true
  email?: true
  password?: true
  name?: true
  avatarUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type DBUserMaxAggregateInputType = {
  id?: true
  email?: true
  password?: true
  name?: true
  avatarUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type DBUserCountAggregateInputType = {
  id?: true
  email?: true
  password?: true
  name?: true
  avatarUrl?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DBUserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBUser to aggregate.
   */
  where?: Prisma.DBUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBUsers to fetch.
   */
  orderBy?: Prisma.DBUserOrderByWithRelationInput | Prisma.DBUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBUsers
  **/
  _count?: true | DBUserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBUserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBUserMaxAggregateInputType
}

export type GetDBUserAggregateType<T extends DBUserAggregateArgs> = {
      [P in keyof T & keyof AggregateDBUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBUser[P]>
    : Prisma.GetScalarType<T[P], AggregateDBUser[P]>
}




export type DBUserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBUserWhereInput
  orderBy?: Prisma.DBUserOrderByWithAggregationInput | Prisma.DBUserOrderByWithAggregationInput[]
  by: Prisma.DBUserScalarFieldEnum[] | Prisma.DBUserScalarFieldEnum
  having?: Prisma.DBUserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBUserCountAggregateInputType | true
  _min?: DBUserMinAggregateInputType
  _max?: DBUserMaxAggregateInputType
}

export type DBUserGroupByOutputType = {
  id: string
  email: string
  password: string | null
  name: string | null
  avatarUrl: string | null
  createdAt: Date
  updatedAt: Date
  _count: DBUserCountAggregateOutputType | null
  _min: DBUserMinAggregateOutputType | null
  _max: DBUserMaxAggregateOutputType | null
}

type GetDBUserGroupByPayload<T extends DBUserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBUserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBUserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBUserGroupByOutputType[P]>
      }
    >
  >



export type DBUserWhereInput = {
  AND?: Prisma.DBUserWhereInput | Prisma.DBUserWhereInput[]
  OR?: Prisma.DBUserWhereInput[]
  NOT?: Prisma.DBUserWhereInput | Prisma.DBUserWhereInput[]
  id?: Prisma.StringFilter<"DBUser"> | string
  email?: Prisma.StringFilter<"DBUser"> | string
  password?: Prisma.StringNullableFilter<"DBUser"> | string | null
  name?: Prisma.StringNullableFilter<"DBUser"> | string | null
  avatarUrl?: Prisma.StringNullableFilter<"DBUser"> | string | null
  createdAt?: Prisma.DateTimeFilter<"DBUser"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DBUser"> | Date | string
  accounts?: Prisma.DBAccountListRelationFilter
  sortings?: Prisma.DBSortingListRelationFilter
  communities?: Prisma.DBCommunityUserListRelationFilter
}

export type DBUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  avatarUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  accounts?: Prisma.DBAccountOrderByRelationAggregateInput
  sortings?: Prisma.DBSortingOrderByRelationAggregateInput
  communities?: Prisma.DBCommunityUserOrderByRelationAggregateInput
}

export type DBUserWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.DBUserWhereInput | Prisma.DBUserWhereInput[]
  OR?: Prisma.DBUserWhereInput[]
  NOT?: Prisma.DBUserWhereInput | Prisma.DBUserWhereInput[]
  password?: Prisma.StringNullableFilter<"DBUser"> | string | null
  name?: Prisma.StringNullableFilter<"DBUser"> | string | null
  avatarUrl?: Prisma.StringNullableFilter<"DBUser"> | string | null
  createdAt?: Prisma.DateTimeFilter<"DBUser"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DBUser"> | Date | string
  accounts?: Prisma.DBAccountListRelationFilter
  sortings?: Prisma.DBSortingListRelationFilter
  communities?: Prisma.DBCommunityUserListRelationFilter
}, "id" | "email">

export type DBUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  avatarUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DBUserCountOrderByAggregateInput
  _max?: Prisma.DBUserMaxOrderByAggregateInput
  _min?: Prisma.DBUserMinOrderByAggregateInput
}

export type DBUserScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBUserScalarWhereWithAggregatesInput | Prisma.DBUserScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBUserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBUserScalarWhereWithAggregatesInput | Prisma.DBUserScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DBUser"> | string
  email?: Prisma.StringWithAggregatesFilter<"DBUser"> | string
  password?: Prisma.StringNullableWithAggregatesFilter<"DBUser"> | string | null
  name?: Prisma.StringNullableWithAggregatesFilter<"DBUser"> | string | null
  avatarUrl?: Prisma.StringNullableWithAggregatesFilter<"DBUser"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DBUser"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DBUser"> | Date | string
}

export type DBUserCreateInput = {
  id?: string
  email: string
  password?: string | null
  name?: string | null
  avatarUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  accounts?: Prisma.DBAccountCreateNestedManyWithoutUserInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutUserInput
  communities?: Prisma.DBCommunityUserCreateNestedManyWithoutUserInput
}

export type DBUserUncheckedCreateInput = {
  id?: string
  email: string
  password?: string | null
  name?: string | null
  avatarUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  accounts?: Prisma.DBAccountUncheckedCreateNestedManyWithoutUserInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutUserInput
  communities?: Prisma.DBCommunityUserUncheckedCreateNestedManyWithoutUserInput
}

export type DBUserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  accounts?: Prisma.DBAccountUpdateManyWithoutUserNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutUserNestedInput
  communities?: Prisma.DBCommunityUserUpdateManyWithoutUserNestedInput
}

export type DBUserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  accounts?: Prisma.DBAccountUncheckedUpdateManyWithoutUserNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutUserNestedInput
  communities?: Prisma.DBCommunityUserUncheckedUpdateManyWithoutUserNestedInput
}

export type DBUserCreateManyInput = {
  id?: string
  email: string
  password?: string | null
  name?: string | null
  avatarUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DBUserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBUserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  name?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DBUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  name?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DBUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  name?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DBUserScalarRelationFilter = {
  is?: Prisma.DBUserWhereInput
  isNot?: Prisma.DBUserWhereInput
}

export type DBUserCreateNestedOneWithoutCommunitiesInput = {
  create?: Prisma.XOR<Prisma.DBUserCreateWithoutCommunitiesInput, Prisma.DBUserUncheckedCreateWithoutCommunitiesInput>
  connectOrCreate?: Prisma.DBUserCreateOrConnectWithoutCommunitiesInput
  connect?: Prisma.DBUserWhereUniqueInput
}

export type DBUserUpdateOneRequiredWithoutCommunitiesNestedInput = {
  create?: Prisma.XOR<Prisma.DBUserCreateWithoutCommunitiesInput, Prisma.DBUserUncheckedCreateWithoutCommunitiesInput>
  connectOrCreate?: Prisma.DBUserCreateOrConnectWithoutCommunitiesInput
  upsert?: Prisma.DBUserUpsertWithoutCommunitiesInput
  connect?: Prisma.DBUserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DBUserUpdateToOneWithWhereWithoutCommunitiesInput, Prisma.DBUserUpdateWithoutCommunitiesInput>, Prisma.DBUserUncheckedUpdateWithoutCommunitiesInput>
}

export type DBUserCreateNestedOneWithoutAccountsInput = {
  create?: Prisma.XOR<Prisma.DBUserCreateWithoutAccountsInput, Prisma.DBUserUncheckedCreateWithoutAccountsInput>
  connectOrCreate?: Prisma.DBUserCreateOrConnectWithoutAccountsInput
  connect?: Prisma.DBUserWhereUniqueInput
}

export type DBUserUpdateOneRequiredWithoutAccountsNestedInput = {
  create?: Prisma.XOR<Prisma.DBUserCreateWithoutAccountsInput, Prisma.DBUserUncheckedCreateWithoutAccountsInput>
  connectOrCreate?: Prisma.DBUserCreateOrConnectWithoutAccountsInput
  upsert?: Prisma.DBUserUpsertWithoutAccountsInput
  connect?: Prisma.DBUserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DBUserUpdateToOneWithWhereWithoutAccountsInput, Prisma.DBUserUpdateWithoutAccountsInput>, Prisma.DBUserUncheckedUpdateWithoutAccountsInput>
}

export type DBUserCreateNestedOneWithoutSortingsInput = {
  create?: Prisma.XOR<Prisma.DBUserCreateWithoutSortingsInput, Prisma.DBUserUncheckedCreateWithoutSortingsInput>
  connectOrCreate?: Prisma.DBUserCreateOrConnectWithoutSortingsInput
  connect?: Prisma.DBUserWhereUniqueInput
}

export type DBUserUpdateOneRequiredWithoutSortingsNestedInput = {
  create?: Prisma.XOR<Prisma.DBUserCreateWithoutSortingsInput, Prisma.DBUserUncheckedCreateWithoutSortingsInput>
  connectOrCreate?: Prisma.DBUserCreateOrConnectWithoutSortingsInput
  upsert?: Prisma.DBUserUpsertWithoutSortingsInput
  connect?: Prisma.DBUserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DBUserUpdateToOneWithWhereWithoutSortingsInput, Prisma.DBUserUpdateWithoutSortingsInput>, Prisma.DBUserUncheckedUpdateWithoutSortingsInput>
}

export type DBUserCreateWithoutCommunitiesInput = {
  id?: string
  email: string
  password?: string | null
  name?: string | null
  avatarUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  accounts?: Prisma.DBAccountCreateNestedManyWithoutUserInput
  sortings?: Prisma.DBSortingCreateNestedManyWithoutUserInput
}

export type DBUserUncheckedCreateWithoutCommunitiesInput = {
  id?: string
  email: string
  password?: string | null
  name?: string | null
  avatarUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  accounts?: Prisma.DBAccountUncheckedCreateNestedManyWithoutUserInput
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutUserInput
}

export type DBUserCreateOrConnectWithoutCommunitiesInput = {
  where: Prisma.DBUserWhereUniqueInput
  create: Prisma.XOR<Prisma.DBUserCreateWithoutCommunitiesInput, Prisma.DBUserUncheckedCreateWithoutCommunitiesInput>
}

export type DBUserUpsertWithoutCommunitiesInput = {
  update: Prisma.XOR<Prisma.DBUserUpdateWithoutCommunitiesInput, Prisma.DBUserUncheckedUpdateWithoutCommunitiesInput>
  create: Prisma.XOR<Prisma.DBUserCreateWithoutCommunitiesInput, Prisma.DBUserUncheckedCreateWithoutCommunitiesInput>
  where?: Prisma.DBUserWhereInput
}

export type DBUserUpdateToOneWithWhereWithoutCommunitiesInput = {
  where?: Prisma.DBUserWhereInput
  data: Prisma.XOR<Prisma.DBUserUpdateWithoutCommunitiesInput, Prisma.DBUserUncheckedUpdateWithoutCommunitiesInput>
}

export type DBUserUpdateWithoutCommunitiesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  accounts?: Prisma.DBAccountUpdateManyWithoutUserNestedInput
  sortings?: Prisma.DBSortingUpdateManyWithoutUserNestedInput
}

export type DBUserUncheckedUpdateWithoutCommunitiesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  accounts?: Prisma.DBAccountUncheckedUpdateManyWithoutUserNestedInput
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutUserNestedInput
}

export type DBUserCreateWithoutAccountsInput = {
  id?: string
  email: string
  password?: string | null
  name?: string | null
  avatarUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sortings?: Prisma.DBSortingCreateNestedManyWithoutUserInput
  communities?: Prisma.DBCommunityUserCreateNestedManyWithoutUserInput
}

export type DBUserUncheckedCreateWithoutAccountsInput = {
  id?: string
  email: string
  password?: string | null
  name?: string | null
  avatarUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sortings?: Prisma.DBSortingUncheckedCreateNestedManyWithoutUserInput
  communities?: Prisma.DBCommunityUserUncheckedCreateNestedManyWithoutUserInput
}

export type DBUserCreateOrConnectWithoutAccountsInput = {
  where: Prisma.DBUserWhereUniqueInput
  create: Prisma.XOR<Prisma.DBUserCreateWithoutAccountsInput, Prisma.DBUserUncheckedCreateWithoutAccountsInput>
}

export type DBUserUpsertWithoutAccountsInput = {
  update: Prisma.XOR<Prisma.DBUserUpdateWithoutAccountsInput, Prisma.DBUserUncheckedUpdateWithoutAccountsInput>
  create: Prisma.XOR<Prisma.DBUserCreateWithoutAccountsInput, Prisma.DBUserUncheckedCreateWithoutAccountsInput>
  where?: Prisma.DBUserWhereInput
}

export type DBUserUpdateToOneWithWhereWithoutAccountsInput = {
  where?: Prisma.DBUserWhereInput
  data: Prisma.XOR<Prisma.DBUserUpdateWithoutAccountsInput, Prisma.DBUserUncheckedUpdateWithoutAccountsInput>
}

export type DBUserUpdateWithoutAccountsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sortings?: Prisma.DBSortingUpdateManyWithoutUserNestedInput
  communities?: Prisma.DBCommunityUserUpdateManyWithoutUserNestedInput
}

export type DBUserUncheckedUpdateWithoutAccountsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sortings?: Prisma.DBSortingUncheckedUpdateManyWithoutUserNestedInput
  communities?: Prisma.DBCommunityUserUncheckedUpdateManyWithoutUserNestedInput
}

export type DBUserCreateWithoutSortingsInput = {
  id?: string
  email: string
  password?: string | null
  name?: string | null
  avatarUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  accounts?: Prisma.DBAccountCreateNestedManyWithoutUserInput
  communities?: Prisma.DBCommunityUserCreateNestedManyWithoutUserInput
}

export type DBUserUncheckedCreateWithoutSortingsInput = {
  id?: string
  email: string
  password?: string | null
  name?: string | null
  avatarUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  accounts?: Prisma.DBAccountUncheckedCreateNestedManyWithoutUserInput
  communities?: Prisma.DBCommunityUserUncheckedCreateNestedManyWithoutUserInput
}

export type DBUserCreateOrConnectWithoutSortingsInput = {
  where: Prisma.DBUserWhereUniqueInput
  create: Prisma.XOR<Prisma.DBUserCreateWithoutSortingsInput, Prisma.DBUserUncheckedCreateWithoutSortingsInput>
}

export type DBUserUpsertWithoutSortingsInput = {
  update: Prisma.XOR<Prisma.DBUserUpdateWithoutSortingsInput, Prisma.DBUserUncheckedUpdateWithoutSortingsInput>
  create: Prisma.XOR<Prisma.DBUserCreateWithoutSortingsInput, Prisma.DBUserUncheckedCreateWithoutSortingsInput>
  where?: Prisma.DBUserWhereInput
}

export type DBUserUpdateToOneWithWhereWithoutSortingsInput = {
  where?: Prisma.DBUserWhereInput
  data: Prisma.XOR<Prisma.DBUserUpdateWithoutSortingsInput, Prisma.DBUserUncheckedUpdateWithoutSortingsInput>
}

export type DBUserUpdateWithoutSortingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  accounts?: Prisma.DBAccountUpdateManyWithoutUserNestedInput
  communities?: Prisma.DBCommunityUserUpdateManyWithoutUserNestedInput
}

export type DBUserUncheckedUpdateWithoutSortingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  accounts?: Prisma.DBAccountUncheckedUpdateManyWithoutUserNestedInput
  communities?: Prisma.DBCommunityUserUncheckedUpdateManyWithoutUserNestedInput
}


/**
 * Count Type DBUserCountOutputType
 */

export type DBUserCountOutputType = {
  accounts: number
  sortings: number
  communities: number
}

export type DBUserCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  accounts?: boolean | DBUserCountOutputTypeCountAccountsArgs
  sortings?: boolean | DBUserCountOutputTypeCountSortingsArgs
  communities?: boolean | DBUserCountOutputTypeCountCommunitiesArgs
}

/**
 * DBUserCountOutputType without action
 */
export type DBUserCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUserCountOutputType
   */
  select?: Prisma.DBUserCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DBUserCountOutputType without action
 */
export type DBUserCountOutputTypeCountAccountsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBAccountWhereInput
}

/**
 * DBUserCountOutputType without action
 */
export type DBUserCountOutputTypeCountSortingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBSortingWhereInput
}

/**
 * DBUserCountOutputType without action
 */
export type DBUserCountOutputTypeCountCommunitiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBCommunityUserWhereInput
}


export type DBUserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  password?: boolean
  name?: boolean
  avatarUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  accounts?: boolean | Prisma.DBUser$accountsArgs<ExtArgs>
  sortings?: boolean | Prisma.DBUser$sortingsArgs<ExtArgs>
  communities?: boolean | Prisma.DBUser$communitiesArgs<ExtArgs>
  _count?: boolean | Prisma.DBUserCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBUser"]>

export type DBUserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  password?: boolean
  name?: boolean
  avatarUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["dBUser"]>

export type DBUserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  password?: boolean
  name?: boolean
  avatarUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["dBUser"]>

export type DBUserSelectScalar = {
  id?: boolean
  email?: boolean
  password?: boolean
  name?: boolean
  avatarUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DBUserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "password" | "name" | "avatarUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["dBUser"]>
export type DBUserInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  accounts?: boolean | Prisma.DBUser$accountsArgs<ExtArgs>
  sortings?: boolean | Prisma.DBUser$sortingsArgs<ExtArgs>
  communities?: boolean | Prisma.DBUser$communitiesArgs<ExtArgs>
  _count?: boolean | Prisma.DBUserCountOutputTypeDefaultArgs<ExtArgs>
}
export type DBUserIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DBUserIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DBUserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBUser"
  objects: {
    accounts: Prisma.$DBAccountPayload<ExtArgs>[]
    sortings: Prisma.$DBSortingPayload<ExtArgs>[]
    communities: Prisma.$DBCommunityUserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    email: string
    password: string | null
    name: string | null
    avatarUrl: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["dBUser"]>
  composites: {}
}

export type DBUserGetPayload<S extends boolean | null | undefined | DBUserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBUserPayload, S>

export type DBUserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBUserCountAggregateInputType | true
  }

export interface DBUserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBUser'], meta: { name: 'DBUser' } }
  /**
   * Find zero or one DBUser that matches the filter.
   * @param {DBUserFindUniqueArgs} args - Arguments to find a DBUser
   * @example
   * // Get one DBUser
   * const dBUser = await prisma.dBUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBUserFindUniqueArgs>(args: Prisma.SelectSubset<T, DBUserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBUserFindUniqueOrThrowArgs} args - Arguments to find a DBUser
   * @example
   * // Get one DBUser
   * const dBUser = await prisma.dBUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBUserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBUserFindFirstArgs} args - Arguments to find a DBUser
   * @example
   * // Get one DBUser
   * const dBUser = await prisma.dBUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBUserFindFirstArgs>(args?: Prisma.SelectSubset<T, DBUserFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBUserFindFirstOrThrowArgs} args - Arguments to find a DBUser
   * @example
   * // Get one DBUser
   * const dBUser = await prisma.dBUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBUserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBUserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBUsers
   * const dBUsers = await prisma.dBUser.findMany()
   * 
   * // Get first 10 DBUsers
   * const dBUsers = await prisma.dBUser.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dBUserWithIdOnly = await prisma.dBUser.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DBUserFindManyArgs>(args?: Prisma.SelectSubset<T, DBUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBUser.
   * @param {DBUserCreateArgs} args - Arguments to create a DBUser.
   * @example
   * // Create one DBUser
   * const DBUser = await prisma.dBUser.create({
   *   data: {
   *     // ... data to create a DBUser
   *   }
   * })
   * 
   */
  create<T extends DBUserCreateArgs>(args: Prisma.SelectSubset<T, DBUserCreateArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBUsers.
   * @param {DBUserCreateManyArgs} args - Arguments to create many DBUsers.
   * @example
   * // Create many DBUsers
   * const dBUser = await prisma.dBUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBUserCreateManyArgs>(args?: Prisma.SelectSubset<T, DBUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBUsers and returns the data saved in the database.
   * @param {DBUserCreateManyAndReturnArgs} args - Arguments to create many DBUsers.
   * @example
   * // Create many DBUsers
   * const dBUser = await prisma.dBUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBUsers and only return the `id`
   * const dBUserWithIdOnly = await prisma.dBUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBUserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBUser.
   * @param {DBUserDeleteArgs} args - Arguments to delete one DBUser.
   * @example
   * // Delete one DBUser
   * const DBUser = await prisma.dBUser.delete({
   *   where: {
   *     // ... filter to delete one DBUser
   *   }
   * })
   * 
   */
  delete<T extends DBUserDeleteArgs>(args: Prisma.SelectSubset<T, DBUserDeleteArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBUser.
   * @param {DBUserUpdateArgs} args - Arguments to update one DBUser.
   * @example
   * // Update one DBUser
   * const dBUser = await prisma.dBUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBUserUpdateArgs>(args: Prisma.SelectSubset<T, DBUserUpdateArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBUsers.
   * @param {DBUserDeleteManyArgs} args - Arguments to filter DBUsers to delete.
   * @example
   * // Delete a few DBUsers
   * const { count } = await prisma.dBUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBUserDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBUsers
   * const dBUser = await prisma.dBUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBUserUpdateManyArgs>(args: Prisma.SelectSubset<T, DBUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBUsers and returns the data updated in the database.
   * @param {DBUserUpdateManyAndReturnArgs} args - Arguments to update many DBUsers.
   * @example
   * // Update many DBUsers
   * const dBUser = await prisma.dBUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBUsers and only return the `id`
   * const dBUserWithIdOnly = await prisma.dBUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBUserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBUser.
   * @param {DBUserUpsertArgs} args - Arguments to update or create a DBUser.
   * @example
   * // Update or create a DBUser
   * const dBUser = await prisma.dBUser.upsert({
   *   create: {
   *     // ... data to create a DBUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBUser we want to update
   *   }
   * })
   */
  upsert<T extends DBUserUpsertArgs>(args: Prisma.SelectSubset<T, DBUserUpsertArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBUserCountArgs} args - Arguments to filter DBUsers to count.
   * @example
   * // Count the number of DBUsers
   * const count = await prisma.dBUser.count({
   *   where: {
   *     // ... the filter for the DBUsers we want to count
   *   }
   * })
  **/
  count<T extends DBUserCountArgs>(
    args?: Prisma.Subset<T, DBUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBUserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBUserAggregateArgs>(args: Prisma.Subset<T, DBUserAggregateArgs>): Prisma.PrismaPromise<GetDBUserAggregateType<T>>

  /**
   * Group by DBUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBUserGroupByArgs['orderBy'] }
      : { orderBy?: DBUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBUser model
 */
readonly fields: DBUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBUserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  accounts<T extends Prisma.DBUser$accountsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBUser$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  sortings<T extends Prisma.DBUser$sortingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBUser$sortingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBSortingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  communities<T extends Prisma.DBUser$communitiesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBUser$communitiesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBCommunityUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBUser model
 */
export interface DBUserFieldRefs {
  readonly id: Prisma.FieldRef<"DBUser", 'String'>
  readonly email: Prisma.FieldRef<"DBUser", 'String'>
  readonly password: Prisma.FieldRef<"DBUser", 'String'>
  readonly name: Prisma.FieldRef<"DBUser", 'String'>
  readonly avatarUrl: Prisma.FieldRef<"DBUser", 'String'>
  readonly createdAt: Prisma.FieldRef<"DBUser", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DBUser", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DBUser findUnique
 */
export type DBUserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBUserInclude<ExtArgs> | null
  /**
   * Filter, which DBUser to fetch.
   */
  where: Prisma.DBUserWhereUniqueInput
}

/**
 * DBUser findUniqueOrThrow
 */
export type DBUserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBUserInclude<ExtArgs> | null
  /**
   * Filter, which DBUser to fetch.
   */
  where: Prisma.DBUserWhereUniqueInput
}

/**
 * DBUser findFirst
 */
export type DBUserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBUserInclude<ExtArgs> | null
  /**
   * Filter, which DBUser to fetch.
   */
  where?: Prisma.DBUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBUsers to fetch.
   */
  orderBy?: Prisma.DBUserOrderByWithRelationInput | Prisma.DBUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBUsers.
   */
  cursor?: Prisma.DBUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBUsers.
   */
  distinct?: Prisma.DBUserScalarFieldEnum | Prisma.DBUserScalarFieldEnum[]
}

/**
 * DBUser findFirstOrThrow
 */
export type DBUserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBUserInclude<ExtArgs> | null
  /**
   * Filter, which DBUser to fetch.
   */
  where?: Prisma.DBUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBUsers to fetch.
   */
  orderBy?: Prisma.DBUserOrderByWithRelationInput | Prisma.DBUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBUsers.
   */
  cursor?: Prisma.DBUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBUsers.
   */
  distinct?: Prisma.DBUserScalarFieldEnum | Prisma.DBUserScalarFieldEnum[]
}

/**
 * DBUser findMany
 */
export type DBUserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBUserInclude<ExtArgs> | null
  /**
   * Filter, which DBUsers to fetch.
   */
  where?: Prisma.DBUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBUsers to fetch.
   */
  orderBy?: Prisma.DBUserOrderByWithRelationInput | Prisma.DBUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBUsers.
   */
  cursor?: Prisma.DBUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBUsers.
   */
  skip?: number
  distinct?: Prisma.DBUserScalarFieldEnum | Prisma.DBUserScalarFieldEnum[]
}

/**
 * DBUser create
 */
export type DBUserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBUserInclude<ExtArgs> | null
  /**
   * The data needed to create a DBUser.
   */
  data: Prisma.XOR<Prisma.DBUserCreateInput, Prisma.DBUserUncheckedCreateInput>
}

/**
 * DBUser createMany
 */
export type DBUserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBUsers.
   */
  data: Prisma.DBUserCreateManyInput | Prisma.DBUserCreateManyInput[]
}

/**
 * DBUser createManyAndReturn
 */
export type DBUserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * The data used to create many DBUsers.
   */
  data: Prisma.DBUserCreateManyInput | Prisma.DBUserCreateManyInput[]
}

/**
 * DBUser update
 */
export type DBUserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBUserInclude<ExtArgs> | null
  /**
   * The data needed to update a DBUser.
   */
  data: Prisma.XOR<Prisma.DBUserUpdateInput, Prisma.DBUserUncheckedUpdateInput>
  /**
   * Choose, which DBUser to update.
   */
  where: Prisma.DBUserWhereUniqueInput
}

/**
 * DBUser updateMany
 */
export type DBUserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBUsers.
   */
  data: Prisma.XOR<Prisma.DBUserUpdateManyMutationInput, Prisma.DBUserUncheckedUpdateManyInput>
  /**
   * Filter which DBUsers to update
   */
  where?: Prisma.DBUserWhereInput
  /**
   * Limit how many DBUsers to update.
   */
  limit?: number
}

/**
 * DBUser updateManyAndReturn
 */
export type DBUserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * The data used to update DBUsers.
   */
  data: Prisma.XOR<Prisma.DBUserUpdateManyMutationInput, Prisma.DBUserUncheckedUpdateManyInput>
  /**
   * Filter which DBUsers to update
   */
  where?: Prisma.DBUserWhereInput
  /**
   * Limit how many DBUsers to update.
   */
  limit?: number
}

/**
 * DBUser upsert
 */
export type DBUserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBUserInclude<ExtArgs> | null
  /**
   * The filter to search for the DBUser to update in case it exists.
   */
  where: Prisma.DBUserWhereUniqueInput
  /**
   * In case the DBUser found by the `where` argument doesn't exist, create a new DBUser with this data.
   */
  create: Prisma.XOR<Prisma.DBUserCreateInput, Prisma.DBUserUncheckedCreateInput>
  /**
   * In case the DBUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBUserUpdateInput, Prisma.DBUserUncheckedUpdateInput>
}

/**
 * DBUser delete
 */
export type DBUserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBUserInclude<ExtArgs> | null
  /**
   * Filter which DBUser to delete.
   */
  where: Prisma.DBUserWhereUniqueInput
}

/**
 * DBUser deleteMany
 */
export type DBUserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBUsers to delete
   */
  where?: Prisma.DBUserWhereInput
  /**
   * Limit how many DBUsers to delete.
   */
  limit?: number
}

/**
 * DBUser.accounts
 */
export type DBUser$accountsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
  where?: Prisma.DBAccountWhereInput
  orderBy?: Prisma.DBAccountOrderByWithRelationInput | Prisma.DBAccountOrderByWithRelationInput[]
  cursor?: Prisma.DBAccountWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBAccountScalarFieldEnum | Prisma.DBAccountScalarFieldEnum[]
}

/**
 * DBUser.sortings
 */
export type DBUser$sortingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBSorting
   */
  select?: Prisma.DBSortingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBSorting
   */
  omit?: Prisma.DBSortingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBSortingInclude<ExtArgs> | null
  where?: Prisma.DBSortingWhereInput
  orderBy?: Prisma.DBSortingOrderByWithRelationInput | Prisma.DBSortingOrderByWithRelationInput[]
  cursor?: Prisma.DBSortingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBSortingScalarFieldEnum | Prisma.DBSortingScalarFieldEnum[]
}

/**
 * DBUser.communities
 */
export type DBUser$communitiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBCommunityUser
   */
  select?: Prisma.DBCommunityUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBCommunityUser
   */
  omit?: Prisma.DBCommunityUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBCommunityUserInclude<ExtArgs> | null
  where?: Prisma.DBCommunityUserWhereInput
  orderBy?: Prisma.DBCommunityUserOrderByWithRelationInput | Prisma.DBCommunityUserOrderByWithRelationInput[]
  cursor?: Prisma.DBCommunityUserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DBCommunityUserScalarFieldEnum | Prisma.DBCommunityUserScalarFieldEnum[]
}

/**
 * DBUser without action
 */
export type DBUserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBUser
   */
  select?: Prisma.DBUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBUser
   */
  omit?: Prisma.DBUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBUserInclude<ExtArgs> | null
}
