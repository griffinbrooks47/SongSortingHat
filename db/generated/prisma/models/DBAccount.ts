
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DBAccount` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DBAccount
 * 
 */
export type DBAccountModel = runtime.Types.Result.DefaultSelection<Prisma.$DBAccountPayload>

export type AggregateDBAccount = {
  _count: DBAccountCountAggregateOutputType | null
  _avg: DBAccountAvgAggregateOutputType | null
  _sum: DBAccountSumAggregateOutputType | null
  _min: DBAccountMinAggregateOutputType | null
  _max: DBAccountMaxAggregateOutputType | null
}

export type DBAccountAvgAggregateOutputType = {
  expiresAt: number | null
}

export type DBAccountSumAggregateOutputType = {
  expiresAt: number | null
}

export type DBAccountMinAggregateOutputType = {
  id: string | null
  userId: string | null
  provider: string | null
  providerAccountId: string | null
  accessToken: string | null
  refreshToken: string | null
  expiresAt: number | null
  createdAt: Date | null
}

export type DBAccountMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  provider: string | null
  providerAccountId: string | null
  accessToken: string | null
  refreshToken: string | null
  expiresAt: number | null
  createdAt: Date | null
}

export type DBAccountCountAggregateOutputType = {
  id: number
  userId: number
  provider: number
  providerAccountId: number
  accessToken: number
  refreshToken: number
  expiresAt: number
  createdAt: number
  _all: number
}


export type DBAccountAvgAggregateInputType = {
  expiresAt?: true
}

export type DBAccountSumAggregateInputType = {
  expiresAt?: true
}

export type DBAccountMinAggregateInputType = {
  id?: true
  userId?: true
  provider?: true
  providerAccountId?: true
  accessToken?: true
  refreshToken?: true
  expiresAt?: true
  createdAt?: true
}

export type DBAccountMaxAggregateInputType = {
  id?: true
  userId?: true
  provider?: true
  providerAccountId?: true
  accessToken?: true
  refreshToken?: true
  expiresAt?: true
  createdAt?: true
}

export type DBAccountCountAggregateInputType = {
  id?: true
  userId?: true
  provider?: true
  providerAccountId?: true
  accessToken?: true
  refreshToken?: true
  expiresAt?: true
  createdAt?: true
  _all?: true
}

export type DBAccountAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBAccount to aggregate.
   */
  where?: Prisma.DBAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAccounts to fetch.
   */
  orderBy?: Prisma.DBAccountOrderByWithRelationInput | Prisma.DBAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DBAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DBAccounts
  **/
  _count?: true | DBAccountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DBAccountAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DBAccountSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DBAccountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DBAccountMaxAggregateInputType
}

export type GetDBAccountAggregateType<T extends DBAccountAggregateArgs> = {
      [P in keyof T & keyof AggregateDBAccount]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDBAccount[P]>
    : Prisma.GetScalarType<T[P], AggregateDBAccount[P]>
}




export type DBAccountGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DBAccountWhereInput
  orderBy?: Prisma.DBAccountOrderByWithAggregationInput | Prisma.DBAccountOrderByWithAggregationInput[]
  by: Prisma.DBAccountScalarFieldEnum[] | Prisma.DBAccountScalarFieldEnum
  having?: Prisma.DBAccountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DBAccountCountAggregateInputType | true
  _avg?: DBAccountAvgAggregateInputType
  _sum?: DBAccountSumAggregateInputType
  _min?: DBAccountMinAggregateInputType
  _max?: DBAccountMaxAggregateInputType
}

export type DBAccountGroupByOutputType = {
  id: string
  userId: string
  provider: string
  providerAccountId: string
  accessToken: string | null
  refreshToken: string | null
  expiresAt: number | null
  createdAt: Date
  _count: DBAccountCountAggregateOutputType | null
  _avg: DBAccountAvgAggregateOutputType | null
  _sum: DBAccountSumAggregateOutputType | null
  _min: DBAccountMinAggregateOutputType | null
  _max: DBAccountMaxAggregateOutputType | null
}

type GetDBAccountGroupByPayload<T extends DBAccountGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DBAccountGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DBAccountGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DBAccountGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DBAccountGroupByOutputType[P]>
      }
    >
  >



export type DBAccountWhereInput = {
  AND?: Prisma.DBAccountWhereInput | Prisma.DBAccountWhereInput[]
  OR?: Prisma.DBAccountWhereInput[]
  NOT?: Prisma.DBAccountWhereInput | Prisma.DBAccountWhereInput[]
  id?: Prisma.StringFilter<"DBAccount"> | string
  userId?: Prisma.StringFilter<"DBAccount"> | string
  provider?: Prisma.StringFilter<"DBAccount"> | string
  providerAccountId?: Prisma.StringFilter<"DBAccount"> | string
  accessToken?: Prisma.StringNullableFilter<"DBAccount"> | string | null
  refreshToken?: Prisma.StringNullableFilter<"DBAccount"> | string | null
  expiresAt?: Prisma.IntNullableFilter<"DBAccount"> | number | null
  createdAt?: Prisma.DateTimeFilter<"DBAccount"> | Date | string
  user?: Prisma.XOR<Prisma.DBUserScalarRelationFilter, Prisma.DBUserWhereInput>
}

export type DBAccountOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerAccountId?: Prisma.SortOrder
  accessToken?: Prisma.SortOrderInput | Prisma.SortOrder
  refreshToken?: Prisma.SortOrderInput | Prisma.SortOrder
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.DBUserOrderByWithRelationInput
}

export type DBAccountWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  providerAccountId?: string
  AND?: Prisma.DBAccountWhereInput | Prisma.DBAccountWhereInput[]
  OR?: Prisma.DBAccountWhereInput[]
  NOT?: Prisma.DBAccountWhereInput | Prisma.DBAccountWhereInput[]
  userId?: Prisma.StringFilter<"DBAccount"> | string
  provider?: Prisma.StringFilter<"DBAccount"> | string
  accessToken?: Prisma.StringNullableFilter<"DBAccount"> | string | null
  refreshToken?: Prisma.StringNullableFilter<"DBAccount"> | string | null
  expiresAt?: Prisma.IntNullableFilter<"DBAccount"> | number | null
  createdAt?: Prisma.DateTimeFilter<"DBAccount"> | Date | string
  user?: Prisma.XOR<Prisma.DBUserScalarRelationFilter, Prisma.DBUserWhereInput>
}, "id" | "providerAccountId">

export type DBAccountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerAccountId?: Prisma.SortOrder
  accessToken?: Prisma.SortOrderInput | Prisma.SortOrder
  refreshToken?: Prisma.SortOrderInput | Prisma.SortOrder
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.DBAccountCountOrderByAggregateInput
  _avg?: Prisma.DBAccountAvgOrderByAggregateInput
  _max?: Prisma.DBAccountMaxOrderByAggregateInput
  _min?: Prisma.DBAccountMinOrderByAggregateInput
  _sum?: Prisma.DBAccountSumOrderByAggregateInput
}

export type DBAccountScalarWhereWithAggregatesInput = {
  AND?: Prisma.DBAccountScalarWhereWithAggregatesInput | Prisma.DBAccountScalarWhereWithAggregatesInput[]
  OR?: Prisma.DBAccountScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DBAccountScalarWhereWithAggregatesInput | Prisma.DBAccountScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DBAccount"> | string
  userId?: Prisma.StringWithAggregatesFilter<"DBAccount"> | string
  provider?: Prisma.StringWithAggregatesFilter<"DBAccount"> | string
  providerAccountId?: Prisma.StringWithAggregatesFilter<"DBAccount"> | string
  accessToken?: Prisma.StringNullableWithAggregatesFilter<"DBAccount"> | string | null
  refreshToken?: Prisma.StringNullableWithAggregatesFilter<"DBAccount"> | string | null
  expiresAt?: Prisma.IntNullableWithAggregatesFilter<"DBAccount"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DBAccount"> | Date | string
}

export type DBAccountCreateInput = {
  id?: string
  provider: string
  providerAccountId: string
  accessToken?: string | null
  refreshToken?: string | null
  expiresAt?: number | null
  createdAt?: Date | string
  user: Prisma.DBUserCreateNestedOneWithoutAccountsInput
}

export type DBAccountUncheckedCreateInput = {
  id?: string
  userId: string
  provider: string
  providerAccountId: string
  accessToken?: string | null
  refreshToken?: string | null
  expiresAt?: number | null
  createdAt?: Date | string
}

export type DBAccountUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  refreshToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.DBUserUpdateOneRequiredWithoutAccountsNestedInput
}

export type DBAccountUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  refreshToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBAccountCreateManyInput = {
  id?: string
  userId: string
  provider: string
  providerAccountId: string
  accessToken?: string | null
  refreshToken?: string | null
  expiresAt?: number | null
  createdAt?: Date | string
}

export type DBAccountUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  refreshToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBAccountUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  refreshToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBAccountListRelationFilter = {
  every?: Prisma.DBAccountWhereInput
  some?: Prisma.DBAccountWhereInput
  none?: Prisma.DBAccountWhereInput
}

export type DBAccountOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DBAccountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerAccountId?: Prisma.SortOrder
  accessToken?: Prisma.SortOrder
  refreshToken?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DBAccountAvgOrderByAggregateInput = {
  expiresAt?: Prisma.SortOrder
}

export type DBAccountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerAccountId?: Prisma.SortOrder
  accessToken?: Prisma.SortOrder
  refreshToken?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DBAccountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerAccountId?: Prisma.SortOrder
  accessToken?: Prisma.SortOrder
  refreshToken?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DBAccountSumOrderByAggregateInput = {
  expiresAt?: Prisma.SortOrder
}

export type DBAccountCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DBAccountCreateWithoutUserInput, Prisma.DBAccountUncheckedCreateWithoutUserInput> | Prisma.DBAccountCreateWithoutUserInput[] | Prisma.DBAccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBAccountCreateOrConnectWithoutUserInput | Prisma.DBAccountCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DBAccountCreateManyUserInputEnvelope
  connect?: Prisma.DBAccountWhereUniqueInput | Prisma.DBAccountWhereUniqueInput[]
}

export type DBAccountUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DBAccountCreateWithoutUserInput, Prisma.DBAccountUncheckedCreateWithoutUserInput> | Prisma.DBAccountCreateWithoutUserInput[] | Prisma.DBAccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBAccountCreateOrConnectWithoutUserInput | Prisma.DBAccountCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DBAccountCreateManyUserInputEnvelope
  connect?: Prisma.DBAccountWhereUniqueInput | Prisma.DBAccountWhereUniqueInput[]
}

export type DBAccountUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DBAccountCreateWithoutUserInput, Prisma.DBAccountUncheckedCreateWithoutUserInput> | Prisma.DBAccountCreateWithoutUserInput[] | Prisma.DBAccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBAccountCreateOrConnectWithoutUserInput | Prisma.DBAccountCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DBAccountUpsertWithWhereUniqueWithoutUserInput | Prisma.DBAccountUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DBAccountCreateManyUserInputEnvelope
  set?: Prisma.DBAccountWhereUniqueInput | Prisma.DBAccountWhereUniqueInput[]
  disconnect?: Prisma.DBAccountWhereUniqueInput | Prisma.DBAccountWhereUniqueInput[]
  delete?: Prisma.DBAccountWhereUniqueInput | Prisma.DBAccountWhereUniqueInput[]
  connect?: Prisma.DBAccountWhereUniqueInput | Prisma.DBAccountWhereUniqueInput[]
  update?: Prisma.DBAccountUpdateWithWhereUniqueWithoutUserInput | Prisma.DBAccountUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DBAccountUpdateManyWithWhereWithoutUserInput | Prisma.DBAccountUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DBAccountScalarWhereInput | Prisma.DBAccountScalarWhereInput[]
}

export type DBAccountUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DBAccountCreateWithoutUserInput, Prisma.DBAccountUncheckedCreateWithoutUserInput> | Prisma.DBAccountCreateWithoutUserInput[] | Prisma.DBAccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DBAccountCreateOrConnectWithoutUserInput | Prisma.DBAccountCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DBAccountUpsertWithWhereUniqueWithoutUserInput | Prisma.DBAccountUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DBAccountCreateManyUserInputEnvelope
  set?: Prisma.DBAccountWhereUniqueInput | Prisma.DBAccountWhereUniqueInput[]
  disconnect?: Prisma.DBAccountWhereUniqueInput | Prisma.DBAccountWhereUniqueInput[]
  delete?: Prisma.DBAccountWhereUniqueInput | Prisma.DBAccountWhereUniqueInput[]
  connect?: Prisma.DBAccountWhereUniqueInput | Prisma.DBAccountWhereUniqueInput[]
  update?: Prisma.DBAccountUpdateWithWhereUniqueWithoutUserInput | Prisma.DBAccountUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DBAccountUpdateManyWithWhereWithoutUserInput | Prisma.DBAccountUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DBAccountScalarWhereInput | Prisma.DBAccountScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DBAccountCreateWithoutUserInput = {
  id?: string
  provider: string
  providerAccountId: string
  accessToken?: string | null
  refreshToken?: string | null
  expiresAt?: number | null
  createdAt?: Date | string
}

export type DBAccountUncheckedCreateWithoutUserInput = {
  id?: string
  provider: string
  providerAccountId: string
  accessToken?: string | null
  refreshToken?: string | null
  expiresAt?: number | null
  createdAt?: Date | string
}

export type DBAccountCreateOrConnectWithoutUserInput = {
  where: Prisma.DBAccountWhereUniqueInput
  create: Prisma.XOR<Prisma.DBAccountCreateWithoutUserInput, Prisma.DBAccountUncheckedCreateWithoutUserInput>
}

export type DBAccountCreateManyUserInputEnvelope = {
  data: Prisma.DBAccountCreateManyUserInput | Prisma.DBAccountCreateManyUserInput[]
}

export type DBAccountUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.DBAccountWhereUniqueInput
  update: Prisma.XOR<Prisma.DBAccountUpdateWithoutUserInput, Prisma.DBAccountUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.DBAccountCreateWithoutUserInput, Prisma.DBAccountUncheckedCreateWithoutUserInput>
}

export type DBAccountUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.DBAccountWhereUniqueInput
  data: Prisma.XOR<Prisma.DBAccountUpdateWithoutUserInput, Prisma.DBAccountUncheckedUpdateWithoutUserInput>
}

export type DBAccountUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.DBAccountScalarWhereInput
  data: Prisma.XOR<Prisma.DBAccountUpdateManyMutationInput, Prisma.DBAccountUncheckedUpdateManyWithoutUserInput>
}

export type DBAccountScalarWhereInput = {
  AND?: Prisma.DBAccountScalarWhereInput | Prisma.DBAccountScalarWhereInput[]
  OR?: Prisma.DBAccountScalarWhereInput[]
  NOT?: Prisma.DBAccountScalarWhereInput | Prisma.DBAccountScalarWhereInput[]
  id?: Prisma.StringFilter<"DBAccount"> | string
  userId?: Prisma.StringFilter<"DBAccount"> | string
  provider?: Prisma.StringFilter<"DBAccount"> | string
  providerAccountId?: Prisma.StringFilter<"DBAccount"> | string
  accessToken?: Prisma.StringNullableFilter<"DBAccount"> | string | null
  refreshToken?: Prisma.StringNullableFilter<"DBAccount"> | string | null
  expiresAt?: Prisma.IntNullableFilter<"DBAccount"> | number | null
  createdAt?: Prisma.DateTimeFilter<"DBAccount"> | Date | string
}

export type DBAccountCreateManyUserInput = {
  id?: string
  provider: string
  providerAccountId: string
  accessToken?: string | null
  refreshToken?: string | null
  expiresAt?: number | null
  createdAt?: Date | string
}

export type DBAccountUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  refreshToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBAccountUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  refreshToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DBAccountUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  refreshToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DBAccountSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  provider?: boolean
  providerAccountId?: boolean
  accessToken?: boolean
  refreshToken?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBAccount"]>

export type DBAccountSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  provider?: boolean
  providerAccountId?: boolean
  accessToken?: boolean
  refreshToken?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBAccount"]>

export type DBAccountSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  provider?: boolean
  providerAccountId?: boolean
  accessToken?: boolean
  refreshToken?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dBAccount"]>

export type DBAccountSelectScalar = {
  id?: boolean
  userId?: boolean
  provider?: boolean
  providerAccountId?: boolean
  accessToken?: boolean
  refreshToken?: boolean
  expiresAt?: boolean
  createdAt?: boolean
}

export type DBAccountOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "provider" | "providerAccountId" | "accessToken" | "refreshToken" | "expiresAt" | "createdAt", ExtArgs["result"]["dBAccount"]>
export type DBAccountInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
}
export type DBAccountIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
}
export type DBAccountIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.DBUserDefaultArgs<ExtArgs>
}

export type $DBAccountPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DBAccount"
  objects: {
    user: Prisma.$DBUserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    provider: string
    providerAccountId: string
    accessToken: string | null
    refreshToken: string | null
    expiresAt: number | null
    createdAt: Date
  }, ExtArgs["result"]["dBAccount"]>
  composites: {}
}

export type DBAccountGetPayload<S extends boolean | null | undefined | DBAccountDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DBAccountPayload, S>

export type DBAccountCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DBAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DBAccountCountAggregateInputType | true
  }

export interface DBAccountDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DBAccount'], meta: { name: 'DBAccount' } }
  /**
   * Find zero or one DBAccount that matches the filter.
   * @param {DBAccountFindUniqueArgs} args - Arguments to find a DBAccount
   * @example
   * // Get one DBAccount
   * const dBAccount = await prisma.dBAccount.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DBAccountFindUniqueArgs>(args: Prisma.SelectSubset<T, DBAccountFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DBAccountClient<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DBAccount that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DBAccountFindUniqueOrThrowArgs} args - Arguments to find a DBAccount
   * @example
   * // Get one DBAccount
   * const dBAccount = await prisma.dBAccount.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DBAccountFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DBAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBAccountClient<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBAccount that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAccountFindFirstArgs} args - Arguments to find a DBAccount
   * @example
   * // Get one DBAccount
   * const dBAccount = await prisma.dBAccount.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DBAccountFindFirstArgs>(args?: Prisma.SelectSubset<T, DBAccountFindFirstArgs<ExtArgs>>): Prisma.Prisma__DBAccountClient<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DBAccount that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAccountFindFirstOrThrowArgs} args - Arguments to find a DBAccount
   * @example
   * // Get one DBAccount
   * const dBAccount = await prisma.dBAccount.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DBAccountFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DBAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DBAccountClient<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DBAccounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAccountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DBAccounts
   * const dBAccounts = await prisma.dBAccount.findMany()
   * 
   * // Get first 10 DBAccounts
   * const dBAccounts = await prisma.dBAccount.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dBAccountWithIdOnly = await prisma.dBAccount.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DBAccountFindManyArgs>(args?: Prisma.SelectSubset<T, DBAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DBAccount.
   * @param {DBAccountCreateArgs} args - Arguments to create a DBAccount.
   * @example
   * // Create one DBAccount
   * const DBAccount = await prisma.dBAccount.create({
   *   data: {
   *     // ... data to create a DBAccount
   *   }
   * })
   * 
   */
  create<T extends DBAccountCreateArgs>(args: Prisma.SelectSubset<T, DBAccountCreateArgs<ExtArgs>>): Prisma.Prisma__DBAccountClient<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DBAccounts.
   * @param {DBAccountCreateManyArgs} args - Arguments to create many DBAccounts.
   * @example
   * // Create many DBAccounts
   * const dBAccount = await prisma.dBAccount.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DBAccountCreateManyArgs>(args?: Prisma.SelectSubset<T, DBAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DBAccounts and returns the data saved in the database.
   * @param {DBAccountCreateManyAndReturnArgs} args - Arguments to create many DBAccounts.
   * @example
   * // Create many DBAccounts
   * const dBAccount = await prisma.dBAccount.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DBAccounts and only return the `id`
   * const dBAccountWithIdOnly = await prisma.dBAccount.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DBAccountCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DBAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DBAccount.
   * @param {DBAccountDeleteArgs} args - Arguments to delete one DBAccount.
   * @example
   * // Delete one DBAccount
   * const DBAccount = await prisma.dBAccount.delete({
   *   where: {
   *     // ... filter to delete one DBAccount
   *   }
   * })
   * 
   */
  delete<T extends DBAccountDeleteArgs>(args: Prisma.SelectSubset<T, DBAccountDeleteArgs<ExtArgs>>): Prisma.Prisma__DBAccountClient<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DBAccount.
   * @param {DBAccountUpdateArgs} args - Arguments to update one DBAccount.
   * @example
   * // Update one DBAccount
   * const dBAccount = await prisma.dBAccount.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DBAccountUpdateArgs>(args: Prisma.SelectSubset<T, DBAccountUpdateArgs<ExtArgs>>): Prisma.Prisma__DBAccountClient<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DBAccounts.
   * @param {DBAccountDeleteManyArgs} args - Arguments to filter DBAccounts to delete.
   * @example
   * // Delete a few DBAccounts
   * const { count } = await prisma.dBAccount.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DBAccountDeleteManyArgs>(args?: Prisma.SelectSubset<T, DBAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DBAccounts
   * const dBAccount = await prisma.dBAccount.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DBAccountUpdateManyArgs>(args: Prisma.SelectSubset<T, DBAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DBAccounts and returns the data updated in the database.
   * @param {DBAccountUpdateManyAndReturnArgs} args - Arguments to update many DBAccounts.
   * @example
   * // Update many DBAccounts
   * const dBAccount = await prisma.dBAccount.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DBAccounts and only return the `id`
   * const dBAccountWithIdOnly = await prisma.dBAccount.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DBAccountUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DBAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DBAccount.
   * @param {DBAccountUpsertArgs} args - Arguments to update or create a DBAccount.
   * @example
   * // Update or create a DBAccount
   * const dBAccount = await prisma.dBAccount.upsert({
   *   create: {
   *     // ... data to create a DBAccount
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DBAccount we want to update
   *   }
   * })
   */
  upsert<T extends DBAccountUpsertArgs>(args: Prisma.SelectSubset<T, DBAccountUpsertArgs<ExtArgs>>): Prisma.Prisma__DBAccountClient<runtime.Types.Result.GetResult<Prisma.$DBAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DBAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAccountCountArgs} args - Arguments to filter DBAccounts to count.
   * @example
   * // Count the number of DBAccounts
   * const count = await prisma.dBAccount.count({
   *   where: {
   *     // ... the filter for the DBAccounts we want to count
   *   }
   * })
  **/
  count<T extends DBAccountCountArgs>(
    args?: Prisma.Subset<T, DBAccountCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DBAccountCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DBAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DBAccountAggregateArgs>(args: Prisma.Subset<T, DBAccountAggregateArgs>): Prisma.PrismaPromise<GetDBAccountAggregateType<T>>

  /**
   * Group by DBAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DBAccountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DBAccountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DBAccountGroupByArgs['orderBy'] }
      : { orderBy?: DBAccountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DBAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDBAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DBAccount model
 */
readonly fields: DBAccountFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DBAccount.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DBAccountClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.DBUserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DBUserDefaultArgs<ExtArgs>>): Prisma.Prisma__DBUserClient<runtime.Types.Result.GetResult<Prisma.$DBUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DBAccount model
 */
export interface DBAccountFieldRefs {
  readonly id: Prisma.FieldRef<"DBAccount", 'String'>
  readonly userId: Prisma.FieldRef<"DBAccount", 'String'>
  readonly provider: Prisma.FieldRef<"DBAccount", 'String'>
  readonly providerAccountId: Prisma.FieldRef<"DBAccount", 'String'>
  readonly accessToken: Prisma.FieldRef<"DBAccount", 'String'>
  readonly refreshToken: Prisma.FieldRef<"DBAccount", 'String'>
  readonly expiresAt: Prisma.FieldRef<"DBAccount", 'Int'>
  readonly createdAt: Prisma.FieldRef<"DBAccount", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DBAccount findUnique
 */
export type DBAccountFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
  /**
   * Filter, which DBAccount to fetch.
   */
  where: Prisma.DBAccountWhereUniqueInput
}

/**
 * DBAccount findUniqueOrThrow
 */
export type DBAccountFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
  /**
   * Filter, which DBAccount to fetch.
   */
  where: Prisma.DBAccountWhereUniqueInput
}

/**
 * DBAccount findFirst
 */
export type DBAccountFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
  /**
   * Filter, which DBAccount to fetch.
   */
  where?: Prisma.DBAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAccounts to fetch.
   */
  orderBy?: Prisma.DBAccountOrderByWithRelationInput | Prisma.DBAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBAccounts.
   */
  cursor?: Prisma.DBAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBAccounts.
   */
  distinct?: Prisma.DBAccountScalarFieldEnum | Prisma.DBAccountScalarFieldEnum[]
}

/**
 * DBAccount findFirstOrThrow
 */
export type DBAccountFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
  /**
   * Filter, which DBAccount to fetch.
   */
  where?: Prisma.DBAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAccounts to fetch.
   */
  orderBy?: Prisma.DBAccountOrderByWithRelationInput | Prisma.DBAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DBAccounts.
   */
  cursor?: Prisma.DBAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DBAccounts.
   */
  distinct?: Prisma.DBAccountScalarFieldEnum | Prisma.DBAccountScalarFieldEnum[]
}

/**
 * DBAccount findMany
 */
export type DBAccountFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
  /**
   * Filter, which DBAccounts to fetch.
   */
  where?: Prisma.DBAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DBAccounts to fetch.
   */
  orderBy?: Prisma.DBAccountOrderByWithRelationInput | Prisma.DBAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DBAccounts.
   */
  cursor?: Prisma.DBAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DBAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DBAccounts.
   */
  skip?: number
  distinct?: Prisma.DBAccountScalarFieldEnum | Prisma.DBAccountScalarFieldEnum[]
}

/**
 * DBAccount create
 */
export type DBAccountCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
  /**
   * The data needed to create a DBAccount.
   */
  data: Prisma.XOR<Prisma.DBAccountCreateInput, Prisma.DBAccountUncheckedCreateInput>
}

/**
 * DBAccount createMany
 */
export type DBAccountCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DBAccounts.
   */
  data: Prisma.DBAccountCreateManyInput | Prisma.DBAccountCreateManyInput[]
}

/**
 * DBAccount createManyAndReturn
 */
export type DBAccountCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * The data used to create many DBAccounts.
   */
  data: Prisma.DBAccountCreateManyInput | Prisma.DBAccountCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DBAccount update
 */
export type DBAccountUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
  /**
   * The data needed to update a DBAccount.
   */
  data: Prisma.XOR<Prisma.DBAccountUpdateInput, Prisma.DBAccountUncheckedUpdateInput>
  /**
   * Choose, which DBAccount to update.
   */
  where: Prisma.DBAccountWhereUniqueInput
}

/**
 * DBAccount updateMany
 */
export type DBAccountUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DBAccounts.
   */
  data: Prisma.XOR<Prisma.DBAccountUpdateManyMutationInput, Prisma.DBAccountUncheckedUpdateManyInput>
  /**
   * Filter which DBAccounts to update
   */
  where?: Prisma.DBAccountWhereInput
  /**
   * Limit how many DBAccounts to update.
   */
  limit?: number
}

/**
 * DBAccount updateManyAndReturn
 */
export type DBAccountUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * The data used to update DBAccounts.
   */
  data: Prisma.XOR<Prisma.DBAccountUpdateManyMutationInput, Prisma.DBAccountUncheckedUpdateManyInput>
  /**
   * Filter which DBAccounts to update
   */
  where?: Prisma.DBAccountWhereInput
  /**
   * Limit how many DBAccounts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DBAccount upsert
 */
export type DBAccountUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
  /**
   * The filter to search for the DBAccount to update in case it exists.
   */
  where: Prisma.DBAccountWhereUniqueInput
  /**
   * In case the DBAccount found by the `where` argument doesn't exist, create a new DBAccount with this data.
   */
  create: Prisma.XOR<Prisma.DBAccountCreateInput, Prisma.DBAccountUncheckedCreateInput>
  /**
   * In case the DBAccount was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DBAccountUpdateInput, Prisma.DBAccountUncheckedUpdateInput>
}

/**
 * DBAccount delete
 */
export type DBAccountDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
  /**
   * Filter which DBAccount to delete.
   */
  where: Prisma.DBAccountWhereUniqueInput
}

/**
 * DBAccount deleteMany
 */
export type DBAccountDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DBAccounts to delete
   */
  where?: Prisma.DBAccountWhereInput
  /**
   * Limit how many DBAccounts to delete.
   */
  limit?: number
}

/**
 * DBAccount without action
 */
export type DBAccountDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DBAccount
   */
  select?: Prisma.DBAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DBAccount
   */
  omit?: Prisma.DBAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DBAccountInclude<ExtArgs> | null
}
